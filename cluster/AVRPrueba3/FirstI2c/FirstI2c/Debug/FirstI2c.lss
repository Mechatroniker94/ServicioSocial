
FirstI2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000703  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Stop>:
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
}
  6c:	84 e9       	ldi	r24, 0x94	; 148
  6e:	86 bf       	out	0x36, r24	; 54
  70:	06 b6       	in	r0, 0x36	; 54
  72:	04 fc       	sbrc	r0, 4
  74:	fd cf       	rjmp	.-6      	; 0x70 <I2C_Stop+0x4>
  76:	08 95       	ret

00000078 <I2C_Read_Ack>:
  78:	84 ec       	ldi	r24, 0xC4	; 196
  7a:	86 bf       	out	0x36, r24	; 54
  7c:	06 b6       	in	r0, 0x36	; 54
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <I2C_Read_Ack+0x4>
  82:	83 b1       	in	r24, 0x03	; 3
  84:	08 95       	ret

00000086 <I2C_Start>:

uint8_t I2C_Start(char write_address)/* I2C start function */
{
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
  86:	94 ea       	ldi	r25, 0xA4	; 164
  88:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  8a:	06 b6       	in	r0, 0x36	; 54
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <I2C_Start+0x4>
	status=TWSR&0xF8;		/* Read TWI status register */
  90:	91 b1       	in	r25, 0x01	; 1
  92:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x08)		/* Check weather START transmitted or not? */
  94:	98 30       	cpi	r25, 0x08	; 8
  96:	71 f4       	brne	.+28     	; 0xb4 <I2C_Start+0x2e>
	return 0;			/* Return 0 to indicate start condition fail */
	TWDR=write_address;		/* Write SLA+W in TWI data register */
  98:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
  9a:	84 e8       	ldi	r24, 0x84	; 132
  9c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <I2C_Start+0x18>
	status=TWSR&0xF8;		/* Read TWI status register */
  a4:	81 b1       	in	r24, 0x01	; 1
  a6:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
  a8:	88 31       	cpi	r24, 0x18	; 24
  aa:	31 f0       	breq	.+12     	; 0xb8 <I2C_Start+0x32>
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
  ac:	80 32       	cpi	r24, 0x20	; 32
  ae:	31 f4       	brne	.+12     	; 0xbc <I2C_Start+0x36>
	return 2;			/* Return 2 to indicate nack received */
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	08 95       	ret
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status!=0x08)		/* Check weather START transmitted or not? */
	return 0;			/* Return 0 to indicate start condition fail */
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	TWDR=write_address;		/* Write SLA+W in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
	return 1;			/* Return 1 to indicate ack received */
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	08 95       	ret
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
  bc:	83 e0       	ldi	r24, 0x03	; 3
}
  be:	08 95       	ret

000000c0 <I2C_Init>:

void I2C_Init()			/* I2C initialize function */
{
	TWBR = BITRATE(TWSR=0x00);	/* Get bit rate register value by formula */
  c0:	11 b8       	out	0x01, r1	; 1
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 b9       	out	0x00, r24	; 0
  c6:	08 95       	ret

000000c8 <main>:
void I2C_Init()	;


int main(void)
{
	DDRC = 0x00;
  c8:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x00;
  ca:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
  cc:	12 ba       	out	0x12, r1	; 18
//ESCRITURA I2C
    I2C_Init();			/* Initialize I2C */
  ce:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Init>
    //I2C_Start(EEPROM_Write_Addess);/* Start I2C with device write address */
    //I2C_Write(0x8F);		/* Write start memory address for data write */
    //I2C_Stop();			/* Stop I2C */
    //_delay_ms(10);
//LECTURA I2C
    I2C_Start(EEPROM_Read_Addess);/* Start I2C with device write address */
  d2:	81 ea       	ldi	r24, 0xA1	; 161
  d4:	0e 94 43 00 	call	0x86	; 0x86 <I2C_Start>
	PORTD = I2C_Read_Ack();
  d8:	0e 94 3c 00 	call	0x78	; 0x78 <I2C_Read_Ack>
  dc:	82 bb       	out	0x12, r24	; 18
    I2C_Stop();			/* Stop I2C */
  de:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Stop>
    return 0;
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
