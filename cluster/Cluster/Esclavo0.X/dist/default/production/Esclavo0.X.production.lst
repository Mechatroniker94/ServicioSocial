

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Sep 19 13:02:46 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=3
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.20
    40                           ; Generated 12/02/2020 GMT
    41                           ; 
    42                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F887 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0088                     	;# 
   113  0089                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  008F                     	;# 
   118  0090                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0097                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  0105                     	;# 
   137  0107                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0185                     	;# 
   146  0187                     	;# 
   147  0188                     	;# 
   148  0189                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  0087                     	;# 
   190  0088                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0098                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  0105                     	;# 
   215  0107                     	;# 
   216  0108                     	;# 
   217  0109                     	;# 
   218  010C                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  0185                     	;# 
   224  0187                     	;# 
   225  0188                     	;# 
   226  0189                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0008                     	;# 
   238  0009                     	;# 
   239  000A                     	;# 
   240  000B                     	;# 
   241  000C                     	;# 
   242  000D                     	;# 
   243  000E                     	;# 
   244  000E                     	;# 
   245  000F                     	;# 
   246  0010                     	;# 
   247  0011                     	;# 
   248  0012                     	;# 
   249  0013                     	;# 
   250  0014                     	;# 
   251  0015                     	;# 
   252  0015                     	;# 
   253  0016                     	;# 
   254  0017                     	;# 
   255  0018                     	;# 
   256  0019                     	;# 
   257  001A                     	;# 
   258  001B                     	;# 
   259  001B                     	;# 
   260  001C                     	;# 
   261  001D                     	;# 
   262  001E                     	;# 
   263  001F                     	;# 
   264  0081                     	;# 
   265  0085                     	;# 
   266  0086                     	;# 
   267  0087                     	;# 
   268  0088                     	;# 
   269  0089                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  008F                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0094                     	;# 
   281  0095                     	;# 
   282  0096                     	;# 
   283  0097                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  009F                     	;# 
   292  0105                     	;# 
   293  0107                     	;# 
   294  0108                     	;# 
   295  0109                     	;# 
   296  010C                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  0185                     	;# 
   302  0187                     	;# 
   303  0188                     	;# 
   304  0189                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0008                     	;# 
   316  0009                     	;# 
   317  000A                     	;# 
   318  000B                     	;# 
   319  000C                     	;# 
   320  000D                     	;# 
   321  000E                     	;# 
   322  000E                     	;# 
   323  000F                     	;# 
   324  0010                     	;# 
   325  0011                     	;# 
   326  0012                     	;# 
   327  0013                     	;# 
   328  0014                     	;# 
   329  0015                     	;# 
   330  0015                     	;# 
   331  0016                     	;# 
   332  0017                     	;# 
   333  0018                     	;# 
   334  0019                     	;# 
   335  001A                     	;# 
   336  001B                     	;# 
   337  001B                     	;# 
   338  001C                     	;# 
   339  001D                     	;# 
   340  001E                     	;# 
   341  001F                     	;# 
   342  0081                     	;# 
   343  0085                     	;# 
   344  0086                     	;# 
   345  0087                     	;# 
   346  0088                     	;# 
   347  0089                     	;# 
   348  008C                     	;# 
   349  008D                     	;# 
   350  008E                     	;# 
   351  008F                     	;# 
   352  0090                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0093                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0098                     	;# 
   363  0099                     	;# 
   364  009A                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  009F                     	;# 
   370  0105                     	;# 
   371  0107                     	;# 
   372  0108                     	;# 
   373  0109                     	;# 
   374  010C                     	;# 
   375  010C                     	;# 
   376  010D                     	;# 
   377  010E                     	;# 
   378  010F                     	;# 
   379  0185                     	;# 
   380  0187                     	;# 
   381  0188                     	;# 
   382  0189                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385                           
   386                           	psect	strings
   387  0539                     __pstrings:
   388  0539                     stringtab:
   389  0539                     __stringtab:
   390  0539                     stringcode:	
   391                           ;	String table - string pointers are 1 byte each
   392                           
   393  0539                     stringdir:
   394  0539  3005               	movlw	high stringdir
   395  053A  008A               	movwf	10
   396  053B  0804               	movf	4,w
   397  053C  0A84               	incf	4,f
   398  053D  0782               	addwf	2,f
   399  053E                     __stringbase:
   400  053E  3400               	retlw	0
   401  053F                     __end_of__stringtab:
   402  053F                     _dpowers:
   403  053F  3401               	retlw	1
   404  0540  3400               	retlw	0
   405  0541  340A               	retlw	10
   406  0542  3400               	retlw	0
   407  0543  3464               	retlw	100
   408  0544  3400               	retlw	0
   409  0545  34E8               	retlw	232
   410  0546  3403               	retlw	3
   411  0547  3410               	retlw	16
   412  0548  3427               	retlw	39
   413  0549                     __end_of_dpowers:
   414  0014                     _SSPCONbits	set	20
   415  0013                     _SSPBUF	set	19
   416  0014                     _SSPCON	set	20
   417  001A                     _RCREG	set	26
   418  0019                     _TXREG	set	25
   419  0018                     _RCSTAbits	set	24
   420  0006                     _PORTBbits	set	6
   421  0006                     _PORTB	set	6
   422  0008                     _PORTD	set	8
   423  000C                     _PIR1bits	set	12
   424  000B                     _INTCONbits	set	11
   425  0063                     _SSPIF	set	99
   426  0094                     _SSPSTATbits	set	148
   427  0091                     _SSPCON2bits	set	145
   428  0091                     _SSPCON2	set	145
   429  0094                     _SSPSTAT	set	148
   430  0093                     _SSPADD	set	147
   431  0087                     _TRISCbits	set	135
   432  008C                     _PIE1bits	set	140
   433  0098                     _TXSTAbits	set	152
   434  0099                     _SPBRG	set	153
   435  0086                     _TRISBbits	set	134
   436  0086                     _TRISB	set	134
   437  0088                     _TRISD	set	136
   438  043C                     _TRISC4	set	1084
   439  043B                     _TRISC3	set	1083
   440  0549                     STR_3:
   441  0549  3425               	retlw	37	;'%'
   442  054A  3464               	retlw	100	;'d'
   443  054B  340A               	retlw	10
   444  054C  3400               	retlw	0
   445  054D                     STR_1:
   446  054D  344D               	retlw	77	;'M'
   447  054E  3431               	retlw	49	;'1'
   448  054F  3400               	retlw	0
   449  0550                     STR_2:
   450  0550  3450               	retlw	80	;'P'
   451  0551  3431               	retlw	49	;'1'
   452  0552  3400               	retlw	0
   453  0553                     STR_4:
   454  0553  3450               	retlw	80	;'P'
   455  0554  3432               	retlw	50	;'2'
   456  0555  3400               	retlw	0
   457  0556                     STR_6:
   458  0556  342C               	retlw	44	;','
   459  0557  3400               	retlw	0
   460  0549                     
   461                           	psect	cinit
   462  0015                     start_initialization:	
   463                           ; #config settings
   464                           
   465  0015                     __initialization:
   466                           
   467                           ; Clear objects allocated to COMMON
   468  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   469                           
   470                           ; Clear objects allocated to BANK0
   471  0016  1283               	bcf	3,5	;RP0=0, select bank0
   472  0017  1303               	bcf	3,6	;RP1=0, select bank0
   473  0018  01CD               	clrf	__pbssBANK0& (0+127)
   474  0019  01CE               	clrf	(__pbssBANK0+1)& (0+127)
   475  001A  01CF               	clrf	(__pbssBANK0+2)& (0+127)
   476  001B  01D0               	clrf	(__pbssBANK0+3)& (0+127)
   477  001C  01D1               	clrf	(__pbssBANK0+4)& (0+127)
   478  001D  01D2               	clrf	(__pbssBANK0+5)& (0+127)
   479  001E  01D3               	clrf	(__pbssBANK0+6)& (0+127)
   480  001F  01D4               	clrf	(__pbssBANK0+7)& (0+127)
   481  0020  01D5               	clrf	(__pbssBANK0+8)& (0+127)
   482  0021  01D6               	clrf	(__pbssBANK0+9)& (0+127)
   483  0022  01D7               	clrf	(__pbssBANK0+10)& (0+127)
   484  0023  01D8               	clrf	(__pbssBANK0+11)& (0+127)
   485  0024  01D9               	clrf	(__pbssBANK0+12)& (0+127)
   486  0025  01DA               	clrf	(__pbssBANK0+13)& (0+127)
   487  0026                     end_of_initialization:	
   488                           ;End of C runtime variable initialization code
   489                           
   490  0026                     __end_of__initialization:
   491  0026  0183               	clrf	3
   492  0027  120A  118A  2B62   	ljmp	_main	;jump to C main() function
   493                           
   494                           	psect	bssCOMMON
   495  007C                     __pbssCOMMON:
   496  007C                     strtok@sp:
   497  007C                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500  004D                     __pbssBANK0:
   501  004D                     _dir:
   502  004D                     	ds	3
   503  0050                     _lectura:
   504  0050                     	ds	1
   505  0051                     _data:
   506  0051                     	ds	10
   507                           
   508                           	psect	cstackCOMMON
   509  0070                     __pcstackCOMMON:
   510  0070                     ?_usart_Tx:
   511  0070                     ??_usart_Tx:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_recivedCMD:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ??_recivedCMD:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ?_token:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_i2c_start:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ??_i2c_start:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_i2c_write:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ??_i2c_write:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_i2c_read:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ??_i2c_read:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ?_i2c_sendACK:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ??_i2c_sendACK:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_i2c_stop:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ??_i2c_stop:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_usart_TxStr:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_usart_Interrupt:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_i2c_init:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_get1:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ??_get1:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_i2c_idle:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ??_i2c_idle:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_strchr:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_myISR:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_main:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_strcmp:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?___lwdiv:	
   587                           ; 2 bytes @ 0x0
   588                           
   589  0070                     usart_Tx@send:	
   590                           ; 2 bytes @ 0x0
   591                           
   592  0070                     i2c_write@dato:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     strcmp@s2:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ___lwdiv@divisor:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     strchr@chr:	
   602                           ; 2 bytes @ 0x0
   603                           
   604                           
   605                           ; 2 bytes @ 0x0
   606  0070                     	ds	1
   607  0071                     ??_usart_TxStr:
   608  0071                     usart_TxStr@str:	
   609                           ; 1 bytes @ 0x1
   610                           
   611  0071                     recivedCMD@cmd:	
   612                           ; 1 bytes @ 0x1
   613                           
   614                           
   615                           ; 1 bytes @ 0x1
   616  0071                     	ds	1
   617  0072                     ??_strcmp:
   618  0072                     ??_strchr:	
   619                           ; 1 bytes @ 0x2
   620                           
   621  0072                     recivedCMD@i:	
   622                           ; 1 bytes @ 0x2
   623                           
   624  0072                     strchr@ptr:	
   625                           ; 1 bytes @ 0x2
   626                           
   627  0072                     ___lwdiv@dividend:	
   628                           ; 1 bytes @ 0x2
   629                           
   630                           
   631                           ; 2 bytes @ 0x2
   632  0072                     	ds	1
   633  0073                     ?_strspn:
   634  0073                     ?_strcspn:	
   635                           ; 2 bytes @ 0x3
   636                           
   637  0073                     recivedCMD@j:	
   638                           ; 2 bytes @ 0x3
   639                           
   640  0073                     strcspn@s2:	
   641                           ; 1 bytes @ 0x3
   642                           
   643  0073                     strspn@s2:	
   644                           ; 1 bytes @ 0x3
   645                           
   646                           
   647                           ; 1 bytes @ 0x3
   648  0073                     	ds	1
   649  0074                     ??___lwdiv:
   650  0074                     strcmp@r:	
   651                           ; 1 bytes @ 0x4
   652                           
   653  0074                     ___lwdiv@quotient:	
   654                           ; 1 bytes @ 0x4
   655                           
   656                           
   657                           ; 2 bytes @ 0x4
   658  0074                     	ds	1
   659  0075                     ??_strspn:
   660  0075                     ??_strcspn:	
   661                           ; 1 bytes @ 0x5
   662                           
   663  0075                     strcmp@s1:	
   664                           ; 1 bytes @ 0x5
   665                           
   666                           
   667                           ; 1 bytes @ 0x5
   668  0075                     	ds	1
   669  0076                     ___lwdiv@counter:
   670                           
   671                           ; 1 bytes @ 0x6
   672  0076                     	ds	1
   673  0077                     ?___lwmod:
   674  0077                     ___lwmod@divisor:	
   675                           ; 2 bytes @ 0x7
   676                           
   677  0077                     strcspn@i:	
   678                           ; 2 bytes @ 0x7
   679                           
   680  0077                     strspn@i:	
   681                           ; 2 bytes @ 0x7
   682                           
   683                           
   684                           ; 2 bytes @ 0x7
   685  0077                     	ds	2
   686  0079                     strcspn@s1:
   687  0079                     strspn@s1:	
   688                           ; 1 bytes @ 0x9
   689                           
   690  0079                     ___lwmod@dividend:	
   691                           ; 1 bytes @ 0x9
   692                           
   693                           
   694                           ; 2 bytes @ 0x9
   695  0079                     	ds	1
   696  007A                     ?_strtok:
   697  007A                     strtok@s2:	
   698                           ; 1 bytes @ 0xA
   699                           
   700                           
   701                           ; 1 bytes @ 0xA
   702  007A                     	ds	1
   703  007B                     ??_strtok:
   704  007B                     ??___lwmod:	
   705                           ; 1 bytes @ 0xB
   706                           
   707  007B                     ___lwmod@counter:	
   708                           ; 1 bytes @ 0xB
   709                           
   710  007B                     strtok@s1:	
   711                           ; 1 bytes @ 0xB
   712                           
   713                           
   714                           ; 1 bytes @ 0xB
   715  007B                     	ds	1
   716  007C                     ??_token:
   717                           
   718                           	psect	cstackBANK0
   719  0020                     __pcstackBANK0:	
   720                           ; 1 bytes @ 0xC
   721                           
   722  0020                     ?_sprintf:
   723  0020                     sprintf@f:	
   724                           ; 2 bytes @ 0x0
   725                           
   726  0020                     token@i:	
   727                           ; 1 bytes @ 0x0
   728                           
   729                           
   730                           ; 2 bytes @ 0x0
   731  0020                     	ds	2
   732  0022                     token@cmd:
   733                           
   734                           ; 1 bytes @ 0x2
   735  0022                     	ds	1
   736  0023                     ??_sprintf:
   737  0023                     token@tok:	
   738                           ; 1 bytes @ 0x3
   739                           
   740                           
   741                           ; 1 bytes @ 0x3
   742  0023                     	ds	3
   743  0026                     sprintf@ap:
   744                           
   745                           ; 1 bytes @ 0x6
   746  0026                     	ds	1
   747  0027                     sprintf@flag:
   748                           
   749                           ; 1 bytes @ 0x7
   750  0027                     	ds	1
   751  0028                     sprintf@prec:
   752                           
   753                           ; 1 bytes @ 0x8
   754  0028                     	ds	1
   755  0029                     sprintf@val:
   756                           
   757                           ; 2 bytes @ 0x9
   758  0029                     	ds	2
   759  002B                     sprintf@sp:
   760                           
   761                           ; 1 bytes @ 0xB
   762  002B                     	ds	1
   763  002C                     sprintf@c:
   764                           
   765                           ; 1 bytes @ 0xC
   766  002C                     	ds	1
   767  002D                     ??_myISR:
   768                           
   769                           ; 1 bytes @ 0xD
   770  002D                     	ds	6
   771  0033                     ??_usart_Interrupt:
   772  0033                     ??_i2c_init:	
   773                           ; 1 bytes @ 0x13
   774                           
   775  0033                     ?___aldiv:	
   776                           ; 1 bytes @ 0x13
   777                           
   778  0033                     ___aldiv@divisor:	
   779                           ; 4 bytes @ 0x13
   780                           
   781                           
   782                           ; 4 bytes @ 0x13
   783  0033                     	ds	4
   784  0037                     ___aldiv@dividend:
   785                           
   786                           ; 4 bytes @ 0x17
   787  0037                     	ds	4
   788  003B                     ??___aldiv:
   789                           
   790                           ; 1 bytes @ 0x1B
   791  003B                     	ds	1
   792  003C                     ___aldiv@counter:
   793                           
   794                           ; 1 bytes @ 0x1C
   795  003C                     	ds	1
   796  003D                     ___aldiv@sign:
   797                           
   798                           ; 1 bytes @ 0x1D
   799  003D                     	ds	1
   800  003E                     ___aldiv@quotient:
   801                           
   802                           ; 4 bytes @ 0x1E
   803  003E                     	ds	4
   804  0042                     ?_usart_init:
   805  0042                     usart_init@BAUD:	
   806                           ; 1 bytes @ 0x22
   807                           
   808                           
   809                           ; 4 bytes @ 0x22
   810  0042                     	ds	4
   811  0046                     ??_usart_init:
   812  0046                     _usart_init$1348:	
   813                           ; 1 bytes @ 0x26
   814                           
   815                           
   816                           ; 4 bytes @ 0x26
   817  0046                     	ds	4
   818  004A                     ??_main:
   819                           
   820                           ; 1 bytes @ 0x2A
   821  004A                     	ds	3
   822                           
   823                           	psect	maintext
   824  0362                     __pmaintext:	
   825 ;;
   826 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   827 ;;
   828 ;; *************** function _main *****************
   829 ;; Defined at:
   830 ;;		line 59 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : B00/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   844 ;;      Params:         0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0
   846 ;;      Temps:          0       3       0       0       0
   847 ;;      Totals:         0       3       0       0       0
   848 ;;Total ram usage:        3 bytes
   849 ;; Hardware stack levels required when called:    8
   850 ;; This function calls:
   851 ;;		_i2c_init
   852 ;;		_usart_Interrupt
   853 ;;		_usart_init
   854 ;; This function is called by:
   855 ;;		Startup code after reset
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           
   860                           ;psect for function _main
   861  0362                     _main:
   862  0362                     l1763:	
   863                           ;incstack = 0
   864                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   865                           
   866                           
   867                           ;main.c: 60:     TRISD = 0x00;
   868  0362  1683               	bsf	3,5	;RP0=1, select bank1
   869  0363  1303               	bcf	3,6	;RP1=0, select bank1
   870  0364  0188               	clrf	8	;volatile
   871                           
   872                           ;main.c: 61:     PORTD = 0x00;
   873  0365  1283               	bcf	3,5	;RP0=0, select bank0
   874  0366  1303               	bcf	3,6	;RP1=0, select bank0
   875  0367  0188               	clrf	8	;volatile
   876                           
   877                           ;main.c: 62:     TRISB = 0x00;
   878  0368  1683               	bsf	3,5	;RP0=1, select bank1
   879  0369  1303               	bcf	3,6	;RP1=0, select bank1
   880  036A  0186               	clrf	6	;volatile
   881                           
   882                           ;main.c: 63:     PORTB = 0x00;
   883  036B  1283               	bcf	3,5	;RP0=0, select bank0
   884  036C  1303               	bcf	3,6	;RP1=0, select bank0
   885  036D  0186               	clrf	6	;volatile
   886  036E                     l1765:
   887                           
   888                           ;main.c: 64:     usart_init(9600);
   889  036E  3000               	movlw	0
   890  036F  00C5               	movwf	usart_init@BAUD+3
   891  0370  3000               	movlw	0
   892  0371  00C4               	movwf	usart_init@BAUD+2
   893  0372  3025               	movlw	37
   894  0373  00C3               	movwf	usart_init@BAUD+1
   895  0374  3080               	movlw	128
   896  0375  00C2               	movwf	usart_init@BAUD
   897  0376  120A  118A  22C7  120A  118A  	fcall	_usart_init
   898  037B                     l1767:
   899                           
   900                           ;main.c: 65:     usart_Interrupt();
   901  037B  120A  118A  25DE  120A  118A  	fcall	_usart_Interrupt
   902  0380                     l1769:
   903                           
   904                           ;main.c: 66:     i2c_init();
   905  0380  120A  118A  25A9  120A  118A  	fcall	_i2c_init
   906  0385                     l1771:
   907                           
   908                           ;main.c: 69:         PORTBbits.RB0 = 1;
   909  0385  1283               	bcf	3,5	;RP0=0, select bank0
   910  0386  1303               	bcf	3,6	;RP1=0, select bank0
   911  0387  1406               	bsf	6,0	;volatile
   912  0388                     l1773:
   913                           
   914                           ;main.c: 70:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   915  0388  301A               	movlw	26
   916  0389  1283               	bcf	3,5	;RP0=0, select bank0
   917  038A  1303               	bcf	3,6	;RP1=0, select bank0
   918  038B  00CC               	movwf	??_main+2
   919  038C  305E               	movlw	94
   920  038D  00CB               	movwf	??_main+1
   921  038E  306D               	movlw	109
   922  038F  00CA               	movwf	??_main
   923  0390                     u1327:
   924  0390  0BCA               	decfsz	??_main,f
   925  0391  2B90               	goto	u1327
   926  0392  0BCB               	decfsz	??_main+1,f
   927  0393  2B90               	goto	u1327
   928  0394  0BCC               	decfsz	??_main+2,f
   929  0395  2B90               	goto	u1327
   930  0396  2B97               	nop2
   931  0397                     l1775:
   932                           
   933                           ;main.c: 72:         PORTBbits.RB0 = 0;
   934  0397  1283               	bcf	3,5	;RP0=0, select bank0
   935  0398  1303               	bcf	3,6	;RP1=0, select bank0
   936  0399  1006               	bcf	6,0	;volatile
   937  039A                     l1777:
   938                           
   939                           ;main.c: 73:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   940  039A  301A               	movlw	26
   941  039B  1283               	bcf	3,5	;RP0=0, select bank0
   942  039C  1303               	bcf	3,6	;RP1=0, select bank0
   943  039D  00CC               	movwf	??_main+2
   944  039E  305E               	movlw	94
   945  039F  00CB               	movwf	??_main+1
   946  03A0  306D               	movlw	109
   947  03A1  00CA               	movwf	??_main
   948  03A2                     u1337:
   949  03A2  0BCA               	decfsz	??_main,f
   950  03A3  2BA2               	goto	u1337
   951  03A4  0BCB               	decfsz	??_main+1,f
   952  03A5  2BA2               	goto	u1337
   953  03A6  0BCC               	decfsz	??_main+2,f
   954  03A7  2BA2               	goto	u1337
   955  03A8  2BA9               	nop2
   956  03A9  2B85               	goto	l1771
   957  03AA  120A  118A  2812   	ljmp	start
   958  03AD                     __end_of_main:
   959                           
   960                           	psect	text1
   961  02C7                     __ptext1:	
   962 ;; *************** function _usart_init *****************
   963 ;; Defined at:
   964 ;;		line 4 in file "usart.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  BAUD            4   34[BANK0 ] long 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;		None
   969 ;; Return value:  Size  Location     Type
   970 ;;                  1    wreg      void 
   971 ;; Registers used:
   972 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   978 ;;      Params:         0       4       0       0       0
   979 ;;      Locals:         0       4       0       0       0
   980 ;;      Temps:          0       0       0       0       0
   981 ;;      Totals:         0       8       0       0       0
   982 ;;Total ram usage:        8 bytes
   983 ;; Hardware stack levels used:    1
   984 ;; Hardware stack levels required when called:    7
   985 ;; This function calls:
   986 ;;		___aldiv
   987 ;; This function is called by:
   988 ;;		_main
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           
   993                           ;psect for function _usart_init
   994  02C7                     _usart_init:
   995  02C7                     l1677:	
   996                           ;incstack = 0
   997                           ; Regs used in _usart_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   998                           
   999                           
  1000                           ;usart.c: 6:     TRISBbits.TRISB1 = 1;
  1001  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  1002  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  1003  02C9  1486               	bsf	6,1	;volatile
  1004                           
  1005                           ;usart.c: 7:     TRISBbits.TRISB2 = 0;
  1006  02CA  1106               	bcf	6,2	;volatile
  1007  02CB                     l1679:
  1008                           
  1009                           ;usart.c: 8:     SPBRG = (unsigned char)(((20000000/BAUD)/64) - 1);
  1010  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  1011  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  1012  02CD  0845               	movf	usart_init@BAUD+3,w
  1013  02CE  00B6               	movwf	___aldiv@divisor+3
  1014  02CF  0844               	movf	usart_init@BAUD+2,w
  1015  02D0  00B5               	movwf	___aldiv@divisor+2
  1016  02D1  0843               	movf	usart_init@BAUD+1,w
  1017  02D2  00B4               	movwf	___aldiv@divisor+1
  1018  02D3  0842               	movf	usart_init@BAUD,w
  1019  02D4  00B3               	movwf	___aldiv@divisor
  1020  02D5  3001               	movlw	1
  1021  02D6  00BA               	movwf	___aldiv@dividend+3
  1022  02D7  3031               	movlw	49
  1023  02D8  00B9               	movwf	___aldiv@dividend+2
  1024  02D9  302D               	movlw	45
  1025  02DA  00B8               	movwf	___aldiv@dividend+1
  1026  02DB  3000               	movlw	0
  1027  02DC  00B7               	movwf	___aldiv@dividend
  1028  02DD  120A  118A  222A  120A  118A  	fcall	___aldiv
  1029  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1030  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1031  02E4  0836               	movf	?___aldiv+3,w
  1032  02E5  00C9               	movwf	_usart_init$1348+3
  1033  02E6  0835               	movf	?___aldiv+2,w
  1034  02E7  00C8               	movwf	_usart_init$1348+2
  1035  02E8  0834               	movf	?___aldiv+1,w
  1036  02E9  00C7               	movwf	_usart_init$1348+1
  1037  02EA  0833               	movf	?___aldiv,w
  1038  02EB  00C6               	movwf	_usart_init$1348
  1039                           
  1040                           ;usart.c: 8:     SPBRG = (unsigned char)(((20000000/BAUD)/64) - 1);
  1041  02EC  3000               	movlw	0
  1042  02ED  00B6               	movwf	___aldiv@divisor+3
  1043  02EE  3000               	movlw	0
  1044  02EF  00B5               	movwf	___aldiv@divisor+2
  1045  02F0  3000               	movlw	0
  1046  02F1  00B4               	movwf	___aldiv@divisor+1
  1047  02F2  3040               	movlw	64
  1048  02F3  00B3               	movwf	___aldiv@divisor
  1049  02F4  0849               	movf	_usart_init$1348+3,w
  1050  02F5  00BA               	movwf	___aldiv@dividend+3
  1051  02F6  0848               	movf	_usart_init$1348+2,w
  1052  02F7  00B9               	movwf	___aldiv@dividend+2
  1053  02F8  0847               	movf	_usart_init$1348+1,w
  1054  02F9  00B8               	movwf	___aldiv@dividend+1
  1055  02FA  0846               	movf	_usart_init$1348,w
  1056  02FB  00B7               	movwf	___aldiv@dividend
  1057  02FC  120A  118A  222A  120A  118A  	fcall	___aldiv
  1058  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1059  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1060  0303  0833               	movf	?___aldiv,w
  1061  0304  3EFF               	addlw	255
  1062  0305  1683               	bsf	3,5	;RP0=1, select bank1
  1063  0306  1303               	bcf	3,6	;RP1=0, select bank1
  1064  0307  0099               	movwf	25	;volatile
  1065  0308                     l1681:
  1066                           
  1067                           ;usart.c: 13:     RCSTAbits.SPEN = 1;
  1068  0308  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0309  1303               	bcf	3,6	;RP1=0, select bank0
  1070  030A  1798               	bsf	24,7	;volatile
  1071  030B                     l1683:
  1072                           
  1073                           ;usart.c: 14:     TXSTAbits.SYNC = 0;
  1074  030B  1683               	bsf	3,5	;RP0=1, select bank1
  1075  030C  1303               	bcf	3,6	;RP1=0, select bank1
  1076  030D  1218               	bcf	24,4	;volatile
  1077  030E                     l1685:
  1078                           
  1079                           ;usart.c: 15:     TXSTAbits.TX9 = 0;
  1080  030E  1318               	bcf	24,6	;volatile
  1081  030F                     l1687:
  1082                           
  1083                           ;usart.c: 16:     TXSTAbits.TXEN = 1;
  1084  030F  1698               	bsf	24,5	;volatile
  1085  0310                     l1689:
  1086                           
  1087                           ;usart.c: 17:     RCSTAbits.RX9 = 0;
  1088  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1089  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1090  0312  1318               	bcf	24,6	;volatile
  1091  0313                     l1691:
  1092                           
  1093                           ;usart.c: 18:     RCSTAbits.CREN = 1;
  1094  0313  1618               	bsf	24,4	;volatile
  1095  0314                     l1693:
  1096                           
  1097                           ;usart.c: 19:     RCSTAbits.SPEN = 1;
  1098  0314  1798               	bsf	24,7	;volatile
  1099  0315                     l100:
  1100  0315  0008               	return
  1101  0316                     __end_of_usart_init:
  1102                           
  1103                           	psect	text2
  1104  022A                     __ptext2:	
  1105 ;; *************** function ___aldiv *****************
  1106 ;; Defined at:
  1107 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\aldiv.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  divisor         4   19[BANK0 ] long 
  1110 ;;  dividend        4   23[BANK0 ] long 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  quotient        4   30[BANK0 ] long 
  1113 ;;  sign            1   29[BANK0 ] unsigned char 
  1114 ;;  counter         1   28[BANK0 ] unsigned char 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  4   19[BANK0 ] long 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0, btemp+1
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1124 ;;      Params:         0       8       0       0       0
  1125 ;;      Locals:         0       6       0       0       0
  1126 ;;      Temps:          0       1       0       0       0
  1127 ;;      Totals:         0      15       0       0       0
  1128 ;;Total ram usage:       15 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    6
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_usart_init
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           
  1139                           ;psect for function ___aldiv
  1140  022A                     ___aldiv:
  1141  022A                     l1455:	
  1142                           ;incstack = 0
  1143                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1144                           
  1145  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1146  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1147  022C  01BD               	clrf	___aldiv@sign
  1148  022D                     l1457:
  1149  022D  1FB6               	btfss	___aldiv@divisor+3,7
  1150  022E  2A30               	goto	u811
  1151  022F  2A31               	goto	u810
  1152  0230                     u811:
  1153  0230  2A3E               	goto	l420
  1154  0231                     u810:
  1155  0231                     l1459:
  1156  0231  09B3               	comf	___aldiv@divisor,f
  1157  0232  09B4               	comf	___aldiv@divisor+1,f
  1158  0233  09B5               	comf	___aldiv@divisor+2,f
  1159  0234  09B6               	comf	___aldiv@divisor+3,f
  1160  0235  0AB3               	incf	___aldiv@divisor,f
  1161  0236  1903               	skipnz
  1162  0237  0AB4               	incf	___aldiv@divisor+1,f
  1163  0238  1903               	skipnz
  1164  0239  0AB5               	incf	___aldiv@divisor+2,f
  1165  023A  1903               	skipnz
  1166  023B  0AB6               	incf	___aldiv@divisor+3,f
  1167  023C  01BD               	clrf	___aldiv@sign
  1168  023D  0ABD               	incf	___aldiv@sign,f
  1169  023E                     l420:
  1170  023E  1FBA               	btfss	___aldiv@dividend+3,7
  1171  023F  2A41               	goto	u821
  1172  0240  2A42               	goto	u820
  1173  0241                     u821:
  1174  0241  2A51               	goto	l1465
  1175  0242                     u820:
  1176  0242                     l1461:
  1177  0242  09B7               	comf	___aldiv@dividend,f
  1178  0243  09B8               	comf	___aldiv@dividend+1,f
  1179  0244  09B9               	comf	___aldiv@dividend+2,f
  1180  0245  09BA               	comf	___aldiv@dividend+3,f
  1181  0246  0AB7               	incf	___aldiv@dividend,f
  1182  0247  1903               	skipnz
  1183  0248  0AB8               	incf	___aldiv@dividend+1,f
  1184  0249  1903               	skipnz
  1185  024A  0AB9               	incf	___aldiv@dividend+2,f
  1186  024B  1903               	skipnz
  1187  024C  0ABA               	incf	___aldiv@dividend+3,f
  1188  024D                     l1463:
  1189  024D  3001               	movlw	1
  1190  024E  00FF               	movwf	btemp+1
  1191  024F  087F               	movf	btemp+1,w
  1192  0250  06BD               	xorwf	___aldiv@sign,f
  1193  0251                     l1465:
  1194  0251  3000               	movlw	0
  1195  0252  00C1               	movwf	___aldiv@quotient+3
  1196  0253  3000               	movlw	0
  1197  0254  00C0               	movwf	___aldiv@quotient+2
  1198  0255  3000               	movlw	0
  1199  0256  00BF               	movwf	___aldiv@quotient+1
  1200  0257  3000               	movlw	0
  1201  0258  00BE               	movwf	___aldiv@quotient
  1202  0259                     l1467:
  1203  0259  0836               	movf	___aldiv@divisor+3,w
  1204  025A  0435               	iorwf	___aldiv@divisor+2,w
  1205  025B  0434               	iorwf	___aldiv@divisor+1,w
  1206  025C  0433               	iorwf	___aldiv@divisor,w
  1207  025D  1903               	skipnz
  1208  025E  2A60               	goto	u831
  1209  025F  2A61               	goto	u830
  1210  0260                     u831:
  1211  0260  2AAE               	goto	l1489
  1212  0261                     u830:
  1213  0261                     l1469:
  1214  0261  01BC               	clrf	___aldiv@counter
  1215  0262  0ABC               	incf	___aldiv@counter,f
  1216  0263  2A71               	goto	l1475
  1217  0264                     l1471:
  1218  0264  3001               	movlw	1
  1219  0265  00BB               	movwf	??___aldiv
  1220  0266                     u845:
  1221  0266  1003               	clrc
  1222  0267  0DB3               	rlf	___aldiv@divisor,f
  1223  0268  0DB4               	rlf	___aldiv@divisor+1,f
  1224  0269  0DB5               	rlf	___aldiv@divisor+2,f
  1225  026A  0DB6               	rlf	___aldiv@divisor+3,f
  1226  026B  0BBB               	decfsz	??___aldiv,f
  1227  026C  2A66               	goto	u845
  1228  026D                     l1473:
  1229  026D  3001               	movlw	1
  1230  026E  00FF               	movwf	btemp+1
  1231  026F  087F               	movf	btemp+1,w
  1232  0270  07BC               	addwf	___aldiv@counter,f
  1233  0271                     l1475:
  1234  0271  1FB6               	btfss	___aldiv@divisor+3,7
  1235  0272  2A74               	goto	u851
  1236  0273  2A75               	goto	u850
  1237  0274                     u851:
  1238  0274  2A64               	goto	l1471
  1239  0275                     u850:
  1240  0275                     l1477:
  1241  0275  3001               	movlw	1
  1242  0276  00BB               	movwf	??___aldiv
  1243  0277                     u865:
  1244  0277  1003               	clrc
  1245  0278  0DBE               	rlf	___aldiv@quotient,f
  1246  0279  0DBF               	rlf	___aldiv@quotient+1,f
  1247  027A  0DC0               	rlf	___aldiv@quotient+2,f
  1248  027B  0DC1               	rlf	___aldiv@quotient+3,f
  1249  027C  0BBB               	decfsz	??___aldiv,f
  1250  027D  2A77               	goto	u865
  1251  027E                     l1479:
  1252  027E  0836               	movf	___aldiv@divisor+3,w
  1253  027F  023A               	subwf	___aldiv@dividend+3,w
  1254  0280  1D03               	skipz
  1255  0281  2A8C               	goto	u875
  1256  0282  0835               	movf	___aldiv@divisor+2,w
  1257  0283  0239               	subwf	___aldiv@dividend+2,w
  1258  0284  1D03               	skipz
  1259  0285  2A8C               	goto	u875
  1260  0286  0834               	movf	___aldiv@divisor+1,w
  1261  0287  0238               	subwf	___aldiv@dividend+1,w
  1262  0288  1D03               	skipz
  1263  0289  2A8C               	goto	u875
  1264  028A  0833               	movf	___aldiv@divisor,w
  1265  028B  0237               	subwf	___aldiv@dividend,w
  1266  028C                     u875:
  1267  028C  1C03               	skipc
  1268  028D  2A8F               	goto	u871
  1269  028E  2A90               	goto	u870
  1270  028F                     u871:
  1271  028F  2A9F               	goto	l1485
  1272  0290                     u870:
  1273  0290                     l1481:
  1274  0290  0833               	movf	___aldiv@divisor,w
  1275  0291  02B7               	subwf	___aldiv@dividend,f
  1276  0292  0834               	movf	___aldiv@divisor+1,w
  1277  0293  1C03               	skipc
  1278  0294  0F34               	incfsz	___aldiv@divisor+1,w
  1279  0295  02B8               	subwf	___aldiv@dividend+1,f
  1280  0296  0835               	movf	___aldiv@divisor+2,w
  1281  0297  1C03               	skipc
  1282  0298  0F35               	incfsz	___aldiv@divisor+2,w
  1283  0299  02B9               	subwf	___aldiv@dividend+2,f
  1284  029A  0836               	movf	___aldiv@divisor+3,w
  1285  029B  1C03               	skipc
  1286  029C  0F36               	incfsz	___aldiv@divisor+3,w
  1287  029D  02BA               	subwf	___aldiv@dividend+3,f
  1288  029E                     l1483:
  1289  029E  143E               	bsf	___aldiv@quotient,0
  1290  029F                     l1485:
  1291  029F  3001               	movlw	1
  1292  02A0                     u885:
  1293  02A0  1003               	clrc
  1294  02A1  0CB6               	rrf	___aldiv@divisor+3,f
  1295  02A2  0CB5               	rrf	___aldiv@divisor+2,f
  1296  02A3  0CB4               	rrf	___aldiv@divisor+1,f
  1297  02A4  0CB3               	rrf	___aldiv@divisor,f
  1298  02A5  3EFF               	addlw	-1
  1299  02A6  1D03               	skipz
  1300  02A7  2AA0               	goto	u885
  1301  02A8                     l1487:
  1302  02A8  3001               	movlw	1
  1303  02A9  02BC               	subwf	___aldiv@counter,f
  1304  02AA  1D03               	btfss	3,2
  1305  02AB  2AAD               	goto	u891
  1306  02AC  2AAE               	goto	u890
  1307  02AD                     u891:
  1308  02AD  2A75               	goto	l1477
  1309  02AE                     u890:
  1310  02AE                     l1489:
  1311  02AE  083D               	movf	___aldiv@sign,w
  1312  02AF  1903               	btfsc	3,2
  1313  02B0  2AB2               	goto	u901
  1314  02B1  2AB3               	goto	u900
  1315  02B2                     u901:
  1316  02B2  2ABE               	goto	l1493
  1317  02B3                     u900:
  1318  02B3                     l1491:
  1319  02B3  09BE               	comf	___aldiv@quotient,f
  1320  02B4  09BF               	comf	___aldiv@quotient+1,f
  1321  02B5  09C0               	comf	___aldiv@quotient+2,f
  1322  02B6  09C1               	comf	___aldiv@quotient+3,f
  1323  02B7  0ABE               	incf	___aldiv@quotient,f
  1324  02B8  1903               	skipnz
  1325  02B9  0ABF               	incf	___aldiv@quotient+1,f
  1326  02BA  1903               	skipnz
  1327  02BB  0AC0               	incf	___aldiv@quotient+2,f
  1328  02BC  1903               	skipnz
  1329  02BD  0AC1               	incf	___aldiv@quotient+3,f
  1330  02BE                     l1493:
  1331  02BE  0841               	movf	___aldiv@quotient+3,w
  1332  02BF  00B6               	movwf	?___aldiv+3
  1333  02C0  0840               	movf	___aldiv@quotient+2,w
  1334  02C1  00B5               	movwf	?___aldiv+2
  1335  02C2  083F               	movf	___aldiv@quotient+1,w
  1336  02C3  00B4               	movwf	?___aldiv+1
  1337  02C4  083E               	movf	___aldiv@quotient,w
  1338  02C5  00B3               	movwf	?___aldiv
  1339  02C6                     l430:
  1340  02C6  0008               	return
  1341  02C7                     __end_of___aldiv:
  1342                           
  1343                           	psect	text3
  1344  05DE                     __ptext3:	
  1345 ;; *************** function _usart_Interrupt *****************
  1346 ;; Defined at:
  1347 ;;		line 41 in file "usart.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		None
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1361 ;;      Params:         0       0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0
  1364 ;;      Totals:         0       0       0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    6
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _usart_Interrupt
  1377  05DE                     _usart_Interrupt:
  1378  05DE                     l1695:	
  1379                           ;incstack = 0
  1380                           ; Regs used in _usart_Interrupt: []
  1381                           
  1382                           
  1383                           ;usart.c: 42:     PIR1bits.RCIF = 0;
  1384  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1385  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1386  05E0  128C               	bcf	12,5	;volatile
  1387                           
  1388                           ;usart.c: 43:     PIE1bits.RCIE = 1;
  1389  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  1390  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  1391  05E3  168C               	bsf	12,5	;volatile
  1392                           
  1393                           ;usart.c: 44:     INTCONbits.PEIE = 1;
  1394  05E4  170B               	bsf	11,6	;volatile
  1395                           
  1396                           ;usart.c: 45:     INTCONbits.GIE = 1;
  1397  05E5  178B               	bsf	11,7	;volatile
  1398  05E6                     l118:
  1399  05E6  0008               	return
  1400  05E7                     __end_of_usart_Interrupt:
  1401                           
  1402                           	psect	text4
  1403  05A9                     __ptext4:	
  1404 ;; *************** function _i2c_init *****************
  1405 ;; Defined at:
  1406 ;;		line 10 in file "i2c.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;		None
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;		None
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, status,2
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         0       0       0       0       0
  1421 ;;      Locals:         0       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0
  1423 ;;      Totals:         0       0       0       0       0
  1424 ;;Total ram usage:        0 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    6
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           
  1435                           ;psect for function _i2c_init
  1436  05A9                     _i2c_init:
  1437  05A9                     l1697:	
  1438                           ;incstack = 0
  1439                           ; Regs used in _i2c_init: [wreg+status,2]
  1440                           
  1441                           
  1442                           ;i2c.c: 12:     TRISCbits.TRISC3 = 1;
  1443  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  1444  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  1445  05AB  1587               	bsf	7,3	;volatile
  1446                           
  1447                           ;i2c.c: 13:     TRISCbits.TRISC4 = 1;
  1448  05AC  1607               	bsf	7,4	;volatile
  1449  05AD                     l1699:
  1450                           
  1451                           ;i2c.c: 14:     SSPADD = 0x09;
  1452  05AD  3009               	movlw	9
  1453  05AE  0093               	movwf	19	;volatile
  1454                           
  1455                           ;i2c.c: 15:     SSPSTAT = 0x80;
  1456  05AF  3080               	movlw	128
  1457  05B0  0094               	movwf	20	;volatile
  1458  05B1                     l1701:
  1459                           
  1460                           ;i2c.c: 16:     SSPCON2 = 0x00;
  1461  05B1  0191               	clrf	17	;volatile
  1462  05B2                     l1703:
  1463                           
  1464                           ;i2c.c: 17:     SSPCON = 0x28;
  1465  05B2  3028               	movlw	40
  1466  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1467  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1468  05B5  0094               	movwf	20	;volatile
  1469  05B6                     l178:
  1470  05B6  0008               	return
  1471  05B7                     __end_of_i2c_init:
  1472                           
  1473                           	psect	text5
  1474  002A                     __ptext5:	
  1475 ;; *************** function _myISR *****************
  1476 ;; Defined at:
  1477 ;;		line 14 in file "main.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1491 ;;      Params:         0       0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0
  1493 ;;      Temps:          0       6       0       0       0
  1494 ;;      Totals:         0       6       0       0       0
  1495 ;;Total ram usage:        6 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    5
  1498 ;; This function calls:
  1499 ;;		_i2c_read
  1500 ;;		_i2c_sendACK
  1501 ;;		_i2c_start
  1502 ;;		_i2c_stop
  1503 ;;		_i2c_write
  1504 ;;		_recivedCMD
  1505 ;;		_sprintf
  1506 ;;		_strcmp
  1507 ;;		_token
  1508 ;;		_usart_Tx
  1509 ;;		_usart_TxStr
  1510 ;; This function is called by:
  1511 ;;		Interrupt level 1
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           
  1516                           ;psect for function _myISR
  1517  002A                     _myISR:
  1518  002A                     i1l1705:
  1519                           
  1520                           ;main.c: 15:     INTCONbits.GIE = 0;
  1521  002A  138B               	bcf	11,7	;volatile
  1522  002B                     i1l1707:
  1523                           
  1524                           ;main.c: 16:     usart_Tx('a');
  1525  002B  3061               	movlw	97
  1526  002C  120A  118A  25D2  120A  118A  	fcall	_usart_Tx
  1527  0031                     i1l1709:
  1528                           
  1529                           ;main.c: 17:     recivedCMD(data);
  1530  0031  3051               	movlw	(low (_data| 0))& (0+255)
  1531  0032  120A  118A  24EF  120A  118A  	fcall	_recivedCMD
  1532  0037                     i1l1711:
  1533                           
  1534                           ;main.c: 18:     token(data);
  1535  0037  3051               	movlw	(low (_data| 0))& (0+255)
  1536  0038  120A  118A  242B  120A  118A  	fcall	_token
  1537  003D                     i1l1713:
  1538                           
  1539                           ;main.c: 19:     if(strcmp(dir[0],"M1") == 0){
  1540  003D  300F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1541  003E  00FF               	movwf	btemp+1
  1542  003F  087F               	movf	btemp+1,w
  1543  0040  00F0               	movwf	strcmp@s2
  1544  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1545  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0043  084D               	movf	_dir,w
  1547  0044  120A  118A  24C1  120A  118A  	fcall	_strcmp
  1548  0049  0870               	movf	?_strcmp,w
  1549  004A  0471               	iorwf	?_strcmp+1,w
  1550  004B  1D03               	btfss	3,2
  1551  004C  284E               	goto	u125_21
  1552  004D  284F               	goto	u125_20
  1553  004E                     u125_21:
  1554  004E  2933               	goto	i1l1759
  1555  004F                     u125_20:
  1556  004F                     i1l1715:
  1557                           
  1558                           ;main.c: 20:         if(strcmp(dir[1],"P1") == 0){
  1559  004F  3012               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1560  0050  00FF               	movwf	btemp+1
  1561  0051  087F               	movf	btemp+1,w
  1562  0052  00F0               	movwf	strcmp@s2
  1563  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1565  0055  084E               	movf	low ((_dir| 0+1)),w
  1566  0056  120A  118A  24C1  120A  118A  	fcall	_strcmp
  1567  005B  0870               	movf	?_strcmp,w
  1568  005C  0471               	iorwf	?_strcmp+1,w
  1569  005D  1D03               	btfss	3,2
  1570  005E  2860               	goto	u126_21
  1571  005F  2861               	goto	u126_20
  1572  0060                     u126_21:
  1573  0060  28CB               	goto	i1l1739
  1574  0061                     u126_20:
  1575  0061                     i1l1717:
  1576                           
  1577                           ;main.c: 21:             if(*dir[2] == 'a'){
  1578  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0063  084F               	movf	low ((_dir| 0+2)),w
  1581  0064  0084               	movwf	4
  1582  0065  3061               	movlw	97
  1583  0066  1383               	bcf	3,7	;select IRP bank0
  1584  0067  0600               	xorwf	0,w
  1585  0068  1D03               	btfss	3,2
  1586  0069  286B               	goto	u127_21
  1587  006A  286C               	goto	u127_20
  1588  006B                     u127_21:
  1589  006B  28AF               	goto	i1l1733
  1590  006C                     u127_20:
  1591  006C                     i1l1719:
  1592                           
  1593                           ;main.c: 22:                 i2c_start();
  1594  006C  120A  118A  2596  120A  118A  	fcall	_i2c_start
  1595                           
  1596                           ;main.c: 23:                 i2c_write(0x31);
  1597  0071  3031               	movlw	49
  1598  0072  120A  118A  2583  120A  118A  	fcall	_i2c_write
  1599  0077                     i1l1721:
  1600                           
  1601                           ;main.c: 24:                 lectura = i2c_read();
  1602  0077  120A  118A  256F  120A  118A  	fcall	_i2c_read
  1603  007C  00FF               	movwf	btemp+1
  1604  007D  087F               	movf	btemp+1,w
  1605  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1606  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0080  00D0               	movwf	_lectura
  1608  0081                     i1l1723:
  1609                           
  1610                           ;main.c: 25:                 i2c_sendACK();
  1611  0081  120A  118A  25E7  120A  118A  	fcall	_i2c_sendACK
  1612  0086                     i1l1725:
  1613                           
  1614                           ;main.c: 26:                 lectura = i2c_read();
  1615  0086  120A  118A  256F  120A  118A  	fcall	_i2c_read
  1616  008B  00FF               	movwf	btemp+1
  1617  008C  087F               	movf	btemp+1,w
  1618  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1619  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1620  008F  00D0               	movwf	_lectura
  1621  0090                     i1l1727:
  1622                           
  1623                           ;main.c: 27:                 i2c_stop();
  1624  0090  120A  118A  25B7  120A  118A  	fcall	_i2c_stop
  1625  0095                     i1l1729:
  1626                           
  1627                           ;main.c: 28:                 sprintf(data,"%d\n",lectura);
  1628  0095  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1629  0096  00FF               	movwf	btemp+1
  1630  0097  087F               	movf	btemp+1,w
  1631  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1633  009A  00A0               	movwf	sprintf@f
  1634  009B  0850               	movf	_lectura,w
  1635  009C  00AD               	movwf	??_myISR
  1636  009D  01AE               	clrf	??_myISR+1
  1637  009E  082D               	movf	??_myISR,w
  1638  009F  00A1               	movwf	?_sprintf+1
  1639  00A0  082E               	movf	??_myISR+1,w
  1640  00A1  00A2               	movwf	?_sprintf+2
  1641  00A2  3051               	movlw	(low (_data| 0))& (0+255)
  1642  00A3  120A  118A  2142  120A  118A  	fcall	_sprintf
  1643  00A8                     i1l1731:
  1644                           
  1645                           ;main.c: 29:                 usart_TxStr(data);
  1646  00A8  3051               	movlw	(low (_data| 0))& (0+255)
  1647  00A9  120A  118A  2558  120A  118A  	fcall	_usart_TxStr
  1648                           
  1649                           ;main.c: 30:             }
  1650  00AE  2933               	goto	i1l1759
  1651  00AF                     i1l1733:
  1652                           
  1653                           ;main.c: 32:                 i2c_start();
  1654  00AF  120A  118A  2596  120A  118A  	fcall	_i2c_start
  1655                           
  1656                           ;main.c: 33:                 i2c_write(0x30);
  1657  00B4  3030               	movlw	48
  1658  00B5  120A  118A  2583  120A  118A  	fcall	_i2c_write
  1659  00BA                     i1l1735:
  1660                           
  1661                           ;main.c: 34:                 i2c_write(*dir[2]);
  1662  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1663  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1664  00BC  084F               	movf	low ((_dir| 0+2)),w
  1665  00BD  0084               	movwf	4
  1666  00BE  1383               	bcf	3,7	;select IRP bank0
  1667  00BF  0800               	movf	0,w
  1668  00C0  120A  118A  2583  120A  118A  	fcall	_i2c_write
  1669  00C5                     i1l1737:
  1670                           
  1671                           ;main.c: 35:                 i2c_stop();
  1672  00C5  120A  118A  25B7  120A  118A  	fcall	_i2c_stop
  1673  00CA  2933               	goto	i1l1759
  1674  00CB                     i1l1739:
  1675  00CB  3015               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1676  00CC  00FF               	movwf	btemp+1
  1677  00CD  087F               	movf	btemp+1,w
  1678  00CE  00F0               	movwf	strcmp@s2
  1679  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1680  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1681  00D1  084E               	movf	low ((_dir| 0+1)),w
  1682  00D2  120A  118A  24C1  120A  118A  	fcall	_strcmp
  1683  00D7  0870               	movf	?_strcmp,w
  1684  00D8  0471               	iorwf	?_strcmp+1,w
  1685  00D9  1D03               	btfss	3,2
  1686  00DA  28DC               	goto	u128_21
  1687  00DB  28DD               	goto	u128_20
  1688  00DC                     u128_21:
  1689  00DC  2933               	goto	i1l1759
  1690  00DD                     u128_20:
  1691  00DD                     i1l1741:
  1692                           
  1693                           ;main.c: 39:         if(*dir[2] == 'a'){
  1694  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1695  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1696  00DF  084F               	movf	low ((_dir| 0+2)),w
  1697  00E0  0084               	movwf	4
  1698  00E1  3061               	movlw	97
  1699  00E2  1383               	bcf	3,7	;select IRP bank0
  1700  00E3  0600               	xorwf	0,w
  1701  00E4  1D03               	btfss	3,2
  1702  00E5  28E7               	goto	u129_21
  1703  00E6  28E8               	goto	u129_20
  1704  00E7                     u129_21:
  1705  00E7  291C               	goto	i1l1753
  1706  00E8                     u129_20:
  1707  00E8                     i1l1743:
  1708                           
  1709                           ;main.c: 40:                 i2c_start();
  1710  00E8  120A  118A  2596  120A  118A  	fcall	_i2c_start
  1711                           
  1712                           ;main.c: 41:                 i2c_write(0x33);
  1713  00ED  3033               	movlw	51
  1714  00EE  120A  118A  2583  120A  118A  	fcall	_i2c_write
  1715  00F3                     i1l1745:
  1716                           
  1717                           ;main.c: 42:                 lectura = i2c_read();
  1718  00F3  120A  118A  256F  120A  118A  	fcall	_i2c_read
  1719  00F8  00FF               	movwf	btemp+1
  1720  00F9  087F               	movf	btemp+1,w
  1721  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1722  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1723  00FC  00D0               	movwf	_lectura
  1724  00FD                     i1l1747:
  1725                           
  1726                           ;main.c: 43:                 i2c_stop();
  1727  00FD  120A  118A  25B7  120A  118A  	fcall	_i2c_stop
  1728  0102                     i1l1749:
  1729                           
  1730                           ;main.c: 44:                 sprintf(data,"%d\n",lectura);
  1731  0102  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1732  0103  00FF               	movwf	btemp+1
  1733  0104  087F               	movf	btemp+1,w
  1734  0105  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0106  1303               	bcf	3,6	;RP1=0, select bank0
  1736  0107  00A0               	movwf	sprintf@f
  1737  0108  0850               	movf	_lectura,w
  1738  0109  00AD               	movwf	??_myISR
  1739  010A  01AE               	clrf	??_myISR+1
  1740  010B  082D               	movf	??_myISR,w
  1741  010C  00A1               	movwf	?_sprintf+1
  1742  010D  082E               	movf	??_myISR+1,w
  1743  010E  00A2               	movwf	?_sprintf+2
  1744  010F  3051               	movlw	(low (_data| 0))& (0+255)
  1745  0110  120A  118A  2142  120A  118A  	fcall	_sprintf
  1746  0115                     i1l1751:
  1747                           
  1748                           ;main.c: 45:                 usart_TxStr(data);
  1749  0115  3051               	movlw	(low (_data| 0))& (0+255)
  1750  0116  120A  118A  2558  120A  118A  	fcall	_usart_TxStr
  1751                           
  1752                           ;main.c: 46:             }
  1753  011B  2933               	goto	i1l1759
  1754  011C                     i1l1753:
  1755                           
  1756                           ;main.c: 48:                 i2c_start();
  1757  011C  120A  118A  2596  120A  118A  	fcall	_i2c_start
  1758                           
  1759                           ;main.c: 49:                 i2c_write(0x32);
  1760  0121  3032               	movlw	50
  1761  0122  120A  118A  2583  120A  118A  	fcall	_i2c_write
  1762  0127                     i1l1755:
  1763                           
  1764                           ;main.c: 50:                 i2c_write(*dir[2]);
  1765  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1766  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1767  0129  084F               	movf	low ((_dir| 0+2)),w
  1768  012A  0084               	movwf	4
  1769  012B  1383               	bcf	3,7	;select IRP bank0
  1770  012C  0800               	movf	0,w
  1771  012D  120A  118A  2583  120A  118A  	fcall	_i2c_write
  1772  0132  28C5               	goto	i1l1737
  1773  0133                     i1l1759:
  1774                           
  1775                           ;main.c: 55:     PIR1bits.RCIF = 0;
  1776  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0135  128C               	bcf	12,5	;volatile
  1779  0136                     i1l1761:
  1780                           
  1781                           ;main.c: 56:     INTCONbits.GIE = 1;
  1782  0136  178B               	bsf	11,7	;volatile
  1783  0137                     i1l63:
  1784  0137  0832               	movf	??_myISR+5,w
  1785  0138  00FF               	movwf	btemp+1
  1786  0139  0831               	movf	??_myISR+4,w
  1787  013A  008A               	movwf	10
  1788  013B  0830               	movf	??_myISR+3,w
  1789  013C  0084               	movwf	4
  1790  013D  0E2F               	swapf	(??_myISR+2)^0,w
  1791  013E  0083               	movwf	3
  1792  013F  0EFE               	swapf	btemp,f
  1793  0140  0E7E               	swapf	btemp,w
  1794  0141  0009               	retfie
  1795  0142                     __end_of_myISR:
  1796                           
  1797                           	psect	intentry
  1798  0004                     __pintentry:	
  1799                           ;incstack = 0
  1800                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1801                           
  1802  0004                     interrupt_function:
  1803  007E                     saved_w	set	btemp
  1804  0004  00FE               	movwf	btemp
  1805  0005  0E03               	swapf	3,w
  1806  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1808  0008  00AF               	movwf	??_myISR+2
  1809  0009  0804               	movf	4,w
  1810  000A  00B0               	movwf	??_myISR+3
  1811  000B  080A               	movf	10,w
  1812  000C  00B1               	movwf	??_myISR+4
  1813  000D  087F               	movf	btemp+1,w
  1814  000E  00B2               	movwf	??_myISR+5
  1815  000F  120A  118A  282A   	ljmp	_myISR
  1816                           
  1817                           	psect	text6
  1818  0558                     __ptext6:	
  1819 ;; *************** function _usart_TxStr *****************
  1820 ;; Defined at:
  1821 ;;		line 33 in file "usart.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  str             1    wreg     PTR unsigned char 
  1824 ;;		 -> data(10), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  str             1    1[COMMON] PTR unsigned char 
  1827 ;;		 -> data(10), 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1837 ;;      Params:         0       0       0       0       0
  1838 ;;      Locals:         1       0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0
  1840 ;;      Totals:         1       0       0       0       0
  1841 ;;Total ram usage:        1 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    1
  1844 ;; This function calls:
  1845 ;;		_usart_Tx
  1846 ;; This function is called by:
  1847 ;;		_myISR
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           
  1852                           ;psect for function _usart_TxStr
  1853  0558                     _usart_TxStr:
  1854                           
  1855                           ;incstack = 0
  1856                           ; Regs used in _usart_TxStr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1857                           ;usart_TxStr@str stored from wreg
  1858  0558  00F1               	movwf	usart_TxStr@str
  1859  0559                     i1l1669:
  1860                           
  1861                           ;usart.c: 34:     while(*str != '\0'){
  1862  0559  2D66               	goto	i1l1675
  1863  055A                     i1l1671:
  1864                           
  1865                           ;usart.c: 35:         usart_Tx(*str);
  1866  055A  0871               	movf	usart_TxStr@str,w
  1867  055B  0084               	movwf	4
  1868  055C  0800               	movf	0,w
  1869  055D  120A  118A  25D2  120A  118A  	fcall	_usart_Tx
  1870  0562                     i1l1673:
  1871                           
  1872                           ;usart.c: 36:         str++;
  1873  0562  3001               	movlw	1
  1874  0563  00FF               	movwf	btemp+1
  1875  0564  087F               	movf	btemp+1,w
  1876  0565  07F1               	addwf	usart_TxStr@str,f
  1877  0566                     i1l1675:
  1878                           
  1879                           ;usart.c: 34:     while(*str != '\0'){
  1880  0566  0871               	movf	usart_TxStr@str,w
  1881  0567  0084               	movwf	4
  1882  0568  1383               	bcf	3,7	;select IRP bank0
  1883  0569  0800               	movf	0,w
  1884  056A  1D03               	btfss	3,2
  1885  056B  2D6D               	goto	u124_21
  1886  056C  2D6E               	goto	u124_20
  1887  056D                     u124_21:
  1888  056D  2D5A               	goto	i1l1671
  1889  056E                     u124_20:
  1890  056E                     i1l115:
  1891  056E  0008               	return
  1892  056F                     __end_of_usart_TxStr:
  1893                           
  1894                           	psect	text7
  1895  05D2                     __ptext7:	
  1896 ;; *************** function _usart_Tx *****************
  1897 ;; Defined at:
  1898 ;;		line 24 in file "usart.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  send            1    wreg     unsigned char 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  send            1    0[COMMON] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1912 ;;      Params:         0       0       0       0       0
  1913 ;;      Locals:         1       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0
  1915 ;;      Totals:         1       0       0       0       0
  1916 ;;Total ram usage:        1 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_myISR
  1922 ;;		_usart_TxStr
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           
  1927                           ;psect for function _usart_Tx
  1928  05D2                     _usart_Tx:
  1929                           
  1930                           ;incstack = 0
  1931                           ; Regs used in _usart_Tx: [wreg]
  1932                           ;usart_Tx@send stored from wreg
  1933  05D2  00F0               	movwf	usart_Tx@send
  1934  05D3                     i1l1409:
  1935                           
  1936                           ;usart.c: 25:     TXREG = send;
  1937  05D3  0870               	movf	usart_Tx@send,w
  1938  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1939  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1940  05D6  0099               	movwf	25	;volatile
  1941  05D7                     i1l103:	
  1942                           ;usart.c: 26:     while (!TXSTAbits.TRMT);
  1943                           
  1944  05D7  1683               	bsf	3,5	;RP0=1, select bank1
  1945  05D8  1303               	bcf	3,6	;RP1=0, select bank1
  1946  05D9  1C98               	btfss	24,1	;volatile
  1947  05DA  2DDC               	goto	u73_21
  1948  05DB  2DDD               	goto	u73_20
  1949  05DC                     u73_21:
  1950  05DC  2DD7               	goto	i1l103
  1951  05DD                     u73_20:
  1952  05DD                     i1l106:
  1953  05DD  0008               	return
  1954  05DE                     __end_of_usart_Tx:
  1955                           
  1956                           	psect	text8
  1957  042B                     __ptext8:	
  1958 ;; *************** function _token *****************
  1959 ;; Defined at:
  1960 ;;		line 68 in file "usart.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;  cmd             1    wreg     PTR unsigned char 
  1963 ;;		 -> data(10), 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  cmd             1    2[BANK0 ] PTR unsigned char 
  1966 ;;		 -> data(10), 
  1967 ;;  i               2    0[BANK0 ] int 
  1968 ;;  tok             1    3[BANK0 ] PTR unsigned char 
  1969 ;;		 -> NULL(0), data(10), 
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1979 ;;      Params:         0       0       0       0       0
  1980 ;;      Locals:         0       4       0       0       0
  1981 ;;      Temps:          0       0       0       0       0
  1982 ;;      Totals:         0       4       0       0       0
  1983 ;;Total ram usage:        4 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    4
  1986 ;; This function calls:
  1987 ;;		_strtok
  1988 ;; This function is called by:
  1989 ;;		_myISR
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           
  1994                           ;psect for function _token
  1995  042B                     _token:
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _token: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1999                           ;token@cmd stored from wreg
  2000  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2001  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2002  042D  00A2               	movwf	token@cmd
  2003  042E                     i1l1557:
  2004                           
  2005                           ;usart.c: 70:     int i = 0;
  2006  042E  01A0               	clrf	token@i
  2007  042F  01A1               	clrf	token@i+1
  2008  0430                     i1l1559:
  2009                           
  2010                           ;usart.c: 71:     tok = strtok(cmd, ",");
  2011  0430  3018               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2012  0431  00FF               	movwf	btemp+1
  2013  0432  087F               	movf	btemp+1,w
  2014  0433  00FA               	movwf	strtok@s2
  2015  0434  0822               	movf	token@cmd,w
  2016  0435  120A  118A  2316  120A  118A  	fcall	_strtok
  2017  043A  00FF               	movwf	btemp+1
  2018  043B  087F               	movf	btemp+1,w
  2019  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2020  043D  1303               	bcf	3,6	;RP1=0, select bank0
  2021  043E  00A3               	movwf	token@tok
  2022                           
  2023                           ;usart.c: 72:     while( tok != (0) ) {
  2024  043F  2C5D               	goto	i1l1567
  2025  0440                     i1l1561:
  2026                           
  2027                           ;usart.c: 73:         dir[i] = tok;
  2028  0440  0823               	movf	token@tok,w
  2029  0441  00FF               	movwf	btemp+1
  2030  0442  0820               	movf	token@i,w
  2031  0443  3E4D               	addlw	(low (_dir| 0))& (0+255)
  2032  0444  0084               	movwf	4
  2033  0445  087F               	movf	btemp+1,w
  2034  0446  1383               	bcf	3,7	;select IRP bank0
  2035  0447  0080               	movwf	0
  2036  0448                     i1l1563:
  2037                           
  2038                           ;usart.c: 74:         tok = strtok((0), ",");
  2039  0448  3018               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2040  0449  00FF               	movwf	btemp+1
  2041  044A  087F               	movf	btemp+1,w
  2042  044B  00FA               	movwf	strtok@s2
  2043  044C  3000               	movlw	0
  2044  044D  120A  118A  2316  120A  118A  	fcall	_strtok
  2045  0452  00FF               	movwf	btemp+1
  2046  0453  087F               	movf	btemp+1,w
  2047  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2048  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2049  0456  00A3               	movwf	token@tok
  2050  0457                     i1l1565:
  2051                           
  2052                           ;usart.c: 75:         i++;
  2053  0457  3001               	movlw	1
  2054  0458  07A0               	addwf	token@i,f
  2055  0459  1803               	skipnc
  2056  045A  0AA1               	incf	token@i+1,f
  2057  045B  3000               	movlw	0
  2058  045C  07A1               	addwf	token@i+1,f
  2059  045D                     i1l1567:
  2060                           
  2061                           ;usart.c: 72:     while( tok != (0) ) {
  2062  045D  0823               	movf	token@tok,w
  2063  045E  1D03               	btfss	3,2
  2064  045F  2C61               	goto	u106_21
  2065  0460  2C62               	goto	u106_20
  2066  0461                     u106_21:
  2067  0461  2C40               	goto	i1l1561
  2068  0462                     u106_20:
  2069  0462                     i1l137:
  2070  0462  0008               	return
  2071  0463                     __end_of_token:
  2072                           
  2073                           	psect	text9
  2074  0316                     __ptext9:	
  2075 ;; *************** function _strtok *****************
  2076 ;; Defined at:
  2077 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strtok.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  s1              1    wreg     PTR unsigned char 
  2080 ;;		 -> NULL(0), data(10), 
  2081 ;;  s2              1   10[COMMON] PTR const unsigned char 
  2082 ;;		 -> STR_7(2), STR_6(2), 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  s1              1   11[COMMON] PTR unsigned char 
  2085 ;;		 -> NULL(0), data(10), 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      PTR unsigned char 
  2088 ;; Registers used:
  2089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2095 ;;      Params:         1       0       0       0       0
  2096 ;;      Locals:         1       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0
  2098 ;;      Totals:         2       0       0       0       0
  2099 ;;Total ram usage:        2 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    3
  2102 ;; This function calls:
  2103 ;;		_strcspn
  2104 ;;		_strspn
  2105 ;; This function is called by:
  2106 ;;		_token
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           
  2111                           ;psect for function _strtok
  2112  0316                     _strtok:
  2113                           
  2114                           ;incstack = 0
  2115                           ; Regs used in _strtok: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2116                           ;strtok@s1 stored from wreg
  2117  0316  00FB               	movwf	strtok@s1
  2118  0317                     i1l1417:
  2119  0317  087B               	movf	strtok@s1,w
  2120  0318  1D03               	btfss	3,2
  2121  0319  2B1B               	goto	u75_21
  2122  031A  2B1C               	goto	u75_20
  2123  031B                     u75_21:
  2124  031B  2B20               	goto	i1l1421
  2125  031C                     u75_20:
  2126  031C                     i1l1419:
  2127  031C  087C               	movf	strtok@sp,w
  2128  031D  00FF               	movwf	btemp+1
  2129  031E  087F               	movf	btemp+1,w
  2130  031F  00FB               	movwf	strtok@s1
  2131  0320                     i1l1421:
  2132  0320  087B               	movf	strtok@s1,w
  2133  0321  1D03               	btfss	3,2
  2134  0322  2B24               	goto	u76_21
  2135  0323  2B25               	goto	u76_20
  2136  0324                     u76_21:
  2137  0324  2B27               	goto	i1l1427
  2138  0325                     u76_20:
  2139  0325                     i1l1423:
  2140  0325  3000               	movlw	0
  2141  0326  2B61               	goto	i1l822
  2142  0327                     i1l1427:
  2143  0327  087A               	movf	strtok@s2,w
  2144  0328  00FF               	movwf	btemp+1
  2145  0329  087F               	movf	btemp+1,w
  2146  032A  00F3               	movwf	strspn@s2
  2147  032B  087B               	movf	strtok@s1,w
  2148  032C  120A  118A  2463  120A  118A  	fcall	_strspn
  2149  0331  0873               	movf	?_strspn,w
  2150  0332  00FF               	movwf	btemp+1
  2151  0333  087F               	movf	btemp+1,w
  2152  0334  07FB               	addwf	strtok@s1,f
  2153  0335                     i1l1429:
  2154  0335  087B               	movf	strtok@s1,w
  2155  0336  0084               	movwf	4
  2156  0337  1383               	bcf	3,7	;select IRP bank0
  2157  0338  0800               	movf	0,w
  2158  0339  1D03               	btfss	3,2
  2159  033A  2B3C               	goto	u77_21
  2160  033B  2B3D               	goto	u77_20
  2161  033C                     u77_21:
  2162  033C  2B40               	goto	i1l1435
  2163  033D                     u77_20:
  2164  033D                     i1l1431:
  2165  033D  01FC               	clrf	strtok@sp
  2166  033E  3000               	movlw	0
  2167  033F  2B61               	goto	i1l822
  2168  0340                     i1l1435:
  2169  0340  087A               	movf	strtok@s2,w
  2170  0341  00FF               	movwf	btemp+1
  2171  0342  087F               	movf	btemp+1,w
  2172  0343  00F3               	movwf	strcspn@s2
  2173  0344  087B               	movf	strtok@s1,w
  2174  0345  120A  118A  2492  120A  118A  	fcall	_strcspn
  2175  034A  0873               	movf	?_strcspn,w
  2176  034B  077B               	addwf	strtok@s1,w
  2177  034C  00FF               	movwf	btemp+1
  2178  034D  087F               	movf	btemp+1,w
  2179  034E  00FC               	movwf	strtok@sp
  2180  034F                     i1l1437:
  2181  034F  087C               	movf	strtok@sp,w
  2182  0350  0084               	movwf	4
  2183  0351  1383               	bcf	3,7	;select IRP bank0
  2184  0352  0800               	movf	0,w
  2185  0353  1903               	btfsc	3,2
  2186  0354  2B56               	goto	u78_21
  2187  0355  2B57               	goto	u78_20
  2188  0356                     u78_21:
  2189  0356  2B5F               	goto	i1l1443
  2190  0357                     u78_20:
  2191  0357                     i1l1439:
  2192  0357  087C               	movf	strtok@sp,w
  2193  0358  0084               	movwf	4
  2194  0359  0180               	clrf	0
  2195  035A                     i1l1441:
  2196  035A  3001               	movlw	1
  2197  035B  00FF               	movwf	btemp+1
  2198  035C  087F               	movf	btemp+1,w
  2199  035D  07FC               	addwf	strtok@sp,f
  2200  035E  2B60               	goto	i1l1445
  2201  035F                     i1l1443:
  2202  035F  01FC               	clrf	strtok@sp
  2203  0360                     i1l1445:
  2204  0360  087B               	movf	strtok@s1,w
  2205  0361                     i1l822:
  2206  0361  0008               	return
  2207  0362                     __end_of_strtok:
  2208                           
  2209                           	psect	text10
  2210  0463                     __ptext10:	
  2211 ;; *************** function _strspn *****************
  2212 ;; Defined at:
  2213 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strspn.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  s1              1    wreg     PTR const unsigned char 
  2216 ;;		 -> NULL(0), data(10), 
  2217 ;;  s2              1    3[COMMON] PTR const unsigned char 
  2218 ;;		 -> STR_7(2), STR_6(2), 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  s1              1    9[COMMON] PTR const unsigned char 
  2221 ;;		 -> NULL(0), data(10), 
  2222 ;;  i               2    7[COMMON] unsigned int 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  2    3[COMMON] unsigned int 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2232 ;;      Params:         2       0       0       0       0
  2233 ;;      Locals:         3       0       0       0       0
  2234 ;;      Temps:          2       0       0       0       0
  2235 ;;      Totals:         7       0       0       0       0
  2236 ;;Total ram usage:        7 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    2
  2239 ;; This function calls:
  2240 ;;		_strchr
  2241 ;; This function is called by:
  2242 ;;		_strtok
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           
  2247                           ;psect for function _strspn
  2248  0463                     _strspn:
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in _strspn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2252                           ;strspn@s1 stored from wreg
  2253  0463  00F9               	movwf	strspn@s1
  2254  0464                     i1l1385:
  2255  0464  01F7               	clrf	strspn@i
  2256  0465  01F8               	clrf	strspn@i+1
  2257  0466  2C71               	goto	i1l1389
  2258  0467                     i1l1387:
  2259  0467  3001               	movlw	1
  2260  0468  00FF               	movwf	btemp+1
  2261  0469  087F               	movf	btemp+1,w
  2262  046A  07F9               	addwf	strspn@s1,f
  2263  046B  3001               	movlw	1
  2264  046C  07F7               	addwf	strspn@i,f
  2265  046D  1803               	skipnc
  2266  046E  0AF8               	incf	strspn@i+1,f
  2267  046F  3000               	movlw	0
  2268  0470  07F8               	addwf	strspn@i+1,f
  2269  0471                     i1l1389:
  2270  0471  0879               	movf	strspn@s1,w
  2271  0472  0084               	movwf	4
  2272  0473  1383               	bcf	3,7	;select IRP bank0
  2273  0474  0800               	movf	0,w
  2274  0475  1903               	btfsc	3,2
  2275  0476  2C78               	goto	u69_21
  2276  0477  2C79               	goto	u69_20
  2277  0478                     u69_21:
  2278  0478  2C8D               	goto	i1l1393
  2279  0479                     u69_20:
  2280  0479                     i1l1391:
  2281  0479  0879               	movf	strspn@s1,w
  2282  047A  0084               	movwf	4
  2283  047B  0800               	movf	0,w
  2284  047C  00F5               	movwf	??_strspn
  2285  047D  01F6               	clrf	??_strspn+1
  2286  047E  0875               	movf	??_strspn,w
  2287  047F  00F0               	movwf	strchr@chr
  2288  0480  0876               	movf	??_strspn+1,w
  2289  0481  00F1               	movwf	strchr@chr+1
  2290  0482  0873               	movf	strspn@s2,w
  2291  0483  120A  118A  2519  120A  118A  	fcall	_strchr
  2292  0488  3A00               	xorlw	0
  2293  0489  1D03               	skipz
  2294  048A  2C8C               	goto	u70_21
  2295  048B  2C8D               	goto	u70_20
  2296  048C                     u70_21:
  2297  048C  2C67               	goto	i1l1387
  2298  048D                     u70_20:
  2299  048D                     i1l1393:
  2300  048D  0878               	movf	strspn@i+1,w
  2301  048E  00F4               	movwf	?_strspn+1
  2302  048F  0877               	movf	strspn@i,w
  2303  0490  00F3               	movwf	?_strspn
  2304  0491                     i1l851:
  2305  0491  0008               	return
  2306  0492                     __end_of_strspn:
  2307                           
  2308                           	psect	text11
  2309  0492                     __ptext11:	
  2310 ;; *************** function _strcspn *****************
  2311 ;; Defined at:
  2312 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strcspn.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;  s1              1    wreg     PTR const unsigned char 
  2315 ;;		 -> NULL(0), data(10), 
  2316 ;;  s2              1    3[COMMON] PTR const unsigned char 
  2317 ;;		 -> STR_7(2), STR_6(2), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  s1              1    9[COMMON] PTR const unsigned char 
  2320 ;;		 -> NULL(0), data(10), 
  2321 ;;  i               2    7[COMMON] unsigned int 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  2    3[COMMON] unsigned int 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2331 ;;      Params:         2       0       0       0       0
  2332 ;;      Locals:         3       0       0       0       0
  2333 ;;      Temps:          2       0       0       0       0
  2334 ;;      Totals:         7       0       0       0       0
  2335 ;;Total ram usage:        7 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    2
  2338 ;; This function calls:
  2339 ;;		_strchr
  2340 ;; This function is called by:
  2341 ;;		_strtok
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _strcspn
  2347  0492                     _strcspn:
  2348                           
  2349                           ;incstack = 0
  2350                           ; Regs used in _strcspn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2351                           ;strcspn@s1 stored from wreg
  2352  0492  00F9               	movwf	strcspn@s1
  2353  0493                     i1l1397:
  2354  0493  01F7               	clrf	strcspn@i
  2355  0494  01F8               	clrf	strcspn@i+1
  2356  0495  2CA0               	goto	i1l1401
  2357  0496                     i1l1399:
  2358  0496  3001               	movlw	1
  2359  0497  00FF               	movwf	btemp+1
  2360  0498  087F               	movf	btemp+1,w
  2361  0499  07F9               	addwf	strcspn@s1,f
  2362  049A  3001               	movlw	1
  2363  049B  07F7               	addwf	strcspn@i,f
  2364  049C  1803               	skipnc
  2365  049D  0AF8               	incf	strcspn@i+1,f
  2366  049E  3000               	movlw	0
  2367  049F  07F8               	addwf	strcspn@i+1,f
  2368  04A0                     i1l1401:
  2369  04A0  0879               	movf	strcspn@s1,w
  2370  04A1  0084               	movwf	4
  2371  04A2  1383               	bcf	3,7	;select IRP bank0
  2372  04A3  0800               	movf	0,w
  2373  04A4  1903               	btfsc	3,2
  2374  04A5  2CA7               	goto	u71_21
  2375  04A6  2CA8               	goto	u71_20
  2376  04A7                     u71_21:
  2377  04A7  2CBC               	goto	i1l1405
  2378  04A8                     u71_20:
  2379  04A8                     i1l1403:
  2380  04A8  0879               	movf	strcspn@s1,w
  2381  04A9  0084               	movwf	4
  2382  04AA  0800               	movf	0,w
  2383  04AB  00F5               	movwf	??_strcspn
  2384  04AC  01F6               	clrf	??_strcspn+1
  2385  04AD  0875               	movf	??_strcspn,w
  2386  04AE  00F0               	movwf	strchr@chr
  2387  04AF  0876               	movf	??_strcspn+1,w
  2388  04B0  00F1               	movwf	strchr@chr+1
  2389  04B1  0873               	movf	strcspn@s2,w
  2390  04B2  120A  118A  2519  120A  118A  	fcall	_strchr
  2391  04B7  3A00               	xorlw	0
  2392  04B8  1903               	skipnz
  2393  04B9  2CBB               	goto	u72_21
  2394  04BA  2CBC               	goto	u72_20
  2395  04BB                     u72_21:
  2396  04BB  2C96               	goto	i1l1399
  2397  04BC                     u72_20:
  2398  04BC                     i1l1405:
  2399  04BC  0878               	movf	strcspn@i+1,w
  2400  04BD  00F4               	movwf	?_strcspn+1
  2401  04BE  0877               	movf	strcspn@i,w
  2402  04BF  00F3               	movwf	?_strcspn
  2403  04C0                     i1l835:
  2404  04C0  0008               	return
  2405  04C1                     __end_of_strcspn:
  2406                           
  2407                           	psect	text12
  2408  0519                     __ptext12:	
  2409 ;; *************** function _strchr *****************
  2410 ;; Defined at:
  2411 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strchr.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  ptr             1    wreg     PTR const unsigned char 
  2414 ;;		 -> STR_7(2), STR_6(2), 
  2415 ;;  chr             2    0[COMMON] int 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  ptr             1    2[COMMON] PTR const unsigned char 
  2418 ;;		 -> STR_7(2), STR_6(2), 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      PTR unsigned char 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, pclath
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2428 ;;      Params:         2       0       0       0       0
  2429 ;;      Locals:         1       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0
  2431 ;;      Totals:         3       0       0       0       0
  2432 ;;Total ram usage:        3 bytes
  2433 ;; Hardware stack levels used:    2
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_strcspn
  2438 ;;		_strspn
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _strchr
  2444  0519                     _strchr:
  2445                           
  2446                           ;incstack = 0
  2447 ;; using string table level
  2448                           ; Regs used in _strchr: [wreg-fsr0h+pclath]
  2449                           ;strchr@ptr stored from wreg
  2450  0519  00F2               	movwf	strchr@ptr
  2451  051A                     i1l838:
  2452  051A                     i1l1373:
  2453  051A  0872               	movf	strchr@ptr,w
  2454  051B  0084               	movwf	4
  2455  051C  120A  118A  2539  120A  118A  	fcall	stringdir
  2456  0521  0670               	xorwf	strchr@chr,w
  2457  0522  1D03               	skipz
  2458  0523  2D25               	goto	u67_21
  2459  0524  2D26               	goto	u67_20
  2460  0525                     u67_21:
  2461  0525  2D28               	goto	i1l1379
  2462  0526                     u67_20:
  2463  0526                     i1l1375:
  2464  0526  0872               	movf	strchr@ptr,w
  2465  0527  2D38               	goto	i1l840
  2466  0528                     i1l1379:
  2467  0528  3001               	movlw	1
  2468  0529  07F2               	addwf	strchr@ptr,f
  2469  052A  30FF               	movlw	-1
  2470  052B  0772               	addwf	strchr@ptr,w
  2471  052C  0084               	movwf	4
  2472  052D  120A  118A  2539  120A  118A  	fcall	stringdir
  2473  0532  3A00               	xorlw	0
  2474  0533  1D03               	skipz
  2475  0534  2D36               	goto	u68_21
  2476  0535  2D37               	goto	u68_20
  2477  0536                     u68_21:
  2478  0536  2D1A               	goto	i1l838
  2479  0537                     u68_20:
  2480  0537                     i1l1381:
  2481  0537  3000               	movlw	0
  2482  0538                     i1l840:
  2483  0538  0008               	return
  2484  0539                     __end_of_strchr:
  2485                           
  2486                           	psect	text13
  2487  04C1                     __ptext13:	
  2488 ;; *************** function _strcmp *****************
  2489 ;; Defined at:
  2490 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strcmp.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  s1              1    wreg     PTR const unsigned char 
  2493 ;;		 -> NULL(0), data(10), 
  2494 ;;  s2              1    0[COMMON] PTR const unsigned char 
  2495 ;;		 -> STR_4(3), STR_2(3), STR_1(3), 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  s1              1    5[COMMON] PTR const unsigned char 
  2498 ;;		 -> NULL(0), data(10), 
  2499 ;;  r               1    4[COMMON] char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  2    0[COMMON] int 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2509 ;;      Params:         2       0       0       0       0
  2510 ;;      Locals:         2       0       0       0       0
  2511 ;;      Temps:          2       0       0       0       0
  2512 ;;      Totals:         6       0       0       0       0
  2513 ;;Total ram usage:        6 bytes
  2514 ;; Hardware stack levels used:    2
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_myISR
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function _strcmp
  2524  04C1                     _strcmp:
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2528                           ;strcmp@s1 stored from wreg
  2529  04C1  00F5               	movwf	strcmp@s1
  2530  04C2                     i1l1569:
  2531  04C2  2CCB               	goto	i1l1575
  2532  04C3                     i1l1571:
  2533  04C3  3001               	movlw	1
  2534  04C4  00FF               	movwf	btemp+1
  2535  04C5  087F               	movf	btemp+1,w
  2536  04C6  07F5               	addwf	strcmp@s1,f
  2537  04C7                     i1l1573:
  2538  04C7  3001               	movlw	1
  2539  04C8  00FF               	movwf	btemp+1
  2540  04C9  087F               	movf	btemp+1,w
  2541  04CA  07F0               	addwf	strcmp@s2,f
  2542  04CB                     i1l1575:
  2543  04CB  0870               	movf	strcmp@s2,w
  2544  04CC  0084               	movwf	4
  2545  04CD  120A  118A  2539  120A  118A  	fcall	stringdir
  2546  04D2  00F2               	movwf	??_strcmp
  2547  04D3  0875               	movf	strcmp@s1,w
  2548  04D4  0084               	movwf	4
  2549  04D5  1383               	bcf	3,7	;select IRP bank0
  2550  04D6  0800               	movf	0,w
  2551  04D7  00F3               	movwf	??_strcmp+1
  2552  04D8  0872               	movf	??_strcmp,w
  2553  04D9  0273               	subwf	??_strcmp+1,w
  2554  04DA  00FF               	movwf	btemp+1
  2555  04DB  087F               	movf	btemp+1,w
  2556  04DC  00F4               	movwf	strcmp@r
  2557  04DD  0874               	movf	strcmp@r,w
  2558  04DE  1D03               	btfss	3,2
  2559  04DF  2CE1               	goto	u107_21
  2560  04E0  2CE2               	goto	u107_20
  2561  04E1                     u107_21:
  2562  04E1  2CE9               	goto	i1l1579
  2563  04E2                     u107_20:
  2564  04E2                     i1l1577:
  2565  04E2  0875               	movf	strcmp@s1,w
  2566  04E3  0084               	movwf	4
  2567  04E4  0800               	movf	0,w
  2568  04E5  1D03               	btfss	3,2
  2569  04E6  2CE8               	goto	u108_21
  2570  04E7  2CE9               	goto	u108_20
  2571  04E8                     u108_21:
  2572  04E8  2CC3               	goto	i1l1571
  2573  04E9                     u108_20:
  2574  04E9                     i1l1579:
  2575  04E9  0874               	movf	strcmp@r,w
  2576  04EA  00F0               	movwf	?_strcmp
  2577  04EB  01F1               	clrf	?_strcmp+1
  2578  04EC  1BF0               	btfsc	?_strcmp,7
  2579  04ED  03F1               	decf	?_strcmp+1,f
  2580  04EE                     i1l811:
  2581  04EE  0008               	return
  2582  04EF                     __end_of_strcmp:
  2583                           
  2584                           	psect	text14
  2585  0142                     __ptext14:	
  2586 ;; *************** function _sprintf *****************
  2587 ;; Defined at:
  2588 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  sp              1    wreg     PTR unsigned char 
  2591 ;;		 -> data(10), 
  2592 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2593 ;;		 -> STR_5(4), STR_3(4), 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2596 ;;		 -> data(10), 
  2597 ;;  tmpval          4    0        struct .
  2598 ;;  val             2    9[BANK0 ] unsigned int 
  2599 ;;  cp              2    0        PTR const unsigned char 
  2600 ;;  len             2    0        unsigned int 
  2601 ;;  c               1   12[BANK0 ] unsigned char 
  2602 ;;  prec            1    8[BANK0 ] char 
  2603 ;;  flag            1    7[BANK0 ] unsigned char 
  2604 ;;  ap              1    6[BANK0 ] PTR void [1]
  2605 ;;		 -> ?_sprintf(2), 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  2    0[BANK0 ] int 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2615 ;;      Params:         0       3       0       0       0
  2616 ;;      Locals:         0       7       0       0       0
  2617 ;;      Temps:          0       3       0       0       0
  2618 ;;      Totals:         0      13       0       0       0
  2619 ;;Total ram usage:       13 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    1
  2622 ;; This function calls:
  2623 ;;		___lwdiv
  2624 ;;		___lwmod
  2625 ;; This function is called by:
  2626 ;;		_myISR
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _sprintf
  2632  0142                     _sprintf:
  2633                           
  2634                           ;incstack = 0
  2635                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2636                           ;sprintf@sp stored from wreg
  2637  0142  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0143  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0144  00AB               	movwf	sprintf@sp
  2640  0145                     i1l1605:
  2641                           
  2642                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2643  0145  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2644  0146  00FF               	movwf	btemp+1
  2645  0147  087F               	movf	btemp+1,w
  2646  0148  00A6               	movwf	sprintf@ap
  2647                           
  2648                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2649  0149  2A13               	goto	i1l1659
  2650  014A                     i1l1607:
  2651                           
  2652                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2653  014A  3025               	movlw	37
  2654  014B  062C               	xorwf	sprintf@c,w
  2655  014C  1903               	btfsc	3,2
  2656  014D  294F               	goto	u117_21
  2657  014E  2950               	goto	u117_20
  2658  014F                     u117_21:
  2659  014F  295C               	goto	i1l1613
  2660  0150                     u117_20:
  2661  0150                     i1l1609:
  2662                           
  2663                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2664  0150  082C               	movf	sprintf@c,w
  2665  0151  00FF               	movwf	btemp+1
  2666  0152  082B               	movf	sprintf@sp,w
  2667  0153  0084               	movwf	4
  2668  0154  087F               	movf	btemp+1,w
  2669  0155  1383               	bcf	3,7	;select IRP bank0
  2670  0156  0080               	movwf	0
  2671  0157                     i1l1611:
  2672  0157  3001               	movlw	1
  2673  0158  00FF               	movwf	btemp+1
  2674  0159  087F               	movf	btemp+1,w
  2675  015A  07AB               	addwf	sprintf@sp,f
  2676                           
  2677                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 559:    continue;
  2678  015B  2A13               	goto	i1l1659
  2679  015C                     i1l1613:
  2680                           
  2681                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2682  015C  01A7               	clrf	sprintf@flag
  2683  015D                     i1l1617:	
  2684                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2685                           
  2686  015D  3001               	movlw	1
  2687  015E  07A0               	addwf	sprintf@f,f
  2688  015F  30FF               	movlw	-1
  2689  0160  0720               	addwf	sprintf@f,w
  2690  0161  0084               	movwf	4
  2691  0162  120A  118A  2539  120A  118A  	fcall	stringdir
  2692  0167  00AC               	movwf	sprintf@c
  2693  0168  00A3               	movwf	??_sprintf
  2694  0169  01A4               	clrf	??_sprintf+1
  2695                           
  2696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2697                           ; Switch size 1, requested type "simple"
  2698                           ; Number of cases is 1, Range of values is 0 to 0
  2699                           ; switch strategies available:
  2700                           ; Name         Instructions Cycles
  2701                           ; simple_byte            4     3 (average)
  2702                           ; direct_byte           11     8 (fixed)
  2703                           ; jumptable            260     6 (fixed)
  2704                           ;	Chosen strategy is simple_byte
  2705  016A  0824               	movf	??_sprintf+1,w
  2706  016B  3A00               	xorlw	0	; case 0
  2707  016C  1903               	skipnz
  2708  016D  296F               	goto	i1l1803
  2709  016E  2A13               	goto	i1l1659
  2710  016F                     i1l1803:
  2711                           
  2712                           ; Switch size 1, requested type "simple"
  2713                           ; Number of cases is 3, Range of values is 0 to 105
  2714                           ; switch strategies available:
  2715                           ; Name         Instructions Cycles
  2716                           ; simple_byte           10     6 (average)
  2717                           ; jumptable            260     6 (fixed)
  2718                           ;	Chosen strategy is simple_byte
  2719  016F  0823               	movf	??_sprintf,w
  2720  0170  3A00               	xorlw	0	; case 0
  2721  0171  1903               	skipnz
  2722  0172  2A25               	goto	i1l1661
  2723  0173  3A64               	xorlw	100	; case 100
  2724  0174  1903               	skipnz
  2725  0175  297A               	goto	i1l1619
  2726  0176  3A0D               	xorlw	13	; case 105
  2727  0177  1903               	skipnz
  2728  0178  297A               	goto	i1l1619
  2729  0179  2A13               	goto	i1l1659
  2730  017A                     i1l1619:
  2731                           
  2732                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2733  017A  0826               	movf	sprintf@ap,w
  2734  017B  0084               	movwf	4
  2735  017C  1383               	bcf	3,7	;select IRP bank0
  2736  017D  0800               	movf	0,w
  2737  017E  00A9               	movwf	sprintf@val
  2738  017F  0A84               	incf	4,f
  2739  0180  0800               	movf	0,w
  2740  0181  00AA               	movwf	sprintf@val+1
  2741  0182                     i1l1621:
  2742  0182  3002               	movlw	2
  2743  0183  00FF               	movwf	btemp+1
  2744  0184  087F               	movf	btemp+1,w
  2745  0185  07A6               	addwf	sprintf@ap,f
  2746  0186                     i1l1623:
  2747                           
  2748                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2749  0186  1FAA               	btfss	sprintf@val+1,7
  2750  0187  2989               	goto	u118_21
  2751  0188  298A               	goto	u118_20
  2752  0189                     u118_21:
  2753  0189  2993               	goto	i1l1629
  2754  018A                     u118_20:
  2755  018A                     i1l1625:
  2756                           
  2757                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2758  018A  3003               	movlw	3
  2759  018B  00FF               	movwf	btemp+1
  2760  018C  087F               	movf	btemp+1,w
  2761  018D  04A7               	iorwf	sprintf@flag,f
  2762  018E                     i1l1627:
  2763                           
  2764                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2765  018E  09A9               	comf	sprintf@val,f
  2766  018F  09AA               	comf	sprintf@val+1,f
  2767  0190  0AA9               	incf	sprintf@val,f
  2768  0191  1903               	skipnz
  2769  0192  0AAA               	incf	sprintf@val+1,f
  2770  0193                     i1l1629:
  2771                           
  2772                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2773  0193  01AC               	clrf	sprintf@c
  2774  0194  0AAC               	incf	sprintf@c,f
  2775  0195                     i1l1635:
  2776                           
  2777                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2778  0195  082C               	movf	sprintf@c,w
  2779  0196  00A3               	movwf	??_sprintf
  2780  0197  0723               	addwf	??_sprintf,w
  2781  0198  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2782  0199  0084               	movwf	4
  2783  019A  120A  118A  2539  120A  118A  	fcall	stringdir
  2784  019F  00A4               	movwf	??_sprintf+1
  2785  01A0  120A  118A  2539  120A  118A  	fcall	stringdir
  2786  01A5  00A5               	movwf	??_sprintf+2
  2787  01A6  0825               	movf	??_sprintf+2,w
  2788  01A7  022A               	subwf	sprintf@val+1,w
  2789  01A8  1D03               	skipz
  2790  01A9  29AC               	goto	u119_25
  2791  01AA  0824               	movf	??_sprintf+1,w
  2792  01AB  0229               	subwf	sprintf@val,w
  2793  01AC                     u119_25:
  2794  01AC  1803               	skipnc
  2795  01AD  29AF               	goto	u119_21
  2796  01AE  29B0               	goto	u119_20
  2797  01AF                     u119_21:
  2798  01AF  29B1               	goto	i1l1639
  2799  01B0                     u119_20:
  2800  01B0  29BB               	goto	i1l1643
  2801  01B1                     i1l1639:
  2802  01B1  3001               	movlw	1
  2803  01B2  00FF               	movwf	btemp+1
  2804  01B3  087F               	movf	btemp+1,w
  2805  01B4  07AC               	addwf	sprintf@c,f
  2806  01B5                     i1l1641:
  2807  01B5  3005               	movlw	5
  2808  01B6  062C               	xorwf	sprintf@c,w
  2809  01B7  1D03               	btfss	3,2
  2810  01B8  29BA               	goto	u120_21
  2811  01B9  29BB               	goto	u120_20
  2812  01BA                     u120_21:
  2813  01BA  2995               	goto	i1l1635
  2814  01BB                     u120_20:
  2815  01BB                     i1l1643:
  2816                           
  2817                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2818  01BB  0827               	movf	sprintf@flag,w
  2819  01BC  3903               	andlw	3
  2820  01BD  1903               	btfsc	3,2
  2821  01BE  29C0               	goto	u121_21
  2822  01BF  29C1               	goto	u121_20
  2823  01C0                     u121_21:
  2824  01C0  29CC               	goto	i1l1649
  2825  01C1                     u121_20:
  2826  01C1                     i1l1645:
  2827                           
  2828                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2829  01C1  302D               	movlw	45
  2830  01C2  00FF               	movwf	btemp+1
  2831  01C3  082B               	movf	sprintf@sp,w
  2832  01C4  0084               	movwf	4
  2833  01C5  087F               	movf	btemp+1,w
  2834  01C6  1383               	bcf	3,7	;select IRP bank0
  2835  01C7  0080               	movwf	0
  2836  01C8                     i1l1647:
  2837  01C8  3001               	movlw	1
  2838  01C9  00FF               	movwf	btemp+1
  2839  01CA  087F               	movf	btemp+1,w
  2840  01CB  07AB               	addwf	sprintf@sp,f
  2841  01CC                     i1l1649:
  2842                           
  2843                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2844  01CC  082C               	movf	sprintf@c,w
  2845  01CD  00FF               	movwf	btemp+1
  2846  01CE  087F               	movf	btemp+1,w
  2847  01CF  00A8               	movwf	sprintf@prec
  2848                           
  2849                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2850  01D0  2A0A               	goto	i1l1657
  2851  01D1                     i1l1651:
  2852                           
  2853                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2854  01D1  300A               	movlw	10
  2855  01D2  00F7               	movwf	___lwmod@divisor
  2856  01D3  3000               	movlw	0
  2857  01D4  00F8               	movwf	___lwmod@divisor+1
  2858  01D5  0828               	movf	sprintf@prec,w
  2859  01D6  00A3               	movwf	??_sprintf
  2860  01D7  0723               	addwf	??_sprintf,w
  2861  01D8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2862  01D9  0084               	movwf	4
  2863  01DA  120A  118A  2539  120A  118A  	fcall	stringdir
  2864  01DF  00F0               	movwf	___lwdiv@divisor
  2865  01E0  120A  118A  2539  120A  118A  	fcall	stringdir
  2866  01E5  00F1               	movwf	___lwdiv@divisor+1
  2867  01E6  082A               	movf	sprintf@val+1,w
  2868  01E7  00F3               	movwf	___lwdiv@dividend+1
  2869  01E8  0829               	movf	sprintf@val,w
  2870  01E9  00F2               	movwf	___lwdiv@dividend
  2871  01EA  120A  118A  23AD  120A  118A  	fcall	___lwdiv
  2872  01EF  0871               	movf	?___lwdiv+1,w
  2873  01F0  00FA               	movwf	___lwmod@dividend+1
  2874  01F1  0870               	movf	?___lwdiv,w
  2875  01F2  00F9               	movwf	___lwmod@dividend
  2876  01F3  120A  118A  23F1  120A  118A  	fcall	___lwmod
  2877  01F8  0877               	movf	?___lwmod,w
  2878  01F9  3E30               	addlw	48
  2879  01FA  00FF               	movwf	btemp+1
  2880  01FB  087F               	movf	btemp+1,w
  2881  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  2882  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  2883  01FE  00AC               	movwf	sprintf@c
  2884  01FF                     i1l1653:
  2885                           
  2886                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2887  01FF  082C               	movf	sprintf@c,w
  2888  0200  00FF               	movwf	btemp+1
  2889  0201  082B               	movf	sprintf@sp,w
  2890  0202  0084               	movwf	4
  2891  0203  087F               	movf	btemp+1,w
  2892  0204  1383               	bcf	3,7	;select IRP bank0
  2893  0205  0080               	movwf	0
  2894  0206                     i1l1655:
  2895  0206  3001               	movlw	1
  2896  0207  00FF               	movwf	btemp+1
  2897  0208  087F               	movf	btemp+1,w
  2898  0209  07AB               	addwf	sprintf@sp,f
  2899  020A                     i1l1657:
  2900                           
  2901                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2902  020A  30FF               	movlw	255
  2903  020B  00FF               	movwf	btemp+1
  2904  020C  087F               	movf	btemp+1,w
  2905  020D  07A8               	addwf	sprintf@prec,f
  2906  020E  0A28               	incf	sprintf@prec,w
  2907  020F  1D03               	btfss	3,2
  2908  0210  2A12               	goto	u122_21
  2909  0211  2A13               	goto	u122_20
  2910  0212                     u122_21:
  2911  0212  29D1               	goto	i1l1651
  2912  0213                     u122_20:
  2913  0213                     i1l1659:
  2914                           
  2915                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2916  0213  3001               	movlw	1
  2917  0214  07A0               	addwf	sprintf@f,f
  2918  0215  30FF               	movlw	-1
  2919  0216  0720               	addwf	sprintf@f,w
  2920  0217  0084               	movwf	4
  2921  0218  120A  118A  2539  120A  118A  	fcall	stringdir
  2922  021D  00FF               	movwf	btemp+1
  2923  021E  087F               	movf	btemp+1,w
  2924  021F  00AC               	movwf	sprintf@c
  2925  0220  082C               	movf	sprintf@c,w
  2926  0221  1D03               	btfss	3,2
  2927  0222  2A24               	goto	u123_21
  2928  0223  2A25               	goto	u123_20
  2929  0224                     u123_21:
  2930  0224  294A               	goto	i1l1607
  2931  0225                     u123_20:
  2932  0225                     i1l1661:
  2933                           
  2934                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2935  0225  082B               	movf	sprintf@sp,w
  2936  0226  0084               	movwf	4
  2937  0227  1383               	bcf	3,7	;select IRP bank0
  2938  0228  0180               	clrf	0
  2939  0229                     i1l351:
  2940  0229  0008               	return
  2941  022A                     __end_of_sprintf:
  2942                           
  2943                           	psect	text15
  2944  03F1                     __ptext15:	
  2945 ;; *************** function ___lwmod *****************
  2946 ;; Defined at:
  2947 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwmod.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  divisor         2    7[COMMON] unsigned int 
  2950 ;;  dividend        2    9[COMMON] unsigned int 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  counter         1   11[COMMON] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  2    7[COMMON] unsigned int 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, btemp+1
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2962 ;;      Params:         4       0       0       0       0
  2963 ;;      Locals:         1       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0
  2965 ;;      Totals:         5       0       0       0       0
  2966 ;;Total ram usage:        5 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_sprintf
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           
  2976                           ;psect for function ___lwmod
  2977  03F1                     ___lwmod:
  2978  03F1                     i1l1523:	
  2979                           ;incstack = 0
  2980                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  2981                           
  2982  03F1  0877               	movf	___lwmod@divisor,w
  2983  03F2  0478               	iorwf	___lwmod@divisor+1,w
  2984  03F3  1903               	btfsc	3,2
  2985  03F4  2BF6               	goto	u98_21
  2986  03F5  2BF7               	goto	u98_20
  2987  03F6                     u98_21:
  2988  03F6  2C26               	goto	i1l1541
  2989  03F7                     u98_20:
  2990  03F7                     i1l1525:
  2991  03F7  01FB               	clrf	___lwmod@counter
  2992  03F8  0AFB               	incf	___lwmod@counter,f
  2993  03F9  2C05               	goto	i1l1531
  2994  03FA                     i1l1527:
  2995  03FA  3001               	movlw	1
  2996  03FB                     u99_25:
  2997  03FB  1003               	clrc
  2998  03FC  0DF7               	rlf	___lwmod@divisor,f
  2999  03FD  0DF8               	rlf	___lwmod@divisor+1,f
  3000  03FE  3EFF               	addlw	-1
  3001  03FF  1D03               	skipz
  3002  0400  2BFB               	goto	u99_25
  3003  0401                     i1l1529:
  3004  0401  3001               	movlw	1
  3005  0402  00FF               	movwf	btemp+1
  3006  0403  087F               	movf	btemp+1,w
  3007  0404  07FB               	addwf	___lwmod@counter,f
  3008  0405                     i1l1531:
  3009  0405  1FF8               	btfss	___lwmod@divisor+1,7
  3010  0406  2C08               	goto	u100_21
  3011  0407  2C09               	goto	u100_20
  3012  0408                     u100_21:
  3013  0408  2BFA               	goto	i1l1527
  3014  0409                     u100_20:
  3015  0409                     i1l1533:
  3016  0409  0878               	movf	___lwmod@divisor+1,w
  3017  040A  027A               	subwf	___lwmod@dividend+1,w
  3018  040B  1D03               	skipz
  3019  040C  2C0F               	goto	u101_25
  3020  040D  0877               	movf	___lwmod@divisor,w
  3021  040E  0279               	subwf	___lwmod@dividend,w
  3022  040F                     u101_25:
  3023  040F  1C03               	skipc
  3024  0410  2C12               	goto	u101_21
  3025  0411  2C13               	goto	u101_20
  3026  0412                     u101_21:
  3027  0412  2C19               	goto	i1l1537
  3028  0413                     u101_20:
  3029  0413                     i1l1535:
  3030  0413  0877               	movf	___lwmod@divisor,w
  3031  0414  02F9               	subwf	___lwmod@dividend,f
  3032  0415  0878               	movf	___lwmod@divisor+1,w
  3033  0416  1C03               	skipc
  3034  0417  03FA               	decf	___lwmod@dividend+1,f
  3035  0418  02FA               	subwf	___lwmod@dividend+1,f
  3036  0419                     i1l1537:
  3037  0419  3001               	movlw	1
  3038  041A                     u102_25:
  3039  041A  1003               	clrc
  3040  041B  0CF8               	rrf	___lwmod@divisor+1,f
  3041  041C  0CF7               	rrf	___lwmod@divisor,f
  3042  041D  3EFF               	addlw	-1
  3043  041E  1D03               	skipz
  3044  041F  2C1A               	goto	u102_25
  3045  0420                     i1l1539:
  3046  0420  3001               	movlw	1
  3047  0421  02FB               	subwf	___lwmod@counter,f
  3048  0422  1D03               	btfss	3,2
  3049  0423  2C25               	goto	u103_21
  3050  0424  2C26               	goto	u103_20
  3051  0425                     u103_21:
  3052  0425  2C09               	goto	i1l1533
  3053  0426                     u103_20:
  3054  0426                     i1l1541:
  3055  0426  087A               	movf	___lwmod@dividend+1,w
  3056  0427  00F8               	movwf	?___lwmod+1
  3057  0428  0879               	movf	___lwmod@dividend,w
  3058  0429  00F7               	movwf	?___lwmod
  3059  042A                     i1l637:
  3060  042A  0008               	return
  3061  042B                     __end_of___lwmod:
  3062                           
  3063                           	psect	text16
  3064  03AD                     __ptext16:	
  3065 ;; *************** function ___lwdiv *****************
  3066 ;; Defined at:
  3067 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwdiv.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  divisor         2    0[COMMON] unsigned int 
  3070 ;;  dividend        2    2[COMMON] unsigned int 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  quotient        2    4[COMMON] unsigned int 
  3073 ;;  counter         1    6[COMMON] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  2    0[COMMON] unsigned int 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0, btemp+1
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3083 ;;      Params:         4       0       0       0       0
  3084 ;;      Locals:         3       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0
  3086 ;;      Totals:         7       0       0       0       0
  3087 ;;Total ram usage:        7 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_sprintf
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function ___lwdiv
  3098  03AD                     ___lwdiv:
  3099  03AD                     i1l1497:	
  3100                           ;incstack = 0
  3101                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  3102                           
  3103  03AD  01F4               	clrf	___lwdiv@quotient
  3104  03AE  01F5               	clrf	___lwdiv@quotient+1
  3105  03AF                     i1l1499:
  3106  03AF  0870               	movf	___lwdiv@divisor,w
  3107  03B0  0471               	iorwf	___lwdiv@divisor+1,w
  3108  03B1  1903               	btfsc	3,2
  3109  03B2  2BB4               	goto	u91_21
  3110  03B3  2BB5               	goto	u91_20
  3111  03B4                     u91_21:
  3112  03B4  2BEC               	goto	i1l1519
  3113  03B5                     u91_20:
  3114  03B5                     i1l1501:
  3115  03B5  01F6               	clrf	___lwdiv@counter
  3116  03B6  0AF6               	incf	___lwdiv@counter,f
  3117  03B7  2BC3               	goto	i1l1507
  3118  03B8                     i1l1503:
  3119  03B8  3001               	movlw	1
  3120  03B9                     u92_25:
  3121  03B9  1003               	clrc
  3122  03BA  0DF0               	rlf	___lwdiv@divisor,f
  3123  03BB  0DF1               	rlf	___lwdiv@divisor+1,f
  3124  03BC  3EFF               	addlw	-1
  3125  03BD  1D03               	skipz
  3126  03BE  2BB9               	goto	u92_25
  3127  03BF                     i1l1505:
  3128  03BF  3001               	movlw	1
  3129  03C0  00FF               	movwf	btemp+1
  3130  03C1  087F               	movf	btemp+1,w
  3131  03C2  07F6               	addwf	___lwdiv@counter,f
  3132  03C3                     i1l1507:
  3133  03C3  1FF1               	btfss	___lwdiv@divisor+1,7
  3134  03C4  2BC6               	goto	u93_21
  3135  03C5  2BC7               	goto	u93_20
  3136  03C6                     u93_21:
  3137  03C6  2BB8               	goto	i1l1503
  3138  03C7                     u93_20:
  3139  03C7                     i1l1509:
  3140  03C7  3001               	movlw	1
  3141  03C8                     u94_25:
  3142  03C8  1003               	clrc
  3143  03C9  0DF4               	rlf	___lwdiv@quotient,f
  3144  03CA  0DF5               	rlf	___lwdiv@quotient+1,f
  3145  03CB  3EFF               	addlw	-1
  3146  03CC  1D03               	skipz
  3147  03CD  2BC8               	goto	u94_25
  3148  03CE  0871               	movf	___lwdiv@divisor+1,w
  3149  03CF  0273               	subwf	___lwdiv@dividend+1,w
  3150  03D0  1D03               	skipz
  3151  03D1  2BD4               	goto	u95_25
  3152  03D2  0870               	movf	___lwdiv@divisor,w
  3153  03D3  0272               	subwf	___lwdiv@dividend,w
  3154  03D4                     u95_25:
  3155  03D4  1C03               	skipc
  3156  03D5  2BD7               	goto	u95_21
  3157  03D6  2BD8               	goto	u95_20
  3158  03D7                     u95_21:
  3159  03D7  2BDF               	goto	i1l1515
  3160  03D8                     u95_20:
  3161  03D8                     i1l1511:
  3162  03D8  0870               	movf	___lwdiv@divisor,w
  3163  03D9  02F2               	subwf	___lwdiv@dividend,f
  3164  03DA  0871               	movf	___lwdiv@divisor+1,w
  3165  03DB  1C03               	skipc
  3166  03DC  03F3               	decf	___lwdiv@dividend+1,f
  3167  03DD  02F3               	subwf	___lwdiv@dividend+1,f
  3168  03DE                     i1l1513:
  3169  03DE  1474               	bsf	___lwdiv@quotient,0
  3170  03DF                     i1l1515:
  3171  03DF  3001               	movlw	1
  3172  03E0                     u96_25:
  3173  03E0  1003               	clrc
  3174  03E1  0CF1               	rrf	___lwdiv@divisor+1,f
  3175  03E2  0CF0               	rrf	___lwdiv@divisor,f
  3176  03E3  3EFF               	addlw	-1
  3177  03E4  1D03               	skipz
  3178  03E5  2BE0               	goto	u96_25
  3179  03E6                     i1l1517:
  3180  03E6  3001               	movlw	1
  3181  03E7  02F6               	subwf	___lwdiv@counter,f
  3182  03E8  1D03               	btfss	3,2
  3183  03E9  2BEB               	goto	u97_21
  3184  03EA  2BEC               	goto	u97_20
  3185  03EB                     u97_21:
  3186  03EB  2BC7               	goto	i1l1509
  3187  03EC                     u97_20:
  3188  03EC                     i1l1519:
  3189  03EC  0875               	movf	___lwdiv@quotient+1,w
  3190  03ED  00F1               	movwf	?___lwdiv+1
  3191  03EE  0874               	movf	___lwdiv@quotient,w
  3192  03EF  00F0               	movwf	?___lwdiv
  3193  03F0                     i1l627:
  3194  03F0  0008               	return
  3195  03F1                     __end_of___lwdiv:
  3196                           
  3197                           	psect	text17
  3198  04EF                     __ptext17:	
  3199 ;; *************** function _recivedCMD *****************
  3200 ;; Defined at:
  3201 ;;		line 48 in file "usart.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  cmd             1    wreg     PTR unsigned char 
  3204 ;;		 -> data(10), 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  cmd             1    1[COMMON] PTR unsigned char 
  3207 ;;		 -> data(10), 
  3208 ;;  j               1    3[COMMON] unsigned char 
  3209 ;;  i               1    2[COMMON] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3219 ;;      Params:         0       0       0       0       0
  3220 ;;      Locals:         3       0       0       0       0
  3221 ;;      Temps:          1       0       0       0       0
  3222 ;;      Totals:         4       0       0       0       0
  3223 ;;Total ram usage:        4 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    1
  3226 ;; This function calls:
  3227 ;;		_get1
  3228 ;; This function is called by:
  3229 ;;		_myISR
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           
  3234                           ;psect for function _recivedCMD
  3235  04EF                     _recivedCMD:
  3236                           
  3237                           ;incstack = 0
  3238                           ; Regs used in _recivedCMD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3239                           ;recivedCMD@cmd stored from wreg
  3240  04EF  00F1               	movwf	recivedCMD@cmd
  3241  04F0                     i1l1545:
  3242                           
  3243                           ;usart.c: 49:     unsigned char i = 0;
  3244  04F0  01F2               	clrf	recivedCMD@i
  3245  04F1                     i1l1547:
  3246                           
  3247                           ;usart.c: 52:         cmd[i] = get1();
  3248  04F1  120A  118A  25F0  120A  118A  	fcall	_get1
  3249  04F6  00FF               	movwf	btemp+1
  3250  04F7  0872               	movf	recivedCMD@i,w
  3251  04F8  0771               	addwf	recivedCMD@cmd,w
  3252  04F9  00F0               	movwf	??_recivedCMD
  3253  04FA  0870               	movf	??_recivedCMD,w
  3254  04FB  0084               	movwf	4
  3255  04FC  087F               	movf	btemp+1,w
  3256  04FD  1383               	bcf	3,7	;select IRP bank0
  3257  04FE  0080               	movwf	0
  3258  04FF                     i1l1549:
  3259                           
  3260                           ;usart.c: 53:         j = cmd[i];
  3261  04FF  0872               	movf	recivedCMD@i,w
  3262  0500  0771               	addwf	recivedCMD@cmd,w
  3263  0501  00F0               	movwf	??_recivedCMD
  3264  0502  0870               	movf	??_recivedCMD,w
  3265  0503  0084               	movwf	4
  3266  0504  0800               	movf	0,w
  3267  0505  00FF               	movwf	btemp+1
  3268  0506  087F               	movf	btemp+1,w
  3269  0507  00F3               	movwf	recivedCMD@j
  3270  0508                     i1l1551:
  3271                           
  3272                           ;usart.c: 54:         i++;
  3273  0508  3001               	movlw	1
  3274  0509  00FF               	movwf	btemp+1
  3275  050A  087F               	movf	btemp+1,w
  3276  050B  07F2               	addwf	recivedCMD@i,f
  3277  050C                     i1l1553:
  3278                           
  3279                           ;usart.c: 55:         }
  3280  050C  300A               	movlw	10
  3281  050D  0673               	xorwf	recivedCMD@j,w
  3282  050E  1903               	btfsc	3,2
  3283  050F  2D11               	goto	u104_21
  3284  0510  2D12               	goto	u104_20
  3285  0511                     u104_21:
  3286  0511  2D18               	goto	i1l125
  3287  0512                     u104_20:
  3288  0512                     i1l1555:
  3289  0512  300D               	movlw	13
  3290  0513  0673               	xorwf	recivedCMD@j,w
  3291  0514  1D03               	btfss	3,2
  3292  0515  2D17               	goto	u105_21
  3293  0516  2D18               	goto	u105_20
  3294  0517                     u105_21:
  3295  0517  2CF1               	goto	i1l1547
  3296  0518                     u105_20:
  3297  0518                     i1l125:
  3298  0518  0008               	return
  3299  0519                     __end_of_recivedCMD:
  3300                           
  3301                           	psect	text18
  3302  05F0                     __ptext18:	
  3303 ;; *************** function _get1 *****************
  3304 ;; Defined at:
  3305 ;;		line 61 in file "usart.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      unsigned char 
  3312 ;; Registers used:
  3313 ;;		wreg
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3319 ;;      Params:         0       0       0       0       0
  3320 ;;      Locals:         0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0
  3322 ;;      Totals:         0       0       0       0       0
  3323 ;;Total ram usage:        0 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_recivedCMD
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function _get1
  3334  05F0                     _get1:
  3335  05F0                     i1l1411:	
  3336                           ;incstack = 0
  3337                           ; Regs used in _get1: [wreg]
  3338                           
  3339  05F0                     i1l128:	
  3340                           ;usart.c: 64:     }
  3341                           
  3342                           
  3343                           ;usart.c: 62:     while(!PIR1bits.RCIF){
  3344  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  3345  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  3346  05F2  1E8C               	btfss	12,5	;volatile
  3347  05F3  2DF5               	goto	u74_21
  3348  05F4  2DF6               	goto	u74_20
  3349  05F5                     u74_21:
  3350  05F5  2DF0               	goto	i1l128
  3351  05F6                     u74_20:
  3352  05F6                     i1l1413:
  3353                           
  3354                           ;usart.c: 65:     return RCREG;
  3355  05F6  081A               	movf	26,w	;volatile
  3356  05F7                     i1l131:
  3357  05F7  0008               	return
  3358  05F8                     __end_of_get1:
  3359                           
  3360                           	psect	text19
  3361  0583                     __ptext19:	
  3362 ;; *************** function _i2c_write *****************
  3363 ;; Defined at:
  3364 ;;		line 52 in file "i2c.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  dato            1    wreg     unsigned char 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  dato            1    0[COMMON] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      unsigned char 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3378 ;;      Params:         0       0       0       0       0
  3379 ;;      Locals:         1       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0
  3381 ;;      Totals:         1       0       0       0       0
  3382 ;;Total ram usage:        1 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    1
  3385 ;; This function calls:
  3386 ;;		_i2c_idle
  3387 ;; This function is called by:
  3388 ;;		_myISR
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _i2c_write
  3394  0583                     _i2c_write:
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in _i2c_write: [wreg+status,2+status,0+pclath+cstack]
  3398                           ;i2c_write@dato stored from wreg
  3399  0583  00F0               	movwf	i2c_write@dato
  3400  0584                     i1l1587:
  3401                           
  3402                           ;i2c.c: 53:     i2c_idle();
  3403  0584  120A  118A  25C5  120A  118A  	fcall	_i2c_idle
  3404  0589                     i1l1589:
  3405                           
  3406                           ;i2c.c: 54:     SSPBUF = dato;
  3407  0589  0870               	movf	i2c_write@dato,w
  3408  058A  1283               	bcf	3,5	;RP0=0, select bank0
  3409  058B  1303               	bcf	3,6	;RP1=0, select bank0
  3410  058C  0093               	movwf	19	;volatile
  3411  058D                     i1l1591:	
  3412                           ;i2c.c: 55:     while(SSPSTAT & 0x05);
  3413                           
  3414  058D  1683               	bsf	3,5	;RP0=1, select bank1
  3415  058E  1303               	bcf	3,6	;RP1=0, select bank1
  3416  058F  0814               	movf	20,w	;volatile
  3417  0590  3905               	andlw	5
  3418  0591  1D03               	btfss	3,2
  3419  0592  2D94               	goto	u111_21
  3420  0593  2D95               	goto	u111_20
  3421  0594                     u111_21:
  3422  0594  2D8D               	goto	i1l1591
  3423  0595                     u111_20:
  3424  0595                     i1l220:
  3425  0595  0008               	return
  3426  0596                     __end_of_i2c_write:
  3427                           
  3428                           	psect	text20
  3429  05B7                     __ptext20:	
  3430 ;; *************** function _i2c_stop *****************
  3431 ;; Defined at:
  3432 ;;		line 37 in file "i2c.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		None
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3446 ;;      Params:         0       0       0       0       0
  3447 ;;      Locals:         0       0       0       0       0
  3448 ;;      Temps:          0       0       0       0       0
  3449 ;;      Totals:         0       0       0       0       0
  3450 ;;Total ram usage:        0 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_myISR
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           
  3460                           ;psect for function _i2c_stop
  3461  05B7                     _i2c_stop:
  3462  05B7                     i1l1603:	
  3463                           ;incstack = 0
  3464                           ; Regs used in _i2c_stop: []
  3465                           
  3466                           
  3467                           ;i2c.c: 38:     SSPCON2bits.PEN = 1;
  3468  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  3469  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  3470  05B9  1511               	bsf	17,2	;volatile
  3471  05BA                     i1l199:	
  3472                           ;i2c.c: 39:     while(SSPCON2bits.PEN);
  3473                           
  3474  05BA  1911               	btfsc	17,2	;volatile
  3475  05BB  2DBD               	goto	u115_21
  3476  05BC  2DBE               	goto	u115_20
  3477  05BD                     u115_21:
  3478  05BD  2DBA               	goto	i1l199
  3479  05BE                     u115_20:
  3480  05BE                     i1l202:
  3481  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  3482  05BF  1D8C               	btfss	12,3	;volatile
  3483  05C0  2DC2               	goto	u116_21
  3484  05C1  2DC3               	goto	u116_20
  3485  05C2                     u116_21:
  3486  05C2  2DBE               	goto	i1l202
  3487  05C3                     u116_20:
  3488  05C3                     i1l204:
  3489                           
  3490                           ;i2c.c: 41:     SSPIF = 0;
  3491  05C3  118C               	bcf	12,3	;volatile
  3492  05C4                     i1l205:
  3493  05C4  0008               	return
  3494  05C5                     __end_of_i2c_stop:
  3495                           
  3496                           	psect	text21
  3497  0596                     __ptext21:	
  3498 ;; *************** function _i2c_start *****************
  3499 ;; Defined at:
  3500 ;;		line 20 in file "i2c.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0, pclath, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3514 ;;      Params:         0       0       0       0       0
  3515 ;;      Locals:         0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0
  3517 ;;      Totals:         0       0       0       0       0
  3518 ;;Total ram usage:        0 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    1
  3521 ;; This function calls:
  3522 ;;		_i2c_idle
  3523 ;; This function is called by:
  3524 ;;		_myISR
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           
  3529                           ;psect for function _i2c_start
  3530  0596                     _i2c_start:
  3531  0596                     i1l1583:	
  3532                           ;incstack = 0
  3533                           ; Regs used in _i2c_start: [wreg+status,2+status,0+pclath+cstack]
  3534                           
  3535                           
  3536                           ;i2c.c: 22:     i2c_idle();
  3537  0596  120A  118A  25C5  120A  118A  	fcall	_i2c_idle
  3538  059B                     i1l1585:
  3539                           
  3540                           ;i2c.c: 23:     SSPCON2bits.SEN = 1;
  3541  059B  1683               	bsf	3,5	;RP0=1, select bank1
  3542  059C  1303               	bcf	3,6	;RP1=0, select bank1
  3543  059D  1411               	bsf	17,0	;volatile
  3544  059E                     i1l181:	
  3545                           ;i2c.c: 24:     while(SSPCON2bits.SEN == 1);
  3546                           
  3547  059E  1811               	btfsc	17,0	;volatile
  3548  059F  2DA1               	goto	u109_21
  3549  05A0  2DA2               	goto	u109_20
  3550  05A1                     u109_21:
  3551  05A1  2D9E               	goto	i1l181
  3552  05A2                     u109_20:
  3553  05A2                     i1l184:
  3554  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  3555  05A3  1D8C               	btfss	12,3	;volatile
  3556  05A4  2DA6               	goto	u110_21
  3557  05A5  2DA7               	goto	u110_20
  3558  05A6                     u110_21:
  3559  05A6  2DA2               	goto	i1l184
  3560  05A7                     u110_20:
  3561  05A7                     i1l186:
  3562                           
  3563                           ;i2c.c: 26:     SSPIF = 0;
  3564  05A7  118C               	bcf	12,3	;volatile
  3565  05A8                     i1l187:
  3566  05A8  0008               	return
  3567  05A9                     __end_of_i2c_start:
  3568                           
  3569                           	psect	text22
  3570  05E7                     __ptext22:	
  3571 ;; *************** function _i2c_sendACK *****************
  3572 ;; Defined at:
  3573 ;;		line 76 in file "i2c.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;		None
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  1    wreg      void 
  3580 ;; Registers used:
  3581 ;;		None
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3587 ;;      Params:         0       0       0       0       0
  3588 ;;      Locals:         0       0       0       0       0
  3589 ;;      Temps:          0       0       0       0       0
  3590 ;;      Totals:         0       0       0       0       0
  3591 ;;Total ram usage:        0 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_myISR
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _i2c_sendACK
  3602  05E7                     _i2c_sendACK:
  3603  05E7                     i1l1601:	
  3604                           ;incstack = 0
  3605                           ; Regs used in _i2c_sendACK: []
  3606                           
  3607                           
  3608                           ;i2c.c: 77:     SSPCON2bits.ACKDT = 0;
  3609  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  3610  05E8  1303               	bcf	3,6	;RP1=0, select bank1
  3611  05E9  1291               	bcf	17,5	;volatile
  3612                           
  3613                           ;i2c.c: 78:     SSPCON2bits.ACKEN = 1;
  3614  05EA  1611               	bsf	17,4	;volatile
  3615  05EB                     i1l229:	
  3616                           ;i2c.c: 79:     while(SSPCON2bits.ACKEN == 1);
  3617                           
  3618  05EB  1A11               	btfsc	17,4	;volatile
  3619  05EC  2DEE               	goto	u114_21
  3620  05ED  2DEF               	goto	u114_20
  3621  05EE                     u114_21:
  3622  05EE  2DEB               	goto	i1l229
  3623  05EF                     u114_20:
  3624  05EF                     i1l232:
  3625  05EF  0008               	return
  3626  05F0                     __end_of_i2c_sendACK:
  3627                           
  3628                           	psect	text23
  3629  056F                     __ptext23:	
  3630 ;; *************** function _i2c_read *****************
  3631 ;; Defined at:
  3632 ;;		line 44 in file "i2c.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      unsigned char 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3646 ;;      Params:         0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    1
  3653 ;; This function calls:
  3654 ;;		_i2c_idle
  3655 ;; This function is called by:
  3656 ;;		_myISR
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _i2c_read
  3662  056F                     _i2c_read:
  3663  056F                     i1l1593:	
  3664                           ;incstack = 0
  3665                           ; Regs used in _i2c_read: [wreg+status,2+status,0+pclath+cstack]
  3666                           
  3667                           
  3668                           ;i2c.c: 45:     i2c_idle();
  3669  056F  120A  118A  25C5  120A  118A  	fcall	_i2c_idle
  3670  0574                     i1l1595:
  3671                           
  3672                           ;i2c.c: 46:     SSPCON2bits.RCEN = 1;
  3673  0574  1683               	bsf	3,5	;RP0=1, select bank1
  3674  0575  1303               	bcf	3,6	;RP1=0, select bank1
  3675  0576  1591               	bsf	17,3	;volatile
  3676  0577                     i1l208:	
  3677                           ;i2c.c: 47:     while(SSPCON2bits.RCEN == 1);
  3678                           
  3679  0577  1991               	btfsc	17,3	;volatile
  3680  0578  2D7A               	goto	u112_21
  3681  0579  2D7B               	goto	u112_20
  3682  057A                     u112_21:
  3683  057A  2D77               	goto	i1l208
  3684  057B                     u112_20:
  3685  057B                     i1l211:
  3686  057B  1C14               	btfss	20,0	;volatile
  3687  057C  2D7E               	goto	u113_21
  3688  057D  2D7F               	goto	u113_20
  3689  057E                     u113_21:
  3690  057E  2D7B               	goto	i1l211
  3691  057F                     u113_20:
  3692  057F                     i1l1597:
  3693                           
  3694                           ;i2c.c: 49:     return SSPBUF;
  3695  057F  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0580  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0581  0813               	movf	19,w	;volatile
  3698  0582                     i1l214:
  3699  0582  0008               	return
  3700  0583                     __end_of_i2c_read:
  3701                           
  3702                           	psect	text24
  3703  05C5                     __ptext24:	
  3704 ;; *************** function _i2c_idle *****************
  3705 ;; Defined at:
  3706 ;;		line 81 in file "i2c.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;		None
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;		None
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3720 ;;      Params:         0       0       0       0       0
  3721 ;;      Locals:         0       0       0       0       0
  3722 ;;      Temps:          0       0       0       0       0
  3723 ;;      Totals:         0       0       0       0       0
  3724 ;;Total ram usage:        0 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_i2c_start
  3730 ;;		_i2c_read
  3731 ;;		_i2c_write
  3732 ;;		_i2c_restart
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function _i2c_idle
  3738  05C5                     _i2c_idle:
  3739  05C5                     i1l1449:	
  3740                           ;incstack = 0
  3741                           ; Regs used in _i2c_idle: [wreg+status,2]
  3742                           
  3743  05C5                     i1l1451:	
  3744                           ;i2c.c: 82:     while((SSPCON2 & 0x1F)|| (SSPSTAT & 0x04));
  3745                           
  3746  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  3747  05C6  1303               	bcf	3,6	;RP1=0, select bank1
  3748  05C7  0811               	movf	17,w	;volatile
  3749  05C8  391F               	andlw	31
  3750  05C9  1D03               	btfss	3,2
  3751  05CA  2DCC               	goto	u79_21
  3752  05CB  2DCD               	goto	u79_20
  3753  05CC                     u79_21:
  3754  05CC  2DC5               	goto	i1l1451
  3755  05CD                     u79_20:
  3756  05CD                     i1l1453:
  3757  05CD  1914               	btfsc	20,2	;volatile
  3758  05CE  2DD0               	goto	u80_21
  3759  05CF  2DD1               	goto	u80_20
  3760  05D0                     u80_21:
  3761  05D0  2DC5               	goto	i1l1451
  3762  05D1                     u80_20:
  3763  05D1                     i1l238:
  3764  05D1  0008               	return
  3765  05D2                     __end_of_i2c_idle:
  3766  007E                     btemp	set	126	;btemp
  3767  007E                     wtemp0	set	126
  3768                           
  3769                           	psect	config
  3770                           
  3771                           ;Config register CONFIG1 @ 0x2007
  3772                           ;	Oscillator Selection bits
  3773                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  3774                           ;	Watchdog Timer Enable bit
  3775                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3776                           ;	Power-up Timer Enable bit
  3777                           ;	PWRTE = OFF, PWRT disabled
  3778                           ;	RE3/MCLR pin function select bit
  3779                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  3780                           ;	Code Protection bit
  3781                           ;	CP = OFF, Program memory code protection is disabled
  3782                           ;	Data Code Protection bit
  3783                           ;	CPD = OFF, Data memory code protection is disabled
  3784                           ;	Brown Out Reset Selection bits
  3785                           ;	BOREN = ON, BOR enabled
  3786                           ;	Internal External Switchover bit
  3787                           ;	IESO = ON, Internal/External Switchover mode is enabled
  3788                           ;	Fail-Safe Clock Monitor Enabled bit
  3789                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  3790                           ;	Low Voltage Programming Enable bit
  3791                           ;	LVP = ON, RB3/PGM pin has PGM function, low voltage programming enabled
  3792                           ;	In-Circuit Debugger Mode bit
  3793                           ;	DEBUG = 0x1, unprogrammed default
  3794  2007                     	org	8199
  3795  2007  3FF2               	dw	16370
  3796                           
  3797                           ;Config register CONFIG2 @ 0x2008
  3798                           ;	Brown-out Reset Selection bit
  3799                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3800                           ;	Flash Program Memory Self Write Enable bits
  3801                           ;	WRT = OFF, Write protection off
  3802  2008                     	org	8200
  3803  2008  3FFF               	dw	16383

Data Sizes:
    Strings     15
    Constant    10
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     45      59
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strspn@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_7(CODE[2]), STR_6(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_7(CODE[2]), STR_6(CODE[2]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 2
		 -> STR_7(CODE[2]), STR_6(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_7(CODE[2]), STR_6(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    strtok@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_7(CODE[2]), STR_6(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_4(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_5(CODE[4]), STR_3(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> data(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    token@cmd	PTR unsigned char  size(1) Largest target is 10
		 -> data(BANK0[10]), 

    token@tok	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 

    recivedCMD@cmd	PTR unsigned char  size(1) Largest target is 10
		 -> data(BANK0[10]), 

    usart_TxStr@str	PTR unsigned char  size(1) Largest target is 10
		 -> data(BANK0[10]), 

    dir	PTR unsigned char [3] size(1) Largest target is 10
		 -> NULL(NULL[0]), data(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _usart_TxStr->_usart_Tx
    _token->_strtok
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_usart_init
    _usart_init->___aldiv

Critical Paths under _myISR in BANK0

    _myISR->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     725
                                             42 BANK0      3     3      0
                           _i2c_init
                    _usart_Interrupt
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           8     4      4     725
                                             34 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                             19 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _usart_Interrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myISR                                                6     6      0    3640
                                             13 BANK0      6     6      0
                           _i2c_read
                        _i2c_sendACK
                          _i2c_start
                           _i2c_stop
                          _i2c_write
                         _recivedCMD
                            _sprintf
                             _strcmp
                              _token
                           _usart_Tx
                        _usart_TxStr
 ---------------------------------------------------------------------------------
 (4) _usart_TxStr                                          1     1      0     133
                                              1 COMMON     1     1      0
                           _usart_Tx
 ---------------------------------------------------------------------------------
 (5) _usart_Tx                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _token                                                4     4      0    1556
                                              0 BANK0      4     4      0
                             _strtok
 ---------------------------------------------------------------------------------
 (5) _strtok                                               2     1      1    1430
                                             10 COMMON     2     1      1
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (6) _strspn                                               7     5      2     506
                                              3 COMMON     7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (6) _strcspn                                              7     5      2     506
                                              3 COMMON     7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (8) _strchr                                               3     1      2     306
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (5) _strcmp                                               6     4      2     418
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _recivedCMD                                           4     4      0     169
                                              0 COMMON     4     4      0
                               _get1
 ---------------------------------------------------------------------------------
 (5) _get1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_write                                            1     1      0      22
                                              0 COMMON     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_sendACK                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_read                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (5) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _i2c_init
   _usart_Interrupt
   _usart_init
     ___aldiv

 _myISR (ROOT)
   _i2c_read
     _i2c_idle
   _i2c_sendACK
   _i2c_start
     _i2c_idle
   _i2c_stop
   _i2c_write
     _i2c_idle
   _recivedCMD
     _get1
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _strcmp
   _token
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
   _usart_Tx
   _usart_TxStr
     _usart_Tx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      48       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      3B       5       73.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      48      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Sep 19 13:02:46 2021

                       pc 0002               _SSPSTATbits 0094                        fsr 0004  
                     l100 0315                       l118 05E6                       l420 023E  
                     l430 02C6                       l178 05B6                       u810 0231  
                     u811 0230                       u900 02B3                       u820 0242  
                     u901 02B2                       u821 0241                       u830 0261  
                     u831 0260                       u850 0275                       u851 0274  
                     u845 0266                       u870 0290                       u871 028F  
                     u865 0277                       u890 02AE                       u891 02AD  
                     u875 028C                       u885 02A0                       _dir 004D  
                     fsr0 0004                       indf 0000                      l1701 05B1  
                    l1461 0242                      l1703 05B2                      l1471 0264  
                    l1463 024D                      l1455 022A                      l1481 0290  
                    l1473 026D                      l1465 0251                      l1457 022D  
                    l1491 02B3                      l1483 029E                      l1475 0271  
                    l1467 0259                      l1459 0231                      l1493 02BE  
                    l1485 029F                      l1477 0275                      l1469 0261  
                    l1487 02A8                      l1479 027E                      l1489 02AE  
                    l1681 0308                      l1691 0313                      l1683 030B  
                    l1771 0385                      l1763 0362                      l1693 0314  
                    l1685 030E                      l1677 02C7                      l1773 0388  
                    l1765 036E                      l1695 05DE                      l1687 030F  
                    l1679 02CB                      l1775 0397                      l1767 037B  
                    l1697 05A9                      l1689 0310                      l1777 039A  
                    l1769 0380                      l1699 05AD                      STR_1 054D  
                    STR_2 0550                      STR_3 0549                      STR_4 0553  
                    STR_5 0549                      STR_6 0556                      STR_7 0556  
                    u1327 0390                      u1337 03A2                      i1l63 0137  
             _usart_TxStr 0558                      _get1 05F0                      _data 0051  
                    _main 0362                      btemp 007E                      start 0012  
           ??_i2c_sendACK 0070                     ?_get1 0070           __end_of___aldiv 02C7  
                   ?_main 0070           __end_of___lwdiv 03F1                     i1l103 05D7  
                   i1l202 05BE                     i1l106 05DD                     i1l211 057B  
                   i1l131 05F7                     i1l115 056E                     i1l204 05C3  
                   i1l220 0595                     i1l205 05C4                     i1l125 0518  
                   i1l214 0582                     i1l208 0577                     i1l232 05EF  
                   i1l128 05F0                     i1l137 0462                     i1l229 05EB  
                   i1l181 059E                     i1l238 05D1                     i1l351 0229  
                   i1l184 05A2           __end_of___lwmod 042B                     i1l186 05A7  
                   i1l187 05A8                     i1l199 05BA                     i1l627 03F0  
                   i1l811 04EE                     i1l637 042A                     i1l822 0361  
                   i1l840 0538                     i1l835 04C0                     i1l851 0491  
                   i1l838 051A                     _RCREG 001A                     _SPBRG 0099  
                   _PORTB 0006                     _PORTD 0008                     u70_20 048D  
                   u70_21 048C                     u71_20 04A8                     u71_21 04A7  
                   u80_20 05D1                     u72_20 04BC                     u80_21 05D0  
                   u72_21 04BB                     u73_20 05DD                     u73_21 05DC  
                   _TRISB 0086                     _TRISD 0088                     u74_20 05F6  
                   _SSPIF 0063                     u74_21 05F5                     u91_20 03B5  
                   u67_20 0526                     u75_20 031C                     u91_21 03B4  
                   u67_21 0525                     u75_21 031B                     u68_20 0537  
                   u76_20 0325                     u68_21 0536                     u76_21 0324  
                   u92_25 03B9                     u93_20 03C7                     u69_20 0479  
                   u77_20 033D                     u93_21 03C6                     u69_21 0478  
                   u77_21 033C                     u78_20 0357                     u78_21 0356  
                   u94_25 03C8                     u79_20 05CD                     u95_20 03D8  
                   u79_21 05CC                     u95_21 03D7                     u95_25 03D4  
                   u96_25 03E0                     u97_20 03EC                     u97_21 03EB  
                   _TXREG 0019                     u98_20 03F7                     u98_21 03F6  
                   u99_25 03FB           __end_of_dpowers 0549                     _myISR 002A  
                   _token 042B                     pclath 000A                     status 0003  
                   wtemp0 007E           __end_of_sprintf 022A           __end_of_strcspn 04C1  
         __initialization 0015              __end_of_get1 05F8              __end_of_main 03AD  
        __end_of_i2c_idle 05D2          __end_of_i2c_init 05B7          __end_of_i2c_read 0583  
        __end_of_i2c_stop 05C5       __end_of_i2c_sendACK 05F0                    ??_get1 0070  
                  ??_main 004A                    ?_myISR 0070                    ?_token 0070  
                  u100_20 0409                    u100_21 0408                    u101_20 0413  
                  u101_21 0412                    u101_25 040F                    u110_20 05A7  
                  u110_21 05A6                    u102_25 041A                    u111_20 0595  
                  u103_20 0426                    u111_21 0594                    u103_21 0425  
                  i1l1401 04A0                    i1l1411 05F0                    i1l1403 04A8  
                  i1l1413 05F6                    i1l1501 03B5                    i1l1405 04BC  
                  i1l1421 0320                    i1l1511 03D8                    i1l1503 03B8  
                  i1l1431 033D                    i1l1423 0325                    u112_20 057B  
                  u104_20 0512                    u120_20 01BB                    u112_21 057A  
                  i1l1601 05E7                    u104_21 0511                    i1l1513 03DE  
                  i1l1505 03BF                    u120_21 01BA                    i1l1441 035A  
                  i1l1417 0317                    i1l1409 05D3                    i1l1451 05C5  
                  i1l1603 05B7                    i1l1515 03DF                    i1l1507 03C3  
                  i1l1531 0405                    i1l1523 03F1                    i1l1611 0157  
                  i1l1443 035F                    i1l1435 0340                    i1l1427 0327  
                  i1l1419 031C                    i1l1453 05CD                    i1l1517 03E6  
                  i1l1509 03C7                    i1l1533 0409                    i1l1525 03F7  
                  i1l1541 0426                    i1l1621 0182                    i1l1613 015C  
                  i1l1605 0145                    i1l1381 0537                    i1l1373 051A  
                  i1l1445 0360                    i1l1437 034F                    i1l1429 0335  
                  i1l1551 0508                    i1l1519 03EC                    i1l1535 0413  
                  i1l1527 03FA                    i1l1623 0186                    i1l1607 014A  
                  i1l1375 0526                    i1l1391 0479                    i1l1439 0357  
                  i1l1711 0037                    u113_20 057F                    u105_20 0518  
                  u121_20 01C1                    i1l1449 05C5                    u113_21 057E  
                  u105_21 0517                    i1l1553 050C                    i1l1545 04F0  
                  i1l1537 0419                    i1l1529 0401                    u121_21 01C0  
                  i1l1641 01B5                    i1l1625 018A                    i1l1617 015D  
                  i1l1609 0150                    i1l1393 048D                    i1l1385 0464  
                  i1l1561 0440                    i1l1721 0077                    i1l1713 003D  
                  i1l1705 002A                    i1l1555 0512                    i1l1547 04F1  
                  i1l1539 0420                    i1l1651 01D1                    i1l1643 01BB  
                  i1l1635 0195                    i1l1627 018E                    i1l1619 017A  
                  i1l1803 016F                    i1l1571 04C3                    i1l1379 0528  
                  i1l1387 0467                    i1l1563 0448                    i1l1731 00A8  
                  i1l1723 0081                    i1l1715 004F                    i1l1707 002B  
                  i1l1549 04FF                    i1l1653 01FF                    i1l1645 01C1  
                  i1l1629 0193                    i1l1661 0225                    i1l1573 04C7  
                  i1l1397 0493                    i1l1389 0471                    i1l1565 0457  
                  i1l1557 042E                    i1l1741 00DD                    i1l1725 0086  
                  i1l1733 00AF                    i1l1717 0061                    i1l1709 0031  
                  i1l1583 0596                    i1l1591 058D                    i1l1655 0206  
                  i1l1647 01C8                    i1l1639 01B1                    i1l1575 04CB  
                  i1l1399 0496                    i1l1567 045D                    i1l1559 0430  
                  i1l1671 055A                    i1l1751 0115                    i1l1743 00E8  
                  i1l1735 00BA                    i1l1727 0090                    i1l1719 006C  
                  u114_20 05EF                    u122_20 0213                    u106_20 0462  
                  i1l1593 056F                    u114_21 05EE                    i1l1585 059B  
                  i1l1497 03AD                    u122_21 0212                    i1l1657 020A  
                  i1l1649 01CC                    i1l1577 04E2                    i1l1569 04C2  
                  u106_21 0461                    i1l1673 0562                    i1l1761 0136  
                  i1l1745 00F3                    i1l1753 011C                    i1l1737 00C5  
                  i1l1729 0095                    i1l1595 0574                    i1l1587 0584  
                  i1l1499 03AF                    i1l1659 0213                    i1l1579 04E9  
                  i1l1675 0566                    i1l1755 0127                    i1l1747 00FD  
                  i1l1739 00CB                    i1l1597 057F                    i1l1589 0589  
                  i1l1669 0559                    i1l1749 0102                    i1l1759 0133  
                  u115_20 05BE                    u123_20 0225                    u107_20 04E2  
                  u115_21 05BD                    u123_21 0224                    u107_21 04E1  
                  u116_20 05C3                    u108_20 04E9                    u124_20 056E  
                  u116_21 05C2                    u108_21 04E8                    u124_21 056D  
                  u109_20 05A2                    u117_20 0150                    u125_20 004F  
                  u109_21 05A1                    u117_21 014F                    u125_21 004E  
                  u118_20 018A                    u126_20 0061                    u118_21 0189  
                  u126_21 0060                    u119_20 01B0                    u127_20 006C  
                  u119_21 01AF                    u127_21 006B                    u119_25 01AC  
                  u128_20 00DD                    u128_21 00DC                    u129_20 00E8  
                  u129_21 00E7                    _SSPADD 0093                    _TRISC3 043B  
                  _TRISC4 043C                    _SSPCON 0014                    _SSPBUF 0013  
      __size_of_i2c_start 0013        __size_of_i2c_write 0013             recivedCMD@cmd 0071  
               ??___aldiv 003B                 ??___lwdiv 0074                 ??___lwmod 007B  
                  _strchr 0519                    _strcmp 04C1                    _strtok 0316  
                  _strspn 0463                    saved_w 007E                    token@i 0020  
               ??_sprintf 0023          __end_of_usart_Tx 05DE                 ??_strcspn 0075  
 __end_of__initialization 0026               _i2c_sendACK 05E7            __pcstackCOMMON 0070  
          usart_TxStr@str 0071             __end_of_myISR 0142             __end_of_token 0463  
       __end_of_i2c_start 05A9         __end_of_i2c_write 0596               recivedCMD@i 0072  
             recivedCMD@j 0073  __size_of_usart_Interrupt 0009                   ??_myISR 002D  
                 ??_token 007C              ?_usart_TxStr 0070                __pbssBANK0 004D  
            usart_Tx@send 0070                 ?_i2c_idle 0070                 ?_i2c_init 0070  
               ?_i2c_read 0070                 ?_i2c_stop 0070                __pmaintext 0362  
          usart_init@BAUD 0042                __pintentry 0004                   ?_strchr 0070  
                 ?_strcmp 0070                   ?_strtok 007A                   ?_strspn 0073  
                 _SSPCON2 0091                   _SSPSTAT 0094                __stringtab 0539  
              ??_i2c_idle 0070                ??_i2c_init 0033                ??_i2c_read 0070  
              ??_i2c_stop 0070                   ___aldiv 022A                   ___lwdiv 03AD  
                 ___lwmod 03F1                 ?_usart_Tx 0070                   __ptext1 02C7  
                 __ptext2 022A                   __ptext3 05DE                   __ptext4 05A9  
                 __ptext5 002A                   __ptext6 0558                   __ptext7 05D2  
                 __ptext8 042B                   __ptext9 0316           __size_of_strchr 0020  
         __size_of_strcmp 002E           __size_of_strtok 004C           __size_of_strspn 002F  
                 _lectura 0050                   _dpowers 053F          ___aldiv@dividend 0037  
              _recivedCMD 04EF                   _sprintf 0142                   _strcspn 0492  
    end_of_initialization 0026         ??_usart_Interrupt 0033                 _RCSTAbits 0018  
        ___aldiv@quotient 003E                   strcmp@r 0074                ??_usart_Tx 0070  
                 strspn@i 0077                 _PORTBbits 0006             i2c_write@dato 0070  
               _TRISBbits 0086                 _TRISCbits 0087      __size_of_usart_TxStr 0017  
               _TXSTAbits 0098                _usart_init 02C7              ?_i2c_sendACK 0070  
          __end_of_strchr 0539            __end_of_strcmp 04EF            __end_of_strtok 0362  
          __end_of_strspn 0492       start_initialization 0015               ?_recivedCMD 0070  
               _i2c_start 0596                 _i2c_write 0583         __size_of_i2c_idle 000D  
       __size_of_i2c_init 000E         __size_of_i2c_read 0014         __size_of_i2c_stop 000E  
                ??_strchr 0072                  ??_strcmp 0072                  ??_strtok 007B  
                ??_strspn 0075               __pbssCOMMON 007C                 ___latbits 0002  
           __pcstackBANK0 0020                ?_i2c_start 0070                ?_i2c_write 0070  
             sprintf@flag 0027               sprintf@prec 0028               ?_usart_init 0042  
        ___lwdiv@dividend 0072       __size_of_recivedCMD 002A                  ?___aldiv 0033  
                ?___lwdiv 0070                  ?___lwmod 0077                 __pstrings 0539  
       __size_of_usart_Tx 000C           _usart_Interrupt 05DE          ___lwdiv@quotient 0074  
          __size_of_myISR 0118                  ?_sprintf 0020                  ?_strcspn 0073  
          __size_of_token 0038           ___aldiv@divisor 0033         interrupt_function 0004  
         ___aldiv@counter 003C                  _PIE1bits 008C                  _PIR1bits 000C  
    __size_of_i2c_sendACK 0009               __stringbase 053E       __size_of_usart_init 004F  
             ??_i2c_start 0070               ??_i2c_write 0070                  _i2c_idle 05C5  
                _i2c_init 05A9                  _i2c_read 056F                  _i2c_stop 05B7  
         _usart_init$1348 0046          __size_of___aldiv 009D   __end_of_usart_Interrupt 05E7  
        __size_of___lwdiv 0044          __size_of___lwmod 003A        __end_of__stringtab 053F  
              sprintf@val 0029              ??_recivedCMD 0070           ___lwdiv@divisor 0070  
         ___lwdiv@counter 0076                  __ptext10 0463                  __ptext11 0492  
                __ptext20 05B7                  __ptext12 0519                  __ptext21 0596  
                __ptext13 04C1                  __ptext22 05E7                  __ptext14 0142  
                __ptext23 056F                  __ptext15 03F1                  __ptext24 05C5  
                __ptext16 03AD                  __ptext17 04EF                  __ptext18 05F0  
                __ptext19 0583             ??_usart_TxStr 0071          __size_of_sprintf 00E8  
        __size_of_strcspn 002F             __size_of_get1 0008             __size_of_main 004B  
      __end_of_recivedCMD 0519                  _usart_Tx 05D2                _INTCONbits 000B  
                intlevel1 0000                 sprintf@ap 0026                 sprintf@sp 002B  
               strchr@chr 0070          ___lwmod@dividend 0079                 strchr@ptr 0072  
            ??_usart_init 0046                 strcspn@s1 0079                 strcspn@s2 0073  
     __end_of_usart_TxStr 056F                 stringcode 0539                  token@cmd 0022  
                token@tok 0023          ?_usart_Interrupt 0070                  sprintf@c 002C  
                sprintf@f 0020                  strcmp@s1 0075                  strcmp@s2 0070  
         ___lwmod@divisor 0077           ___lwmod@counter 007B                  strcspn@i 0077  
                stringdir 0539                  stringtab 0539              ___aldiv@sign 003D  
      __end_of_usart_init 0316                  strtok@s1 007B                  strtok@s2 007A  
                strspn@s1 0079                  strspn@s2 0073                  strtok@sp 007C  
             _SSPCON2bits 0091                _SSPCONbits 0014  
