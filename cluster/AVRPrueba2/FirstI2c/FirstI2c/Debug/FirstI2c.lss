
FirstI2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000632  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Stop>:
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
}
  6c:	84 e9       	ldi	r24, 0x94	; 148
  6e:	86 bf       	out	0x36, r24	; 54
  70:	06 b6       	in	r0, 0x36	; 54
  72:	04 fc       	sbrc	r0, 4
  74:	fd cf       	rjmp	.-6      	; 0x70 <I2C_Stop+0x4>
  76:	08 95       	ret

00000078 <I2C_Write>:
  78:	83 b9       	out	0x03, r24	; 3
  7a:	84 e8       	ldi	r24, 0x84	; 132
  7c:	86 bf       	out	0x36, r24	; 54
  7e:	06 b6       	in	r0, 0x36	; 54
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <I2C_Write+0x6>
  84:	81 b1       	in	r24, 0x01	; 1
  86:	88 7f       	andi	r24, 0xF8	; 248
  88:	88 32       	cpi	r24, 0x28	; 40
  8a:	21 f0       	breq	.+8      	; 0x94 <I2C_Write+0x1c>
  8c:	80 33       	cpi	r24, 0x30	; 48
  8e:	21 f4       	brne	.+8      	; 0x98 <I2C_Write+0x20>
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	08 95       	ret
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	08 95       	ret

0000009c <I2C_Start>:

uint8_t I2C_Start(char write_address)/* I2C start function */
{
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <I2C_Start+0x4>
	status=TWSR&0xF8;		/* Read TWI status register */
  a6:	91 b1       	in	r25, 0x01	; 1
  a8:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x08)		/* Check weather START transmitted or not? */
  aa:	98 30       	cpi	r25, 0x08	; 8
  ac:	71 f4       	brne	.+28     	; 0xca <I2C_Start+0x2e>
	return 0;			/* Return 0 to indicate start condition fail */
	TWDR=write_address;		/* Write SLA+W in TWI data register */
  ae:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
  b0:	84 e8       	ldi	r24, 0x84	; 132
  b2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  b4:	06 b6       	in	r0, 0x36	; 54
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <I2C_Start+0x18>
	status=TWSR&0xF8;		/* Read TWI status register */
  ba:	81 b1       	in	r24, 0x01	; 1
  bc:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
  be:	88 31       	cpi	r24, 0x18	; 24
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Start+0x32>
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
  c2:	80 32       	cpi	r24, 0x20	; 32
  c4:	31 f4       	brne	.+12     	; 0xd2 <I2C_Start+0x36>
	return 2;			/* Return 2 to indicate nack received */
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	08 95       	ret
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status!=0x08)		/* Check weather START transmitted or not? */
	return 0;			/* Return 0 to indicate start condition fail */
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
	TWDR=write_address;		/* Write SLA+W in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
	return 1;			/* Return 1 to indicate ack received */
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
  d2:	83 e0       	ldi	r24, 0x03	; 3
}
  d4:	08 95       	ret

000000d6 <I2C_Init>:

void I2C_Init()			/* I2C initialize function */
{
	TWBR = BITRATE(TWSR=0x00);	/* Get bit rate register value by formula */
  d6:	11 b8       	out	0x01, r1	; 1
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 b9       	out	0x00, r24	; 0
  dc:	08 95       	ret

000000de <main>:
void I2C_Init()	;


int main(void)
{
	DDRC = 0x00;
  de:	14 ba       	out	0x14, r1	; 20

    I2C_Init();			/* Initialize I2C */
  e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Init>
    I2C_Start(EEPROM_Write_Addess);/* Start I2C with device write address */
  e4:	80 ea       	ldi	r24, 0xA0	; 160
  e6:	0e 94 4e 00 	call	0x9c	; 0x9c <I2C_Start>
    I2C_Write(0x8F);		/* Write start memory address for data write */
  ea:	8f e8       	ldi	r24, 0x8F	; 143
  ec:	0e 94 3c 00 	call	0x78	; 0x78 <I2C_Write>
    I2C_Stop();			/* Stop I2C */
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	83 ec       	ldi	r24, 0xC3	; 195
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x1a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x20>
  fe:	00 00       	nop
    //I2C_Write(0x00);		/* Write start memory address */
    //I2C_Repeated_Start(EEPROM_Read_Addess);/* Repeat start I2C SLA+R */
    //I2C_Read_Nack();		/* Read flush data with nack */
    //I2C_Stop();			/* Stop I2C */
    return 0;
}
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	08 95       	ret

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
