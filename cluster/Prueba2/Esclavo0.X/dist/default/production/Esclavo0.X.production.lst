

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Aug 02 19:29:54 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.20
    27                           ; Generated 12/02/2020 GMT
    28                           ; 
    29                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0088                     	;# 
   100  0089                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  008F                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  0105                     	;# 
   124  0107                     	;# 
   125  0108                     	;# 
   126  0109                     	;# 
   127  010C                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  0185                     	;# 
   133  0187                     	;# 
   134  0188                     	;# 
   135  0189                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0088                     	;# 
   178  0089                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  0105                     	;# 
   202  0107                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0185                     	;# 
   211  0187                     	;# 
   212  0188                     	;# 
   213  0189                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  000E                     	;# 
   232  000F                     	;# 
   233  0010                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0013                     	;# 
   237  0014                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001B                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001D                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  0081                     	;# 
   252  0085                     	;# 
   253  0086                     	;# 
   254  0087                     	;# 
   255  0088                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  008F                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0097                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009A                     	;# 
   274  009B                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009E                     	;# 
   278  009F                     	;# 
   279  0105                     	;# 
   280  0107                     	;# 
   281  0108                     	;# 
   282  0109                     	;# 
   283  010C                     	;# 
   284  010C                     	;# 
   285  010D                     	;# 
   286  010E                     	;# 
   287  010F                     	;# 
   288  0185                     	;# 
   289  0187                     	;# 
   290  0188                     	;# 
   291  0189                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294                           
   295                           	psect	strings
   296  031C                     __pstrings:
   297  031C                     stringtab:
   298  031C                     __stringtab:
   299  031C                     stringcode:	
   300                           ;	String table - string pointers are 1 byte each
   301                           
   302  031C                     stringdir:
   303  031C  3003               	movlw	high stringdir
   304  031D  008A               	movwf	10
   305  031E  0804               	movf	4,w
   306  031F  0A84               	incf	4,f
   307  0320  0782               	addwf	2,f
   308  0321                     __stringbase:
   309  0321  3400               	retlw	0
   310  0322                     __end_of__stringtab:
   311  0322                     _dpowers:
   312  0322  3401               	retlw	1
   313  0323  3400               	retlw	0
   314  0324  340A               	retlw	10
   315  0325  3400               	retlw	0
   316  0326  3464               	retlw	100
   317  0327  3400               	retlw	0
   318  0328  34E8               	retlw	232
   319  0329  3403               	retlw	3
   320  032A  3410               	retlw	16
   321  032B  3427               	retlw	39
   322  032C                     __end_of_dpowers:
   323  001A                     _RCREG	set	26
   324  0019                     _TXREG	set	25
   325  0018                     _RCSTAbits	set	24
   326  0008                     _PORTDbits	set	8
   327  0008                     _PORTD	set	8
   328  000C                     _PIR1bits	set	12
   329  0006                     _PORTB	set	6
   330  000B                     _INTCONbits	set	11
   331  008C                     _PIE1bits	set	140
   332  0098                     _TXSTAbits	set	152
   333  0099                     _SPBRG	set	153
   334  0087                     _TRISCbits	set	135
   335  0088                     _TRISD	set	136
   336  0086                     _TRISB	set	134
   337  0189                     _ANSELH	set	393
   338  032C                     STR_1:
   339  032C  3425               	retlw	37	;'%'
   340  032D  3464               	retlw	100	;'d'
   341  032E  340A               	retlw	10
   342  032F  3400               	retlw	0
   343                           
   344                           	psect	cinit
   345  0015                     start_initialization:	
   346                           ; #config settings
   347                           
   348  0015                     __initialization:
   349                           
   350                           ; Clear objects allocated to BANK0
   351  0015  1283               	bcf	3,5	;RP0=0, select bank0
   352  0016  1303               	bcf	3,6	;RP1=0, select bank0
   353  0017  01C9               	clrf	__pbssBANK0& (0+127)
   354  0018  01CA               	clrf	(__pbssBANK0+1)& (0+127)
   355  0019  01CB               	clrf	(__pbssBANK0+2)& (0+127)
   356  001A  01CC               	clrf	(__pbssBANK0+3)& (0+127)
   357  001B  01CD               	clrf	(__pbssBANK0+4)& (0+127)
   358  001C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  001C                     __end_of__initialization:
   362  001C  0183               	clrf	3
   363  001D  120A  118A  2A7A   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssBANK0
   366  0049                     __pbssBANK0:
   367  0049                     _chra:
   368  0049                     	ds	1
   369  004A                     _buffer:
   370  004A                     	ds	4
   371                           
   372                           	psect	cstackCOMMON
   373  0070                     __pcstackCOMMON:
   374  0070                     ?_usart_Rx:
   375  0070                     ??_usart_Rx:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_enviarDato:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_usart_Tx:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_blink:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_usart_TxStr:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_ISR:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_main:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?i1_usart_Tx:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ??i1_usart_Tx:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?___lwdiv:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     i1usart_Tx@send:	
   406                           ; 2 bytes @ 0x0
   407                           
   408  0070                     ___lwdiv@divisor:	
   409                           ; 1 bytes @ 0x0
   410                           
   411                           
   412                           ; 2 bytes @ 0x0
   413  0070                     	ds	1
   414  0071                     ??_usart_TxStr:
   415  0071                     usart_TxStr@str:	
   416                           ; 1 bytes @ 0x1
   417                           
   418                           
   419                           ; 1 bytes @ 0x1
   420  0071                     	ds	1
   421  0072                     ___lwdiv@dividend:
   422                           
   423                           ; 2 bytes @ 0x2
   424  0072                     	ds	2
   425  0074                     ??___lwdiv:
   426  0074                     ___lwdiv@quotient:	
   427                           ; 1 bytes @ 0x4
   428                           
   429                           
   430                           ; 2 bytes @ 0x4
   431  0074                     	ds	2
   432  0076                     ___lwdiv@counter:
   433                           
   434                           ; 1 bytes @ 0x6
   435  0076                     	ds	1
   436  0077                     ?___lwmod:
   437  0077                     ___lwmod@divisor:	
   438                           ; 2 bytes @ 0x7
   439                           
   440                           
   441                           ; 2 bytes @ 0x7
   442  0077                     	ds	2
   443  0079                     ___lwmod@dividend:
   444                           
   445                           ; 2 bytes @ 0x9
   446  0079                     	ds	2
   447  007B                     ??___lwmod:
   448  007B                     ___lwmod@counter:	
   449                           ; 1 bytes @ 0xB
   450                           
   451                           
   452                           ; 1 bytes @ 0xB
   453  007B                     	ds	1
   454  007C                     ??_enviarDato:
   455                           
   456                           ; 1 bytes @ 0xC
   457  007C                     	ds	2
   458                           
   459                           	psect	cstackBANK0
   460  0020                     __pcstackBANK0:
   461  0020                     ?_sprintf:
   462  0020                     sprintf@f:	
   463                           ; 2 bytes @ 0x0
   464                           
   465                           
   466                           ; 1 bytes @ 0x0
   467  0020                     	ds	3
   468  0023                     ??_sprintf:
   469                           
   470                           ; 1 bytes @ 0x3
   471  0023                     	ds	3
   472  0026                     sprintf@ap:
   473                           
   474                           ; 1 bytes @ 0x6
   475  0026                     	ds	1
   476  0027                     sprintf@flag:
   477                           
   478                           ; 1 bytes @ 0x7
   479  0027                     	ds	1
   480  0028                     sprintf@prec:
   481                           
   482                           ; 1 bytes @ 0x8
   483  0028                     	ds	1
   484  0029                     sprintf@val:
   485                           
   486                           ; 2 bytes @ 0x9
   487  0029                     	ds	2
   488  002B                     sprintf@sp:
   489                           
   490                           ; 1 bytes @ 0xB
   491  002B                     	ds	1
   492  002C                     sprintf@c:
   493                           
   494                           ; 1 bytes @ 0xC
   495  002C                     	ds	1
   496  002D                     enviarDato@entero:
   497                           
   498                           ; 1 bytes @ 0xD
   499  002D                     	ds	1
   500  002E                     ??_ISR:
   501                           
   502                           ; 1 bytes @ 0xE
   503  002E                     	ds	4
   504  0032                     ??_usart_Tx:
   505  0032                     ??_blink:	
   506                           ; 1 bytes @ 0x12
   507                           
   508  0032                     ?___aldiv:	
   509                           ; 1 bytes @ 0x12
   510                           
   511  0032                     usart_Tx@send:	
   512                           ; 4 bytes @ 0x12
   513                           
   514  0032                     ___aldiv@divisor:	
   515                           ; 1 bytes @ 0x12
   516                           
   517                           
   518                           ; 4 bytes @ 0x12
   519  0032                     	ds	4
   520  0036                     ___aldiv@dividend:
   521                           
   522                           ; 4 bytes @ 0x16
   523  0036                     	ds	4
   524  003A                     ??___aldiv:
   525                           
   526                           ; 1 bytes @ 0x1A
   527  003A                     	ds	1
   528  003B                     ___aldiv@counter:
   529                           
   530                           ; 1 bytes @ 0x1B
   531  003B                     	ds	1
   532  003C                     ___aldiv@sign:
   533                           
   534                           ; 1 bytes @ 0x1C
   535  003C                     	ds	1
   536  003D                     ___aldiv@quotient:
   537                           
   538                           ; 4 bytes @ 0x1D
   539  003D                     	ds	4
   540  0041                     ?_usart_init:
   541  0041                     usart_init@BAUD:	
   542                           ; 1 bytes @ 0x21
   543                           
   544                           
   545                           ; 4 bytes @ 0x21
   546  0041                     	ds	4
   547  0045                     ??_usart_init:
   548  0045                     _usart_init$991:	
   549                           ; 1 bytes @ 0x25
   550                           
   551                           
   552                           ; 4 bytes @ 0x25
   553  0045                     	ds	4
   554  0049                     ??_main:
   555                           
   556                           	psect	maintext
   557  027A                     __pmaintext:	
   558                           ; 1 bytes @ 0x29
   559 ;;
   560 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   561 ;;
   562 ;; *************** function _main *****************
   563 ;; Defined at:
   564 ;;		line 25 in file "main.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;		None
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : B00/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   578 ;;      Params:         0       0       0       0       0
   579 ;;      Locals:         0       0       0       0       0
   580 ;;      Temps:          0       0       0       0       0
   581 ;;      Totals:         0       0       0       0       0
   582 ;;Total ram usage:        0 bytes
   583 ;; Hardware stack levels required when called:    6
   584 ;; This function calls:
   585 ;;		_blink
   586 ;;		_usart_Tx
   587 ;;		_usart_init
   588 ;; This function is called by:
   589 ;;		Startup code after reset
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           
   594                           ;psect for function _main
   595  027A                     _main:
   596  027A                     l1202:	
   597                           ;incstack = 0
   598                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   599                           
   600                           
   601                           ;main.c: 27:     ANSELH = 0x00;
   602  027A  1683               	bsf	3,5	;RP0=1, select bank3
   603  027B  1703               	bsf	3,6	;RP1=1, select bank3
   604  027C  0189               	clrf	9	;volatile
   605  027D                     l1204:
   606                           
   607                           ;main.c: 28:     TRISB = 0xFF;
   608  027D  30FF               	movlw	255
   609  027E  1683               	bsf	3,5	;RP0=1, select bank1
   610  027F  1303               	bcf	3,6	;RP1=0, select bank1
   611  0280  0086               	movwf	6	;volatile
   612  0281                     l1206:
   613                           
   614                           ;main.c: 29:     TRISD = 0x00;
   615  0281  0188               	clrf	8	;volatile
   616  0282                     l1208:
   617                           
   618                           ;main.c: 30:     PORTD = 0x00;
   619  0282  1283               	bcf	3,5	;RP0=0, select bank0
   620  0283  1303               	bcf	3,6	;RP1=0, select bank0
   621  0284  0188               	clrf	8	;volatile
   622  0285                     l1210:
   623                           
   624                           ;main.c: 31:     usart_init(9600);
   625  0285  3000               	movlw	0
   626  0286  00C4               	movwf	usart_init@BAUD+3
   627  0287  3000               	movlw	0
   628  0288  00C3               	movwf	usart_init@BAUD+2
   629  0289  3025               	movlw	37
   630  028A  00C2               	movwf	usart_init@BAUD+1
   631  028B  3080               	movlw	128
   632  028C  00C1               	movwf	usart_init@BAUD
   633  028D  120A  118A  21A5  120A  118A  	fcall	_usart_init
   634  0292                     l1212:
   635                           
   636                           ;main.c: 32:     usart_Tx('z');
   637  0292  307A               	movlw	122
   638  0293  120A  118A  2330  120A  118A  	fcall	_usart_Tx
   639  0298                     l1214:
   640                           
   641                           ;main.c: 34:         blink();
   642  0298  120A  118A  22C7  120A  118A  	fcall	_blink
   643  029D  2A98               	goto	l1214
   644  029E  120A  118A  2812   	ljmp	start
   645  02A1                     __end_of_main:
   646                           
   647                           	psect	text1
   648  01A5                     __ptext1:	
   649 ;; *************** function _usart_init *****************
   650 ;; Defined at:
   651 ;;		line 9 in file "../Master.X/usart.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  BAUD            4   33[BANK0 ] long 
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   665 ;;      Params:         0       4       0       0       0
   666 ;;      Locals:         0       4       0       0       0
   667 ;;      Temps:          0       0       0       0       0
   668 ;;      Totals:         0       8       0       0       0
   669 ;;Total ram usage:        8 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    5
   672 ;; This function calls:
   673 ;;		___aldiv
   674 ;; This function is called by:
   675 ;;		_main
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           
   680                           ;psect for function _usart_init
   681  01A5                     _usart_init:
   682  01A5                     l1156:	
   683                           ;incstack = 0
   684                           ; Regs used in _usart_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   685                           
   686                           
   687                           ;../Master.X/usart.c: 11:     TRISCbits.TRISC6 = 0;
   688  01A5  1683               	bsf	3,5	;RP0=1, select bank1
   689  01A6  1303               	bcf	3,6	;RP1=0, select bank1
   690  01A7  1307               	bcf	7,6	;volatile
   691                           
   692                           ;../Master.X/usart.c: 12:     TRISCbits.TRISC7 = 1;
   693  01A8  1787               	bsf	7,7	;volatile
   694  01A9                     l1158:
   695                           
   696                           ;../Master.X/usart.c: 13:     SPBRG = (unsigned char)(((20000000/BAUD)/64) - 1);
   697  01A9  1283               	bcf	3,5	;RP0=0, select bank0
   698  01AA  1303               	bcf	3,6	;RP1=0, select bank0
   699  01AB  0844               	movf	usart_init@BAUD+3,w
   700  01AC  00B5               	movwf	___aldiv@divisor+3
   701  01AD  0843               	movf	usart_init@BAUD+2,w
   702  01AE  00B4               	movwf	___aldiv@divisor+2
   703  01AF  0842               	movf	usart_init@BAUD+1,w
   704  01B0  00B3               	movwf	___aldiv@divisor+1
   705  01B1  0841               	movf	usart_init@BAUD,w
   706  01B2  00B2               	movwf	___aldiv@divisor
   707  01B3  3001               	movlw	1
   708  01B4  00B9               	movwf	___aldiv@dividend+3
   709  01B5  3031               	movlw	49
   710  01B6  00B8               	movwf	___aldiv@dividend+2
   711  01B7  302D               	movlw	45
   712  01B8  00B7               	movwf	___aldiv@dividend+1
   713  01B9  3000               	movlw	0
   714  01BA  00B6               	movwf	___aldiv@dividend
   715  01BB  120A  118A  2108  120A  118A  	fcall	___aldiv
   716  01C0  1283               	bcf	3,5	;RP0=0, select bank0
   717  01C1  1303               	bcf	3,6	;RP1=0, select bank0
   718  01C2  0835               	movf	?___aldiv+3,w
   719  01C3  00C8               	movwf	_usart_init$991+3
   720  01C4  0834               	movf	?___aldiv+2,w
   721  01C5  00C7               	movwf	_usart_init$991+2
   722  01C6  0833               	movf	?___aldiv+1,w
   723  01C7  00C6               	movwf	_usart_init$991+1
   724  01C8  0832               	movf	?___aldiv,w
   725  01C9  00C5               	movwf	_usart_init$991
   726                           
   727                           ;../Master.X/usart.c: 13:     SPBRG = (unsigned char)(((20000000/BAUD)/64) - 1);
   728  01CA  3000               	movlw	0
   729  01CB  00B5               	movwf	___aldiv@divisor+3
   730  01CC  3000               	movlw	0
   731  01CD  00B4               	movwf	___aldiv@divisor+2
   732  01CE  3000               	movlw	0
   733  01CF  00B3               	movwf	___aldiv@divisor+1
   734  01D0  3040               	movlw	64
   735  01D1  00B2               	movwf	___aldiv@divisor
   736  01D2  0848               	movf	_usart_init$991+3,w
   737  01D3  00B9               	movwf	___aldiv@dividend+3
   738  01D4  0847               	movf	_usart_init$991+2,w
   739  01D5  00B8               	movwf	___aldiv@dividend+2
   740  01D6  0846               	movf	_usart_init$991+1,w
   741  01D7  00B7               	movwf	___aldiv@dividend+1
   742  01D8  0845               	movf	_usart_init$991,w
   743  01D9  00B6               	movwf	___aldiv@dividend
   744  01DA  120A  118A  2108  120A  118A  	fcall	___aldiv
   745  01DF  1283               	bcf	3,5	;RP0=0, select bank0
   746  01E0  1303               	bcf	3,6	;RP1=0, select bank0
   747  01E1  0832               	movf	?___aldiv,w
   748  01E2  3EFF               	addlw	255
   749  01E3  1683               	bsf	3,5	;RP0=1, select bank1
   750  01E4  1303               	bcf	3,6	;RP1=0, select bank1
   751  01E5  0099               	movwf	25	;volatile
   752  01E6                     l1160:
   753                           
   754                           ;../Master.X/usart.c: 14:     TXSTAbits.BRGH = 0;
   755  01E6  1118               	bcf	24,2	;volatile
   756  01E7                     l1162:
   757                           
   758                           ;../Master.X/usart.c: 15:     TXSTAbits.SYNC = 0;
   759  01E7  1218               	bcf	24,4	;volatile
   760  01E8                     l1164:
   761                           
   762                           ;../Master.X/usart.c: 16:     RCSTAbits.SPEN = 1;
   763  01E8  1283               	bcf	3,5	;RP0=0, select bank0
   764  01E9  1303               	bcf	3,6	;RP1=0, select bank0
   765  01EA  1798               	bsf	24,7	;volatile
   766  01EB                     l1166:
   767                           
   768                           ;../Master.X/usart.c: 19:     TXSTAbits.TX9 = 0;
   769  01EB  1683               	bsf	3,5	;RP0=1, select bank1
   770  01EC  1303               	bcf	3,6	;RP1=0, select bank1
   771  01ED  1318               	bcf	24,6	;volatile
   772  01EE                     l1168:
   773                           
   774                           ;../Master.X/usart.c: 20:     TXSTAbits.TXEN = 1;
   775  01EE  1698               	bsf	24,5	;volatile
   776  01EF                     l1170:
   777                           
   778                           ;../Master.X/usart.c: 23:     RCSTAbits.RC9 = 0;
   779  01EF  1283               	bcf	3,5	;RP0=0, select bank0
   780  01F0  1303               	bcf	3,6	;RP1=0, select bank0
   781  01F1  1318               	bcf	24,6	;volatile
   782  01F2                     l1172:
   783                           
   784                           ;../Master.X/usart.c: 24:     RCSTAbits.CREN = 1;
   785  01F2  1618               	bsf	24,4	;volatile
   786  01F3                     l1174:
   787                           
   788                           ;../Master.X/usart.c: 27:     PIE1bits.RCIE = 1;
   789  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   790  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   791  01F5  168C               	bsf	12,5	;volatile
   792  01F6                     l1176:
   793                           
   794                           ;../Master.X/usart.c: 28:     PIR1bits.RCIF = 0;
   795  01F6  1283               	bcf	3,5	;RP0=0, select bank0
   796  01F7  1303               	bcf	3,6	;RP1=0, select bank0
   797  01F8  128C               	bcf	12,5	;volatile
   798  01F9                     l1178:
   799                           
   800                           ;../Master.X/usart.c: 29:     INTCONbits.PEIE = 1;
   801  01F9  170B               	bsf	11,6	;volatile
   802  01FA                     l1180:
   803                           
   804                           ;../Master.X/usart.c: 30:     INTCONbits.GIE = 1;
   805  01FA  178B               	bsf	11,7	;volatile
   806  01FB                     l79:
   807  01FB  0008               	return
   808  01FC                     __end_of_usart_init:
   809                           
   810                           	psect	text2
   811  0108                     __ptext2:	
   812 ;; *************** function ___aldiv *****************
   813 ;; Defined at:
   814 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\aldiv.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;  divisor         4   18[BANK0 ] long 
   817 ;;  dividend        4   22[BANK0 ] long 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  quotient        4   29[BANK0 ] long 
   820 ;;  sign            1   28[BANK0 ] unsigned char 
   821 ;;  counter         1   27[BANK0 ] unsigned char 
   822 ;; Return value:  Size  Location     Type
   823 ;;                  4   18[BANK0 ] long 
   824 ;; Registers used:
   825 ;;		wreg, status,2, status,0, btemp+1
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   831 ;;      Params:         0       8       0       0       0
   832 ;;      Locals:         0       6       0       0       0
   833 ;;      Temps:          0       1       0       0       0
   834 ;;      Totals:         0      15       0       0       0
   835 ;;Total ram usage:       15 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    4
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_usart_init
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           
   846                           ;psect for function ___aldiv
   847  0108                     ___aldiv:
   848  0108                     l1108:	
   849                           ;incstack = 0
   850                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   851                           
   852  0108  1283               	bcf	3,5	;RP0=0, select bank0
   853  0109  1303               	bcf	3,6	;RP1=0, select bank0
   854  010A  01BC               	clrf	___aldiv@sign
   855  010B                     l1110:
   856  010B  1FB5               	btfss	___aldiv@divisor+3,7
   857  010C  290E               	goto	u591
   858  010D  290F               	goto	u590
   859  010E                     u591:
   860  010E  291C               	goto	l280
   861  010F                     u590:
   862  010F                     l1112:
   863  010F  09B2               	comf	___aldiv@divisor,f
   864  0110  09B3               	comf	___aldiv@divisor+1,f
   865  0111  09B4               	comf	___aldiv@divisor+2,f
   866  0112  09B5               	comf	___aldiv@divisor+3,f
   867  0113  0AB2               	incf	___aldiv@divisor,f
   868  0114  1903               	skipnz
   869  0115  0AB3               	incf	___aldiv@divisor+1,f
   870  0116  1903               	skipnz
   871  0117  0AB4               	incf	___aldiv@divisor+2,f
   872  0118  1903               	skipnz
   873  0119  0AB5               	incf	___aldiv@divisor+3,f
   874  011A  01BC               	clrf	___aldiv@sign
   875  011B  0ABC               	incf	___aldiv@sign,f
   876  011C                     l280:
   877  011C  1FB9               	btfss	___aldiv@dividend+3,7
   878  011D  291F               	goto	u601
   879  011E  2920               	goto	u600
   880  011F                     u601:
   881  011F  292F               	goto	l1118
   882  0120                     u600:
   883  0120                     l1114:
   884  0120  09B6               	comf	___aldiv@dividend,f
   885  0121  09B7               	comf	___aldiv@dividend+1,f
   886  0122  09B8               	comf	___aldiv@dividend+2,f
   887  0123  09B9               	comf	___aldiv@dividend+3,f
   888  0124  0AB6               	incf	___aldiv@dividend,f
   889  0125  1903               	skipnz
   890  0126  0AB7               	incf	___aldiv@dividend+1,f
   891  0127  1903               	skipnz
   892  0128  0AB8               	incf	___aldiv@dividend+2,f
   893  0129  1903               	skipnz
   894  012A  0AB9               	incf	___aldiv@dividend+3,f
   895  012B                     l1116:
   896  012B  3001               	movlw	1
   897  012C  00FF               	movwf	btemp+1
   898  012D  087F               	movf	btemp+1,w
   899  012E  06BC               	xorwf	___aldiv@sign,f
   900  012F                     l1118:
   901  012F  3000               	movlw	0
   902  0130  00C0               	movwf	___aldiv@quotient+3
   903  0131  3000               	movlw	0
   904  0132  00BF               	movwf	___aldiv@quotient+2
   905  0133  3000               	movlw	0
   906  0134  00BE               	movwf	___aldiv@quotient+1
   907  0135  3000               	movlw	0
   908  0136  00BD               	movwf	___aldiv@quotient
   909  0137                     l1120:
   910  0137  0835               	movf	___aldiv@divisor+3,w
   911  0138  0434               	iorwf	___aldiv@divisor+2,w
   912  0139  0433               	iorwf	___aldiv@divisor+1,w
   913  013A  0432               	iorwf	___aldiv@divisor,w
   914  013B  1903               	skipnz
   915  013C  293E               	goto	u611
   916  013D  293F               	goto	u610
   917  013E                     u611:
   918  013E  298C               	goto	l1142
   919  013F                     u610:
   920  013F                     l1122:
   921  013F  01BB               	clrf	___aldiv@counter
   922  0140  0ABB               	incf	___aldiv@counter,f
   923  0141  294F               	goto	l1128
   924  0142                     l1124:
   925  0142  3001               	movlw	1
   926  0143  00BA               	movwf	??___aldiv
   927  0144                     u625:
   928  0144  1003               	clrc
   929  0145  0DB2               	rlf	___aldiv@divisor,f
   930  0146  0DB3               	rlf	___aldiv@divisor+1,f
   931  0147  0DB4               	rlf	___aldiv@divisor+2,f
   932  0148  0DB5               	rlf	___aldiv@divisor+3,f
   933  0149  0BBA               	decfsz	??___aldiv,f
   934  014A  2944               	goto	u625
   935  014B                     l1126:
   936  014B  3001               	movlw	1
   937  014C  00FF               	movwf	btemp+1
   938  014D  087F               	movf	btemp+1,w
   939  014E  07BB               	addwf	___aldiv@counter,f
   940  014F                     l1128:
   941  014F  1FB5               	btfss	___aldiv@divisor+3,7
   942  0150  2952               	goto	u631
   943  0151  2953               	goto	u630
   944  0152                     u631:
   945  0152  2942               	goto	l1124
   946  0153                     u630:
   947  0153                     l1130:
   948  0153  3001               	movlw	1
   949  0154  00BA               	movwf	??___aldiv
   950  0155                     u645:
   951  0155  1003               	clrc
   952  0156  0DBD               	rlf	___aldiv@quotient,f
   953  0157  0DBE               	rlf	___aldiv@quotient+1,f
   954  0158  0DBF               	rlf	___aldiv@quotient+2,f
   955  0159  0DC0               	rlf	___aldiv@quotient+3,f
   956  015A  0BBA               	decfsz	??___aldiv,f
   957  015B  2955               	goto	u645
   958  015C                     l1132:
   959  015C  0835               	movf	___aldiv@divisor+3,w
   960  015D  0239               	subwf	___aldiv@dividend+3,w
   961  015E  1D03               	skipz
   962  015F  296A               	goto	u655
   963  0160  0834               	movf	___aldiv@divisor+2,w
   964  0161  0238               	subwf	___aldiv@dividend+2,w
   965  0162  1D03               	skipz
   966  0163  296A               	goto	u655
   967  0164  0833               	movf	___aldiv@divisor+1,w
   968  0165  0237               	subwf	___aldiv@dividend+1,w
   969  0166  1D03               	skipz
   970  0167  296A               	goto	u655
   971  0168  0832               	movf	___aldiv@divisor,w
   972  0169  0236               	subwf	___aldiv@dividend,w
   973  016A                     u655:
   974  016A  1C03               	skipc
   975  016B  296D               	goto	u651
   976  016C  296E               	goto	u650
   977  016D                     u651:
   978  016D  297D               	goto	l1138
   979  016E                     u650:
   980  016E                     l1134:
   981  016E  0832               	movf	___aldiv@divisor,w
   982  016F  02B6               	subwf	___aldiv@dividend,f
   983  0170  0833               	movf	___aldiv@divisor+1,w
   984  0171  1C03               	skipc
   985  0172  0F33               	incfsz	___aldiv@divisor+1,w
   986  0173  02B7               	subwf	___aldiv@dividend+1,f
   987  0174  0834               	movf	___aldiv@divisor+2,w
   988  0175  1C03               	skipc
   989  0176  0F34               	incfsz	___aldiv@divisor+2,w
   990  0177  02B8               	subwf	___aldiv@dividend+2,f
   991  0178  0835               	movf	___aldiv@divisor+3,w
   992  0179  1C03               	skipc
   993  017A  0F35               	incfsz	___aldiv@divisor+3,w
   994  017B  02B9               	subwf	___aldiv@dividend+3,f
   995  017C                     l1136:
   996  017C  143D               	bsf	___aldiv@quotient,0
   997  017D                     l1138:
   998  017D  3001               	movlw	1
   999  017E                     u665:
  1000  017E  1003               	clrc
  1001  017F  0CB5               	rrf	___aldiv@divisor+3,f
  1002  0180  0CB4               	rrf	___aldiv@divisor+2,f
  1003  0181  0CB3               	rrf	___aldiv@divisor+1,f
  1004  0182  0CB2               	rrf	___aldiv@divisor,f
  1005  0183  3EFF               	addlw	-1
  1006  0184  1D03               	skipz
  1007  0185  297E               	goto	u665
  1008  0186                     l1140:
  1009  0186  3001               	movlw	1
  1010  0187  02BB               	subwf	___aldiv@counter,f
  1011  0188  1D03               	btfss	3,2
  1012  0189  298B               	goto	u671
  1013  018A  298C               	goto	u670
  1014  018B                     u671:
  1015  018B  2953               	goto	l1130
  1016  018C                     u670:
  1017  018C                     l1142:
  1018  018C  083C               	movf	___aldiv@sign,w
  1019  018D  1903               	btfsc	3,2
  1020  018E  2990               	goto	u681
  1021  018F  2991               	goto	u680
  1022  0190                     u681:
  1023  0190  299C               	goto	l1146
  1024  0191                     u680:
  1025  0191                     l1144:
  1026  0191  09BD               	comf	___aldiv@quotient,f
  1027  0192  09BE               	comf	___aldiv@quotient+1,f
  1028  0193  09BF               	comf	___aldiv@quotient+2,f
  1029  0194  09C0               	comf	___aldiv@quotient+3,f
  1030  0195  0ABD               	incf	___aldiv@quotient,f
  1031  0196  1903               	skipnz
  1032  0197  0ABE               	incf	___aldiv@quotient+1,f
  1033  0198  1903               	skipnz
  1034  0199  0ABF               	incf	___aldiv@quotient+2,f
  1035  019A  1903               	skipnz
  1036  019B  0AC0               	incf	___aldiv@quotient+3,f
  1037  019C                     l1146:
  1038  019C  0840               	movf	___aldiv@quotient+3,w
  1039  019D  00B5               	movwf	?___aldiv+3
  1040  019E  083F               	movf	___aldiv@quotient+2,w
  1041  019F  00B4               	movwf	?___aldiv+2
  1042  01A0  083E               	movf	___aldiv@quotient+1,w
  1043  01A1  00B3               	movwf	?___aldiv+1
  1044  01A2  083D               	movf	___aldiv@quotient,w
  1045  01A3  00B2               	movwf	?___aldiv
  1046  01A4                     l290:
  1047  01A4  0008               	return
  1048  01A5                     __end_of___aldiv:
  1049                           
  1050                           	psect	text3
  1051  0330                     __ptext3:	
  1052 ;; *************** function _usart_Tx *****************
  1053 ;; Defined at:
  1054 ;;		line 34 in file "../Master.X/usart.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  send            1    wreg     unsigned char 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  send            1   18[BANK0 ] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1068 ;;      Params:         0       0       0       0       0
  1069 ;;      Locals:         0       1       0       0       0
  1070 ;;      Temps:          0       0       0       0       0
  1071 ;;      Totals:         0       1       0       0       0
  1072 ;;Total ram usage:        1 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    4
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           
  1083                           ;psect for function _usart_Tx
  1084  0330                     _usart_Tx:
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _usart_Tx: [wreg]
  1088                           ;usart_Tx@send stored from wreg
  1089  0330  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0332  00B2               	movwf	usart_Tx@send
  1092  0333                     l1182:
  1093                           
  1094                           ;../Master.X/usart.c: 35:     TXREG = send;
  1095  0333  0832               	movf	usart_Tx@send,w
  1096  0334  0099               	movwf	25	;volatile
  1097  0335                     l82:	
  1098                           ;../Master.X/usart.c: 36:     while (!TXSTAbits.TRMT);
  1099                           
  1100  0335  1683               	bsf	3,5	;RP0=1, select bank1
  1101  0336  1303               	bcf	3,6	;RP1=0, select bank1
  1102  0337  1C98               	btfss	24,1	;volatile
  1103  0338  2B3A               	goto	u691
  1104  0339  2B3B               	goto	u690
  1105  033A                     u691:
  1106  033A  2B35               	goto	l82
  1107  033B                     u690:
  1108  033B                     l85:
  1109  033B  0008               	return
  1110  033C                     __end_of_usart_Tx:
  1111                           
  1112                           	psect	text4
  1113  02C7                     __ptext4:	
  1114 ;; *************** function _blink *****************
  1115 ;; Defined at:
  1116 ;;		line 46 in file "main.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1130 ;;      Params:         0       0       0       0       0
  1131 ;;      Locals:         0       0       0       0       0
  1132 ;;      Temps:          0       3       0       0       0
  1133 ;;      Totals:         0       3       0       0       0
  1134 ;;Total ram usage:        3 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    4
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _blink
  1146  02C7                     _blink:
  1147  02C7                     l1184:	
  1148                           ;incstack = 0
  1149                           ; Regs used in _blink: [wreg]
  1150                           
  1151                           
  1152                           ;main.c: 47:     PORTDbits.RD0 = 1;
  1153  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1154  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1155  02C9  1408               	bsf	8,0	;volatile
  1156  02CA                     l1186:
  1157                           
  1158                           ;main.c: 48:     _delay((unsigned long)((100)*(20000000/4000.0)));
  1159  02CA  3003               	movlw	3
  1160  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  1161  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  1162  02CD  00B4               	movwf	??_blink+2
  1163  02CE  308A               	movlw	138
  1164  02CF  00B3               	movwf	??_blink+1
  1165  02D0  3055               	movlw	85
  1166  02D1  00B2               	movwf	??_blink
  1167  02D2                     u717:
  1168  02D2  0BB2               	decfsz	??_blink,f
  1169  02D3  2AD2               	goto	u717
  1170  02D4  0BB3               	decfsz	??_blink+1,f
  1171  02D5  2AD2               	goto	u717
  1172  02D6  0BB4               	decfsz	??_blink+2,f
  1173  02D7  2AD2               	goto	u717
  1174  02D8                     l1188:
  1175                           
  1176                           ;main.c: 49:     PORTDbits.RD0 = 0;
  1177  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  1178  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  1179  02DA  1008               	bcf	8,0	;volatile
  1180                           
  1181                           ;main.c: 50:     _delay((unsigned long)((100)*(20000000/4000.0)));
  1182  02DB  3003               	movlw	3
  1183  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  1184  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  1185  02DE  00B4               	movwf	??_blink+2
  1186  02DF  308A               	movlw	138
  1187  02E0  00B3               	movwf	??_blink+1
  1188  02E1  3055               	movlw	85
  1189  02E2  00B2               	movwf	??_blink
  1190  02E3                     u727:
  1191  02E3  0BB2               	decfsz	??_blink,f
  1192  02E4  2AE3               	goto	u727
  1193  02E5  0BB3               	decfsz	??_blink+1,f
  1194  02E6  2AE3               	goto	u727
  1195  02E7  0BB4               	decfsz	??_blink+2,f
  1196  02E8  2AE3               	goto	u727
  1197  02E9                     l56:
  1198  02E9  0008               	return
  1199  02EA                     __end_of_blink:
  1200                           
  1201                           	psect	text5
  1202  02A1                     __ptext5:	
  1203 ;; *************** function _ISR *****************
  1204 ;; Defined at:
  1205 ;;		line 13 in file "main.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;		None
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;		None
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1219 ;;      Params:         0       0       0       0       0
  1220 ;;      Locals:         0       0       0       0       0
  1221 ;;      Temps:          0       4       0       0       0
  1222 ;;      Totals:         0       4       0       0       0
  1223 ;;Total ram usage:        4 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    3
  1226 ;; This function calls:
  1227 ;;		_enviarDato
  1228 ;;		_usart_Rx
  1229 ;; This function is called by:
  1230 ;;		Interrupt level 1
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           
  1235                           ;psect for function _ISR
  1236  02A1                     _ISR:
  1237  02A1                     i1l1190:
  1238                           
  1239                           ;main.c: 14:     INTCONbits.GIE = 0;
  1240  02A1  138B               	bcf	11,7	;volatile
  1241  02A2                     i1l1192:
  1242                           
  1243                           ;main.c: 15:     chra = usart_Rx();
  1244  02A2  120A  118A  2348  120A  118A  	fcall	_usart_Rx
  1245  02A7  00FF               	movwf	btemp+1
  1246  02A8  087F               	movf	btemp+1,w
  1247  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  1248  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  1249  02AB  00C9               	movwf	_chra
  1250  02AC                     i1l1194:
  1251                           
  1252                           ;main.c: 16:     if(chra == 'a'){
  1253  02AC  3061               	movlw	97
  1254  02AD  0649               	xorwf	_chra,w
  1255  02AE  1D03               	btfss	3,2
  1256  02AF  2AB1               	goto	u70_21
  1257  02B0  2AB2               	goto	u70_20
  1258  02B1                     u70_21:
  1259  02B1  2AB8               	goto	i1l1198
  1260  02B2                     u70_20:
  1261  02B2                     i1l1196:
  1262                           
  1263                           ;main.c: 17:         enviarDato(PORTB);
  1264  02B2  0806               	movf	6,w	;volatile
  1265  02B3  120A  118A  22EA  120A  118A  	fcall	_enviarDato
  1266  02B8                     i1l1198:
  1267                           
  1268                           ;main.c: 19:     PIR1bits.RCIF = 0;
  1269  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1270  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1271  02BA  128C               	bcf	12,5	;volatile
  1272  02BB                     i1l1200:
  1273                           
  1274                           ;main.c: 20:     INTCONbits.GIE = 1;
  1275  02BB  178B               	bsf	11,7	;volatile
  1276  02BC                     i1l40:
  1277  02BC  0831               	movf	??_ISR+3,w
  1278  02BD  00FF               	movwf	btemp+1
  1279  02BE  0830               	movf	??_ISR+2,w
  1280  02BF  008A               	movwf	10
  1281  02C0  082F               	movf	??_ISR+1,w
  1282  02C1  0084               	movwf	4
  1283  02C2  0E2E               	swapf	??_ISR^0,w
  1284  02C3  0083               	movwf	3
  1285  02C4  0EFE               	swapf	btemp,f
  1286  02C5  0E7E               	swapf	btemp,w
  1287  02C6  0009               	retfie
  1288  02C7                     __end_of_ISR:
  1289                           
  1290                           	psect	intentry
  1291  0004                     __pintentry:	
  1292                           ;incstack = 0
  1293                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1294                           
  1295  0004                     interrupt_function:
  1296  007E                     saved_w	set	btemp
  1297  0004  00FE               	movwf	btemp
  1298  0005  0E03               	swapf	3,w
  1299  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0008  00AE               	movwf	??_ISR
  1302  0009  0804               	movf	4,w
  1303  000A  00AF               	movwf	??_ISR+1
  1304  000B  080A               	movf	10,w
  1305  000C  00B0               	movwf	??_ISR+2
  1306  000D  087F               	movf	btemp+1,w
  1307  000E  00B1               	movwf	??_ISR+3
  1308  000F  120A  118A  2AA1   	ljmp	_ISR
  1309                           
  1310                           	psect	text6
  1311  0348                     __ptext6:	
  1312 ;; *************** function _usart_Rx *****************
  1313 ;; Defined at:
  1314 ;;		line 40 in file "../Master.X/usart.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      unsigned char 
  1321 ;; Registers used:
  1322 ;;		wreg
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1328 ;;      Params:         0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_ISR
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _usart_Rx
  1343  0348                     _usart_Rx:
  1344  0348                     i1l1150:	
  1345                           ;incstack = 0
  1346                           ; Regs used in _usart_Rx: [wreg]
  1347                           
  1348                           
  1349                           ;../Master.X/usart.c: 41:     return RCREG;
  1350  0348  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0349  1303               	bcf	3,6	;RP1=0, select bank0
  1352  034A  081A               	movf	26,w	;volatile
  1353  034B                     i1l88:
  1354  034B  0008               	return
  1355  034C                     __end_of_usart_Rx:
  1356                           
  1357                           	psect	text7
  1358  02EA                     __ptext7:	
  1359 ;; *************** function _enviarDato *****************
  1360 ;; Defined at:
  1361 ;;		line 40 in file "main.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  entero          1    wreg     unsigned char 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  entero          1   13[BANK0 ] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1375 ;;      Params:         0       0       0       0       0
  1376 ;;      Locals:         0       1       0       0       0
  1377 ;;      Temps:          2       0       0       0       0
  1378 ;;      Totals:         2       1       0       0       0
  1379 ;;Total ram usage:        3 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    2
  1382 ;; This function calls:
  1383 ;;		_sprintf
  1384 ;;		_usart_TxStr
  1385 ;; This function is called by:
  1386 ;;		_ISR
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           
  1391                           ;psect for function _enviarDato
  1392  02EA                     _enviarDato:
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _enviarDato: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1396                           ;enviarDato@entero stored from wreg
  1397  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  1398  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  1399  02EC  00AD               	movwf	enviarDato@entero
  1400  02ED                     i1l1154:
  1401                           
  1402                           ;main.c: 41:     sprintf(buffer, "%d\n", entero);
  1403  02ED  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1404  02EE  00FF               	movwf	btemp+1
  1405  02EF  087F               	movf	btemp+1,w
  1406  02F0  00A0               	movwf	sprintf@f
  1407  02F1  082D               	movf	enviarDato@entero,w
  1408  02F2  00FC               	movwf	??_enviarDato
  1409  02F3  01FD               	clrf	??_enviarDato+1
  1410  02F4  087C               	movf	??_enviarDato,w
  1411  02F5  00A1               	movwf	?_sprintf+1
  1412  02F6  087D               	movf	??_enviarDato+1,w
  1413  02F7  00A2               	movwf	?_sprintf+2
  1414  02F8  304A               	movlw	(low (_buffer| 0))& (0+255)
  1415  02F9  120A  118A  2020  120A  118A  	fcall	_sprintf
  1416                           
  1417                           ;main.c: 42:     usart_TxStr(buffer);
  1418  02FE  304A               	movlw	(low (_buffer| 0))& (0+255)
  1419  02FF  120A  118A  2305  120A  118A  	fcall	_usart_TxStr
  1420  0304                     i1l53:
  1421  0304  0008               	return
  1422  0305                     __end_of_enviarDato:
  1423                           
  1424                           	psect	text8
  1425  0305                     __ptext8:	
  1426 ;; *************** function _usart_TxStr *****************
  1427 ;; Defined at:
  1428 ;;		line 44 in file "../Master.X/usart.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  str             1    wreg     PTR unsigned char 
  1431 ;;		 -> buffer(4), 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  str             1    1[COMMON] PTR unsigned char 
  1434 ;;		 -> buffer(4), 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1444 ;;      Params:         0       0       0       0       0
  1445 ;;      Locals:         1       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0
  1447 ;;      Totals:         1       0       0       0       0
  1448 ;;Total ram usage:        1 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    1
  1451 ;; This function calls:
  1452 ;;		i1_usart_Tx
  1453 ;; This function is called by:
  1454 ;;		_enviarDato
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           
  1459                           ;psect for function _usart_TxStr
  1460  0305                     _usart_TxStr:
  1461                           
  1462                           ;incstack = 0
  1463                           ; Regs used in _usart_TxStr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1464                           ;usart_TxStr@str stored from wreg
  1465  0305  00F1               	movwf	usart_TxStr@str
  1466  0306                     i1l1100:
  1467                           
  1468                           ;../Master.X/usart.c: 45:     while(*str != '\0'){
  1469  0306  2B13               	goto	i1l1106
  1470  0307                     i1l1102:
  1471                           
  1472                           ;../Master.X/usart.c: 46:         usart_Tx(*str);
  1473  0307  0871               	movf	usart_TxStr@str,w
  1474  0308  0084               	movwf	4
  1475  0309  0800               	movf	0,w
  1476  030A  120A  118A  233C  120A  118A  	fcall	i1_usart_Tx
  1477  030F                     i1l1104:
  1478                           
  1479                           ;../Master.X/usart.c: 47:         str++;
  1480  030F  3001               	movlw	1
  1481  0310  00FF               	movwf	btemp+1
  1482  0311  087F               	movf	btemp+1,w
  1483  0312  07F1               	addwf	usart_TxStr@str,f
  1484  0313                     i1l1106:
  1485                           
  1486                           ;../Master.X/usart.c: 45:     while(*str != '\0'){
  1487  0313  0871               	movf	usart_TxStr@str,w
  1488  0314  0084               	movwf	4
  1489  0315  1383               	bcf	3,7	;select IRP bank0
  1490  0316  0800               	movf	0,w
  1491  0317  1D03               	btfss	3,2
  1492  0318  2B1A               	goto	u58_21
  1493  0319  2B1B               	goto	u58_20
  1494  031A                     u58_21:
  1495  031A  2B07               	goto	i1l1102
  1496  031B                     u58_20:
  1497  031B                     i1l94:
  1498  031B  0008               	return
  1499  031C                     __end_of_usart_TxStr:
  1500                           
  1501                           	psect	text9
  1502  033C                     __ptext9:	
  1503 ;; *************** function i1_usart_Tx *****************
  1504 ;; Defined at:
  1505 ;;		line 34 in file "../Master.X/usart.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  send            1    wreg     unsigned char 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  send            1    0[COMMON] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1519 ;;      Params:         0       0       0       0       0
  1520 ;;      Locals:         1       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0
  1522 ;;      Totals:         1       0       0       0       0
  1523 ;;Total ram usage:        1 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_usart_TxStr
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           
  1533                           ;psect for function i1_usart_Tx
  1534  033C                     i1_usart_Tx:
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in i1_usart_Tx: [wreg]
  1538                           ;i1usart_Tx@send stored from wreg
  1539  033C  00F0               	movwf	i1usart_Tx@send
  1540  033D                     i1l1034:
  1541                           
  1542                           ;../Master.X/usart.c: 35:     TXREG = send;
  1543  033D  0870               	movf	i1usart_Tx@send,w
  1544  033E  1283               	bcf	3,5	;RP0=0, select bank0
  1545  033F  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0340  0099               	movwf	25	;volatile
  1547  0341                     i1l82:	
  1548                           ;../Master.X/usart.c: 36:     while (!TXSTAbits.TRMT);
  1549                           
  1550  0341  1683               	bsf	3,5	;RP0=1, select bank1
  1551  0342  1303               	bcf	3,6	;RP1=0, select bank1
  1552  0343  1C98               	btfss	24,1	;volatile
  1553  0344  2B46               	goto	u50_21
  1554  0345  2B47               	goto	u50_20
  1555  0346                     u50_21:
  1556  0346  2B41               	goto	i1l82
  1557  0347                     u50_20:
  1558  0347                     i1l85:
  1559  0347  0008               	return
  1560  0348                     __end_ofi1_usart_Tx:
  1561                           
  1562                           	psect	text10
  1563  0020                     __ptext10:	
  1564 ;; *************** function _sprintf *****************
  1565 ;; Defined at:
  1566 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;  sp              1    wreg     PTR unsigned char 
  1569 ;;		 -> buffer(4), 
  1570 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1571 ;;		 -> STR_1(4), 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1574 ;;		 -> buffer(4), 
  1575 ;;  tmpval          4    0        struct .
  1576 ;;  val             2    9[BANK0 ] unsigned int 
  1577 ;;  cp              2    0        PTR const unsigned char 
  1578 ;;  len             2    0        unsigned int 
  1579 ;;  c               1   12[BANK0 ] unsigned char 
  1580 ;;  prec            1    8[BANK0 ] char 
  1581 ;;  flag            1    7[BANK0 ] unsigned char 
  1582 ;;  ap              1    6[BANK0 ] PTR void [1]
  1583 ;;		 -> ?_sprintf(2), 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  2    0[BANK0 ] int 
  1586 ;; Registers used:
  1587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1593 ;;      Params:         0       3       0       0       0
  1594 ;;      Locals:         0       7       0       0       0
  1595 ;;      Temps:          0       3       0       0       0
  1596 ;;      Totals:         0      13       0       0       0
  1597 ;;Total ram usage:       13 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    1
  1600 ;; This function calls:
  1601 ;;		___lwdiv
  1602 ;;		___lwmod
  1603 ;; This function is called by:
  1604 ;;		_enviarDato
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _sprintf
  1610  0020                     _sprintf:
  1611                           
  1612                           ;incstack = 0
  1613                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1614                           ;sprintf@sp stored from wreg
  1615  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0022  00AB               	movwf	sprintf@sp
  1618  0023                     i1l1036:
  1619                           
  1620                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1621  0023  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1622  0024  00FF               	movwf	btemp+1
  1623  0025  087F               	movf	btemp+1,w
  1624  0026  00A6               	movwf	sprintf@ap
  1625                           
  1626                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1627  0027  28F1               	goto	i1l1090
  1628  0028                     i1l1038:
  1629                           
  1630                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1631  0028  3025               	movlw	37
  1632  0029  062C               	xorwf	sprintf@c,w
  1633  002A  1903               	btfsc	3,2
  1634  002B  282D               	goto	u51_21
  1635  002C  282E               	goto	u51_20
  1636  002D                     u51_21:
  1637  002D  283A               	goto	i1l1044
  1638  002E                     u51_20:
  1639  002E                     i1l1040:
  1640                           
  1641                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1642  002E  082C               	movf	sprintf@c,w
  1643  002F  00FF               	movwf	btemp+1
  1644  0030  082B               	movf	sprintf@sp,w
  1645  0031  0084               	movwf	4
  1646  0032  087F               	movf	btemp+1,w
  1647  0033  1383               	bcf	3,7	;select IRP bank0
  1648  0034  0080               	movwf	0
  1649  0035                     i1l1042:
  1650  0035  3001               	movlw	1
  1651  0036  00FF               	movwf	btemp+1
  1652  0037  087F               	movf	btemp+1,w
  1653  0038  07AB               	addwf	sprintf@sp,f
  1654                           
  1655                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 559:    continue;
  1656  0039  28F1               	goto	i1l1090
  1657  003A                     i1l1044:
  1658                           
  1659                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1660  003A  01A7               	clrf	sprintf@flag
  1661  003B                     i1l1048:	
  1662                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1663                           
  1664  003B  3001               	movlw	1
  1665  003C  07A0               	addwf	sprintf@f,f
  1666  003D  30FF               	movlw	-1
  1667  003E  0720               	addwf	sprintf@f,w
  1668  003F  0084               	movwf	4
  1669  0040  120A  118A  231C  120A  118A  	fcall	stringdir
  1670  0045  00AC               	movwf	sprintf@c
  1671  0046  00A3               	movwf	??_sprintf
  1672  0047  01A4               	clrf	??_sprintf+1
  1673                           
  1674                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1675                           ; Switch size 1, requested type "simple"
  1676                           ; Number of cases is 1, Range of values is 0 to 0
  1677                           ; switch strategies available:
  1678                           ; Name         Instructions Cycles
  1679                           ; simple_byte            4     3 (average)
  1680                           ; direct_byte           11     8 (fixed)
  1681                           ; jumptable            260     6 (fixed)
  1682                           ;	Chosen strategy is simple_byte
  1683  0048  0824               	movf	??_sprintf+1,w
  1684  0049  3A00               	xorlw	0	; case 0
  1685  004A  1903               	skipnz
  1686  004B  284D               	goto	i1l1236
  1687  004C  28F1               	goto	i1l1090
  1688  004D                     i1l1236:
  1689                           
  1690                           ; Switch size 1, requested type "simple"
  1691                           ; Number of cases is 3, Range of values is 0 to 105
  1692                           ; switch strategies available:
  1693                           ; Name         Instructions Cycles
  1694                           ; simple_byte           10     6 (average)
  1695                           ; jumptable            260     6 (fixed)
  1696                           ;	Chosen strategy is simple_byte
  1697  004D  0823               	movf	??_sprintf,w
  1698  004E  3A00               	xorlw	0	; case 0
  1699  004F  1903               	skipnz
  1700  0050  2903               	goto	i1l1092
  1701  0051  3A64               	xorlw	100	; case 100
  1702  0052  1903               	skipnz
  1703  0053  2858               	goto	i1l1050
  1704  0054  3A0D               	xorlw	13	; case 105
  1705  0055  1903               	skipnz
  1706  0056  2858               	goto	i1l1050
  1707  0057  28F1               	goto	i1l1090
  1708  0058                     i1l1050:
  1709                           
  1710                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1711  0058  0826               	movf	sprintf@ap,w
  1712  0059  0084               	movwf	4
  1713  005A  1383               	bcf	3,7	;select IRP bank0
  1714  005B  0800               	movf	0,w
  1715  005C  00A9               	movwf	sprintf@val
  1716  005D  0A84               	incf	4,f
  1717  005E  0800               	movf	0,w
  1718  005F  00AA               	movwf	sprintf@val+1
  1719  0060                     i1l1052:
  1720  0060  3002               	movlw	2
  1721  0061  00FF               	movwf	btemp+1
  1722  0062  087F               	movf	btemp+1,w
  1723  0063  07A6               	addwf	sprintf@ap,f
  1724  0064                     i1l1054:
  1725                           
  1726                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1727  0064  1FAA               	btfss	sprintf@val+1,7
  1728  0065  2867               	goto	u52_21
  1729  0066  2868               	goto	u52_20
  1730  0067                     u52_21:
  1731  0067  2871               	goto	i1l1060
  1732  0068                     u52_20:
  1733  0068                     i1l1056:
  1734                           
  1735                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1736  0068  3003               	movlw	3
  1737  0069  00FF               	movwf	btemp+1
  1738  006A  087F               	movf	btemp+1,w
  1739  006B  04A7               	iorwf	sprintf@flag,f
  1740  006C                     i1l1058:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1743  006C  09A9               	comf	sprintf@val,f
  1744  006D  09AA               	comf	sprintf@val+1,f
  1745  006E  0AA9               	incf	sprintf@val,f
  1746  006F  1903               	skipnz
  1747  0070  0AAA               	incf	sprintf@val+1,f
  1748  0071                     i1l1060:
  1749                           
  1750                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1751  0071  01AC               	clrf	sprintf@c
  1752  0072  0AAC               	incf	sprintf@c,f
  1753  0073                     i1l1066:
  1754                           
  1755                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1756  0073  082C               	movf	sprintf@c,w
  1757  0074  00A3               	movwf	??_sprintf
  1758  0075  0723               	addwf	??_sprintf,w
  1759  0076  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1760  0077  0084               	movwf	4
  1761  0078  120A  118A  231C  120A  118A  	fcall	stringdir
  1762  007D  00A4               	movwf	??_sprintf+1
  1763  007E  120A  118A  231C  120A  118A  	fcall	stringdir
  1764  0083  00A5               	movwf	??_sprintf+2
  1765  0084  0825               	movf	??_sprintf+2,w
  1766  0085  022A               	subwf	sprintf@val+1,w
  1767  0086  1D03               	skipz
  1768  0087  288A               	goto	u53_25
  1769  0088  0824               	movf	??_sprintf+1,w
  1770  0089  0229               	subwf	sprintf@val,w
  1771  008A                     u53_25:
  1772  008A  1803               	skipnc
  1773  008B  288D               	goto	u53_21
  1774  008C  288E               	goto	u53_20
  1775  008D                     u53_21:
  1776  008D  288F               	goto	i1l1070
  1777  008E                     u53_20:
  1778  008E  2899               	goto	i1l1074
  1779  008F                     i1l1070:
  1780  008F  3001               	movlw	1
  1781  0090  00FF               	movwf	btemp+1
  1782  0091  087F               	movf	btemp+1,w
  1783  0092  07AC               	addwf	sprintf@c,f
  1784  0093                     i1l1072:
  1785  0093  3005               	movlw	5
  1786  0094  062C               	xorwf	sprintf@c,w
  1787  0095  1D03               	btfss	3,2
  1788  0096  2898               	goto	u54_21
  1789  0097  2899               	goto	u54_20
  1790  0098                     u54_21:
  1791  0098  2873               	goto	i1l1066
  1792  0099                     u54_20:
  1793  0099                     i1l1074:
  1794                           
  1795                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1796  0099  0827               	movf	sprintf@flag,w
  1797  009A  3903               	andlw	3
  1798  009B  1903               	btfsc	3,2
  1799  009C  289E               	goto	u55_21
  1800  009D  289F               	goto	u55_20
  1801  009E                     u55_21:
  1802  009E  28AA               	goto	i1l1080
  1803  009F                     u55_20:
  1804  009F                     i1l1076:
  1805                           
  1806                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1807  009F  302D               	movlw	45
  1808  00A0  00FF               	movwf	btemp+1
  1809  00A1  082B               	movf	sprintf@sp,w
  1810  00A2  0084               	movwf	4
  1811  00A3  087F               	movf	btemp+1,w
  1812  00A4  1383               	bcf	3,7	;select IRP bank0
  1813  00A5  0080               	movwf	0
  1814  00A6                     i1l1078:
  1815  00A6  3001               	movlw	1
  1816  00A7  00FF               	movwf	btemp+1
  1817  00A8  087F               	movf	btemp+1,w
  1818  00A9  07AB               	addwf	sprintf@sp,f
  1819  00AA                     i1l1080:
  1820                           
  1821                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1822  00AA  082C               	movf	sprintf@c,w
  1823  00AB  00FF               	movwf	btemp+1
  1824  00AC  087F               	movf	btemp+1,w
  1825  00AD  00A8               	movwf	sprintf@prec
  1826                           
  1827                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1828  00AE  28E8               	goto	i1l1088
  1829  00AF                     i1l1082:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1832  00AF  300A               	movlw	10
  1833  00B0  00F7               	movwf	___lwmod@divisor
  1834  00B1  3000               	movlw	0
  1835  00B2  00F8               	movwf	___lwmod@divisor+1
  1836  00B3  0828               	movf	sprintf@prec,w
  1837  00B4  00A3               	movwf	??_sprintf
  1838  00B5  0723               	addwf	??_sprintf,w
  1839  00B6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1840  00B7  0084               	movwf	4
  1841  00B8  120A  118A  231C  120A  118A  	fcall	stringdir
  1842  00BD  00F0               	movwf	___lwdiv@divisor
  1843  00BE  120A  118A  231C  120A  118A  	fcall	stringdir
  1844  00C3  00F1               	movwf	___lwdiv@divisor+1
  1845  00C4  082A               	movf	sprintf@val+1,w
  1846  00C5  00F3               	movwf	___lwdiv@dividend+1
  1847  00C6  0829               	movf	sprintf@val,w
  1848  00C7  00F2               	movwf	___lwdiv@dividend
  1849  00C8  120A  118A  21FC  120A  118A  	fcall	___lwdiv
  1850  00CD  0871               	movf	?___lwdiv+1,w
  1851  00CE  00FA               	movwf	___lwmod@dividend+1
  1852  00CF  0870               	movf	?___lwdiv,w
  1853  00D0  00F9               	movwf	___lwmod@dividend
  1854  00D1  120A  118A  2240  120A  118A  	fcall	___lwmod
  1855  00D6  0877               	movf	?___lwmod,w
  1856  00D7  3E30               	addlw	48
  1857  00D8  00FF               	movwf	btemp+1
  1858  00D9  087F               	movf	btemp+1,w
  1859  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1860  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  1861  00DC  00AC               	movwf	sprintf@c
  1862  00DD                     i1l1084:
  1863                           
  1864                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1865  00DD  082C               	movf	sprintf@c,w
  1866  00DE  00FF               	movwf	btemp+1
  1867  00DF  082B               	movf	sprintf@sp,w
  1868  00E0  0084               	movwf	4
  1869  00E1  087F               	movf	btemp+1,w
  1870  00E2  1383               	bcf	3,7	;select IRP bank0
  1871  00E3  0080               	movwf	0
  1872  00E4                     i1l1086:
  1873  00E4  3001               	movlw	1
  1874  00E5  00FF               	movwf	btemp+1
  1875  00E6  087F               	movf	btemp+1,w
  1876  00E7  07AB               	addwf	sprintf@sp,f
  1877  00E8                     i1l1088:
  1878                           
  1879                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1880  00E8  30FF               	movlw	255
  1881  00E9  00FF               	movwf	btemp+1
  1882  00EA  087F               	movf	btemp+1,w
  1883  00EB  07A8               	addwf	sprintf@prec,f
  1884  00EC  0A28               	incf	sprintf@prec,w
  1885  00ED  1D03               	btfss	3,2
  1886  00EE  28F0               	goto	u56_21
  1887  00EF  28F1               	goto	u56_20
  1888  00F0                     u56_21:
  1889  00F0  28AF               	goto	i1l1082
  1890  00F1                     u56_20:
  1891  00F1                     i1l1090:
  1892                           
  1893                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1894  00F1  3001               	movlw	1
  1895  00F2  07A0               	addwf	sprintf@f,f
  1896  00F3  30FF               	movlw	-1
  1897  00F4  0720               	addwf	sprintf@f,w
  1898  00F5  0084               	movwf	4
  1899  00F6  120A  118A  231C  120A  118A  	fcall	stringdir
  1900  00FB  00FF               	movwf	btemp+1
  1901  00FC  087F               	movf	btemp+1,w
  1902  00FD  00AC               	movwf	sprintf@c
  1903  00FE  082C               	movf	sprintf@c,w
  1904  00FF  1D03               	btfss	3,2
  1905  0100  2902               	goto	u57_21
  1906  0101  2903               	goto	u57_20
  1907  0102                     u57_21:
  1908  0102  2828               	goto	i1l1038
  1909  0103                     u57_20:
  1910  0103                     i1l1092:
  1911                           
  1912                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1913  0103  082B               	movf	sprintf@sp,w
  1914  0104  0084               	movwf	4
  1915  0105  1383               	bcf	3,7	;select IRP bank0
  1916  0106  0180               	clrf	0
  1917  0107                     i1l211:
  1918  0107  0008               	return
  1919  0108                     __end_of_sprintf:
  1920                           
  1921                           	psect	text11
  1922  0240                     __ptext11:	
  1923 ;; *************** function ___lwmod *****************
  1924 ;; Defined at:
  1925 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwmod.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  divisor         2    7[COMMON] unsigned int 
  1928 ;;  dividend        2    9[COMMON] unsigned int 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  counter         1   11[COMMON] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  2    7[COMMON] unsigned int 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, btemp+1
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         4       0       0       0       0
  1941 ;;      Locals:         1       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0
  1943 ;;      Totals:         5       0       0       0       0
  1944 ;;Total ram usage:        5 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_sprintf
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           
  1954                           ;psect for function ___lwmod
  1955  0240                     ___lwmod:
  1956  0240                     i1l1012:	
  1957                           ;incstack = 0
  1958                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1959                           
  1960  0240  0877               	movf	___lwmod@divisor,w
  1961  0241  0478               	iorwf	___lwmod@divisor+1,w
  1962  0242  1903               	btfsc	3,2
  1963  0243  2A45               	goto	u44_21
  1964  0244  2A46               	goto	u44_20
  1965  0245                     u44_21:
  1966  0245  2A75               	goto	i1l1030
  1967  0246                     u44_20:
  1968  0246                     i1l1014:
  1969  0246  01FB               	clrf	___lwmod@counter
  1970  0247  0AFB               	incf	___lwmod@counter,f
  1971  0248  2A54               	goto	i1l1020
  1972  0249                     i1l1016:
  1973  0249  3001               	movlw	1
  1974  024A                     u45_25:
  1975  024A  1003               	clrc
  1976  024B  0DF7               	rlf	___lwmod@divisor,f
  1977  024C  0DF8               	rlf	___lwmod@divisor+1,f
  1978  024D  3EFF               	addlw	-1
  1979  024E  1D03               	skipz
  1980  024F  2A4A               	goto	u45_25
  1981  0250                     i1l1018:
  1982  0250  3001               	movlw	1
  1983  0251  00FF               	movwf	btemp+1
  1984  0252  087F               	movf	btemp+1,w
  1985  0253  07FB               	addwf	___lwmod@counter,f
  1986  0254                     i1l1020:
  1987  0254  1FF8               	btfss	___lwmod@divisor+1,7
  1988  0255  2A57               	goto	u46_21
  1989  0256  2A58               	goto	u46_20
  1990  0257                     u46_21:
  1991  0257  2A49               	goto	i1l1016
  1992  0258                     u46_20:
  1993  0258                     i1l1022:
  1994  0258  0878               	movf	___lwmod@divisor+1,w
  1995  0259  027A               	subwf	___lwmod@dividend+1,w
  1996  025A  1D03               	skipz
  1997  025B  2A5E               	goto	u47_25
  1998  025C  0877               	movf	___lwmod@divisor,w
  1999  025D  0279               	subwf	___lwmod@dividend,w
  2000  025E                     u47_25:
  2001  025E  1C03               	skipc
  2002  025F  2A61               	goto	u47_21
  2003  0260  2A62               	goto	u47_20
  2004  0261                     u47_21:
  2005  0261  2A68               	goto	i1l1026
  2006  0262                     u47_20:
  2007  0262                     i1l1024:
  2008  0262  0877               	movf	___lwmod@divisor,w
  2009  0263  02F9               	subwf	___lwmod@dividend,f
  2010  0264  0878               	movf	___lwmod@divisor+1,w
  2011  0265  1C03               	skipc
  2012  0266  03FA               	decf	___lwmod@dividend+1,f
  2013  0267  02FA               	subwf	___lwmod@dividend+1,f
  2014  0268                     i1l1026:
  2015  0268  3001               	movlw	1
  2016  0269                     u48_25:
  2017  0269  1003               	clrc
  2018  026A  0CF8               	rrf	___lwmod@divisor+1,f
  2019  026B  0CF7               	rrf	___lwmod@divisor,f
  2020  026C  3EFF               	addlw	-1
  2021  026D  1D03               	skipz
  2022  026E  2A69               	goto	u48_25
  2023  026F                     i1l1028:
  2024  026F  3001               	movlw	1
  2025  0270  02FB               	subwf	___lwmod@counter,f
  2026  0271  1D03               	btfss	3,2
  2027  0272  2A74               	goto	u49_21
  2028  0273  2A75               	goto	u49_20
  2029  0274                     u49_21:
  2030  0274  2A58               	goto	i1l1022
  2031  0275                     u49_20:
  2032  0275                     i1l1030:
  2033  0275  087A               	movf	___lwmod@dividend+1,w
  2034  0276  00F8               	movwf	?___lwmod+1
  2035  0277  0879               	movf	___lwmod@dividend,w
  2036  0278  00F7               	movwf	?___lwmod
  2037  0279                     i1l497:
  2038  0279  0008               	return
  2039  027A                     __end_of___lwmod:
  2040                           
  2041                           	psect	text12
  2042  01FC                     __ptext12:	
  2043 ;; *************** function ___lwdiv *****************
  2044 ;; Defined at:
  2045 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwdiv.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  divisor         2    0[COMMON] unsigned int 
  2048 ;;  dividend        2    2[COMMON] unsigned int 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  quotient        2    4[COMMON] unsigned int 
  2051 ;;  counter         1    6[COMMON] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2    0[COMMON] unsigned int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0, btemp+1
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2061 ;;      Params:         4       0       0       0       0
  2062 ;;      Locals:         3       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0
  2064 ;;      Totals:         7       0       0       0       0
  2065 ;;Total ram usage:        7 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_sprintf
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           
  2075                           ;psect for function ___lwdiv
  2076  01FC                     ___lwdiv:
  2077  01FC                     i1l986:	
  2078                           ;incstack = 0
  2079                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  2080                           
  2081  01FC  01F4               	clrf	___lwdiv@quotient
  2082  01FD  01F5               	clrf	___lwdiv@quotient+1
  2083  01FE                     i1l988:
  2084  01FE  0870               	movf	___lwdiv@divisor,w
  2085  01FF  0471               	iorwf	___lwdiv@divisor+1,w
  2086  0200  1903               	btfsc	3,2
  2087  0201  2A03               	goto	u37_21
  2088  0202  2A04               	goto	u37_20
  2089  0203                     u37_21:
  2090  0203  2A3B               	goto	i1l1008
  2091  0204                     u37_20:
  2092  0204                     i1l990:
  2093  0204  01F6               	clrf	___lwdiv@counter
  2094  0205  0AF6               	incf	___lwdiv@counter,f
  2095  0206  2A12               	goto	i1l996
  2096  0207                     i1l992:
  2097  0207  3001               	movlw	1
  2098  0208                     u38_25:
  2099  0208  1003               	clrc
  2100  0209  0DF0               	rlf	___lwdiv@divisor,f
  2101  020A  0DF1               	rlf	___lwdiv@divisor+1,f
  2102  020B  3EFF               	addlw	-1
  2103  020C  1D03               	skipz
  2104  020D  2A08               	goto	u38_25
  2105  020E                     i1l994:
  2106  020E  3001               	movlw	1
  2107  020F  00FF               	movwf	btemp+1
  2108  0210  087F               	movf	btemp+1,w
  2109  0211  07F6               	addwf	___lwdiv@counter,f
  2110  0212                     i1l996:
  2111  0212  1FF1               	btfss	___lwdiv@divisor+1,7
  2112  0213  2A15               	goto	u39_21
  2113  0214  2A16               	goto	u39_20
  2114  0215                     u39_21:
  2115  0215  2A07               	goto	i1l992
  2116  0216                     u39_20:
  2117  0216                     i1l998:
  2118  0216  3001               	movlw	1
  2119  0217                     u40_25:
  2120  0217  1003               	clrc
  2121  0218  0DF4               	rlf	___lwdiv@quotient,f
  2122  0219  0DF5               	rlf	___lwdiv@quotient+1,f
  2123  021A  3EFF               	addlw	-1
  2124  021B  1D03               	skipz
  2125  021C  2A17               	goto	u40_25
  2126  021D  0871               	movf	___lwdiv@divisor+1,w
  2127  021E  0273               	subwf	___lwdiv@dividend+1,w
  2128  021F  1D03               	skipz
  2129  0220  2A23               	goto	u41_25
  2130  0221  0870               	movf	___lwdiv@divisor,w
  2131  0222  0272               	subwf	___lwdiv@dividend,w
  2132  0223                     u41_25:
  2133  0223  1C03               	skipc
  2134  0224  2A26               	goto	u41_21
  2135  0225  2A27               	goto	u41_20
  2136  0226                     u41_21:
  2137  0226  2A2E               	goto	i1l1004
  2138  0227                     u41_20:
  2139  0227                     i1l1000:
  2140  0227  0870               	movf	___lwdiv@divisor,w
  2141  0228  02F2               	subwf	___lwdiv@dividend,f
  2142  0229  0871               	movf	___lwdiv@divisor+1,w
  2143  022A  1C03               	skipc
  2144  022B  03F3               	decf	___lwdiv@dividend+1,f
  2145  022C  02F3               	subwf	___lwdiv@dividend+1,f
  2146  022D                     i1l1002:
  2147  022D  1474               	bsf	___lwdiv@quotient,0
  2148  022E                     i1l1004:
  2149  022E  3001               	movlw	1
  2150  022F                     u42_25:
  2151  022F  1003               	clrc
  2152  0230  0CF1               	rrf	___lwdiv@divisor+1,f
  2153  0231  0CF0               	rrf	___lwdiv@divisor,f
  2154  0232  3EFF               	addlw	-1
  2155  0233  1D03               	skipz
  2156  0234  2A2F               	goto	u42_25
  2157  0235                     i1l1006:
  2158  0235  3001               	movlw	1
  2159  0236  02F6               	subwf	___lwdiv@counter,f
  2160  0237  1D03               	btfss	3,2
  2161  0238  2A3A               	goto	u43_21
  2162  0239  2A3B               	goto	u43_20
  2163  023A                     u43_21:
  2164  023A  2A16               	goto	i1l998
  2165  023B                     u43_20:
  2166  023B                     i1l1008:
  2167  023B  0875               	movf	___lwdiv@quotient+1,w
  2168  023C  00F1               	movwf	?___lwdiv+1
  2169  023D  0874               	movf	___lwdiv@quotient,w
  2170  023E  00F0               	movwf	?___lwdiv
  2171  023F                     i1l487:
  2172  023F  0008               	return
  2173  0240                     __end_of___lwdiv:
  2174  007E                     btemp	set	126	;btemp
  2175  007E                     wtemp0	set	126
  2176                           
  2177                           	psect	config
  2178                           
  2179                           ;Config register CONFIG1 @ 0x2007
  2180                           ;	Oscillator Selection bits
  2181                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2182                           ;	Watchdog Timer Enable bit
  2183                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2184                           ;	Power-up Timer Enable bit
  2185                           ;	PWRTE = OFF, PWRT disabled
  2186                           ;	RE3/MCLR pin function select bit
  2187                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  2188                           ;	Code Protection bit
  2189                           ;	CP = OFF, Program memory code protection is disabled
  2190                           ;	Data Code Protection bit
  2191                           ;	CPD = OFF, Data memory code protection is disabled
  2192                           ;	Brown Out Reset Selection bits
  2193                           ;	BOREN = ON, BOR enabled
  2194                           ;	Internal External Switchover bit
  2195                           ;	IESO = ON, Internal/External Switchover mode is enabled
  2196                           ;	Fail-Safe Clock Monitor Enabled bit
  2197                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  2198                           ;	Low Voltage Programming Enable bit
  2199                           ;	LVP = ON, RB3/PGM pin has PGM function, low voltage programming enabled
  2200                           ;	In-Circuit Debugger Mode bit
  2201                           ;	DEBUG = 0x1, unprogrammed default
  2202  2007                     	org	8199
  2203  2007  3FF2               	dw	16370
  2204                           
  2205                           ;Config register CONFIG2 @ 0x2008
  2206                           ;	Brown-out Reset Selection bit
  2207                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2208                           ;	Flash Program Memory Self Write Enable bits
  2209                           ;	WRT = OFF, Write protection off
  2210  2008                     	org	8200
  2211  2008  3FFF               	dw	16383

Data Sizes:
    Strings     4
    Constant    10
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> buffer(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    usart_TxStr@str	PTR unsigned char  size(1) Largest target is 4
		 -> buffer(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_enviarDato
    _usart_TxStr->i1_usart_Tx
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_usart_init
    _usart_init->___aldiv

Critical Paths under _ISR in BANK0

    _ISR->_enviarDato
    _enviarDato->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     747
                              _blink
                           _usart_Tx
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           8     4      4     725
                                             33 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                             18 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _usart_Tx                                             1     1      0      22
                                             18 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _blink                                                3     3      0       0
                                             18 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0    1333
                                             14 BANK0      4     4      0
                         _enviarDato
                           _usart_Rx
 ---------------------------------------------------------------------------------
 (4) _usart_Rx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _enviarDato                                           3     3      0    1333
                                             12 COMMON     2     2      0
                                             13 BANK0      1     1      0
                            _sprintf
                        _usart_TxStr
 ---------------------------------------------------------------------------------
 (5) _usart_TxStr                                          1     1      0     100
                                              1 COMMON     1     1      0
                         i1_usart_Tx
 ---------------------------------------------------------------------------------
 (6) i1_usart_Tx                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink
   _usart_Tx
   _usart_init
     ___aldiv

 _ISR (ROOT)
   _enviarDato
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _usart_TxStr
       i1_usart_Tx
   _usart_Rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     29      2E       5       57.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3C      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Aug 02 19:29:54 2021

                      pc 0002                       l56 02E9                       l82 0335  
                     l85 033B                       l79 01FB                       fsr 0004  
                    l280 011C                      l290 01A4                      u600 0120  
                    u601 011F                      u610 013F                      u611 013E  
                    _ISR 02A1                      u630 0153                      u631 0152  
                    u625 0144                      u650 016E                      u651 016D  
                    u717 02D2                      u645 0155                      u670 018C  
                    u590 010F                      u727 02E3                      u671 018B  
                    u655 016A                      u591 010E                      u680 0191  
                    u681 0190                      u665 017E                      u690 033B  
                    u691 033A                      fsr0 0004                      indf 0000  
                   ?_ISR 0070                     l1110 010B                     l1120 0137  
                   l1112 010F                     l1130 0153                     l1122 013F  
                   l1114 0120                     l1210 0285                     l1202 027A  
                   l1140 0186                     l1132 015C                     l1124 0142  
                   l1116 012B                     l1108 0108                     l1212 0292  
                   l1204 027D                     l1134 016E                     l1126 014B  
                   l1142 018C                     l1118 012F                     l1214 0298  
                   l1206 0281                     l1144 0191                     l1136 017C  
                   l1128 014F                     l1160 01E6                     l1208 0282  
                   l1146 019C                     l1138 017D                     l1170 01EF  
                   l1162 01E7                     l1180 01FA                     l1172 01F2  
                   l1164 01E8                     l1156 01A5                     l1182 0333  
                   l1174 01F3                     l1166 01EB                     l1158 01A9  
                   l1184 02C7                     l1176 01F6                     l1168 01EE  
                   l1186 02CA                     l1178 01F9                     l1188 02D8  
                   STR_1 032C                     i1l40 02BC                     i1l53 0304  
                   i1l82 0341              _usart_TxStr 0305                     i1l85 0347  
                   i1l94 031B                     i1l88 034B                     _chra 0049  
                   _main 027A                     btemp 007E                     start 0012  
             i1_usart_Tx 033C                    ??_ISR 002E          __end_of___aldiv 01A5  
                  ?_main 0070          __end_of___lwdiv 0240                    i1l211 0107  
        __end_of___lwmod 027A                    i1l487 023F                    i1l497 0279  
                  i1l990 0204                    i1l992 0207                    i1l994 020E  
                  i1l986 01FC                    i1l996 0212                    i1l988 01FE  
                  i1l998 0216                    _RCREG 001A                    u40_25 0217  
                  u41_20 0227                    u41_21 0226                    u41_25 0223  
                  u50_20 0347                    u50_21 0346                    _SPBRG 0099  
                  u42_25 022F                    u43_20 023B                    u51_20 002E  
                  u43_21 023A                    u51_21 002D                    _PORTB 0006  
                  _PORTD 0008                    u44_20 0246                    u52_20 0068  
                  u44_21 0245                    u52_21 0067                    u37_20 0204  
                  u53_20 008E                    u37_21 0203                    u53_21 008D  
                  u45_25 024A                    u53_25 008A                    u46_20 0258  
                  u54_20 0099                    u70_20 02B2                    u46_21 0257  
                  u54_21 0098                    u70_21 02B1                    u38_25 0208  
                  u39_20 0216                    u47_20 0262                    u55_20 009F  
                  u39_21 0215                    u47_21 0261                    u55_21 009E  
                  u47_25 025E                    u56_20 00F1                    u56_21 00F0  
                  u48_25 0269                    u49_20 0275                    u57_20 0103  
                  u49_21 0274                    u57_21 0102                    _TRISB 0086  
                  _TRISD 0088                    u58_20 031B                    u58_21 031A  
                  _TXREG 0019                    _blink 02C7          __end_of_dpowers 032C  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 0108          __initialization 0015             __end_of_main 02A1  
                 ??_main 0049                   ?_blink 0070                   _ANSELH 0189  
                 i1l1000 0227                   i1l1002 022D                   i1l1004 022E  
                 i1l1020 0254                   i1l1012 0240                   i1l1100 0306  
                 i1l1006 0235                   i1l1022 0258                   i1l1014 0246  
                 i1l1030 0275                   i1l1102 0307                   i1l1008 023B  
                 i1l1024 0262                   i1l1016 0249                   i1l1040 002E  
                 i1l1104 030F                   i1l1200 02BB                   i1l1026 0268  
                 i1l1018 0250                   i1l1050 0058                   i1l1042 0035  
                 i1l1034 033D                   i1l1106 0313                   i1l1028 026F  
                 i1l1060 0071                   i1l1052 0060                   i1l1044 003A  
                 i1l1036 0023                   i1l1070 008F                   i1l1054 0064  
                 i1l1038 0028                   i1l1150 0348                   i1l1080 00AA  
                 i1l1072 0093                   i1l1056 0068                   i1l1048 003B  
                 i1l1082 00AF                   i1l1074 0099                   i1l1066 0073  
                 i1l1058 006C                   i1l1090 00F1                   i1l1154 02ED  
                 i1l1084 00DD                   i1l1076 009F                   i1l1092 0103  
                 i1l1236 004D                   i1l1086 00E4                   i1l1078 00A6  
                 i1l1190 02A1                   i1l1088 00E8                   i1l1192 02A2  
                 i1l1194 02AC                   i1l1196 02B2                   i1l1198 02B8  
              ??___aldiv 003A              ?i1_usart_Tx 0070                ??___lwdiv 0074  
              ??___lwmod 007B                   _buffer 004A                   saved_w 007E  
              ??_sprintf 0023         __end_of_usart_Rx 034C         __end_of_usart_Tx 033C  
__end_of__initialization 001C           __pcstackCOMMON 0070           usart_TxStr@str 0071  
          __end_of_blink 02EA                  ??_blink 0032      __size_ofi1_usart_Tx 000C  
           ?_usart_TxStr 0070               __pbssBANK0 0049             usart_Tx@send 0032  
             __pmaintext 027A           usart_init@BAUD 0041               __pintentry 0004  
             __stringtab 031C           i1usart_Tx@send 0070               _enviarDato 02EA  
         _usart_init$991 0045                  ___aldiv 0108                  ___lwdiv 01FC  
                ___lwmod 0240                ?_usart_Rx 0070                ?_usart_Tx 0070  
                __ptext1 01A5                  __ptext2 0108                  __ptext3 0330  
                __ptext4 02C7                  __ptext5 02A1                  __ptext6 0348  
                __ptext7 02EA                  __ptext8 0305                  __ptext9 033C  
           __size_of_ISR 0026                  _dpowers 0322         ___aldiv@dividend 0036  
                _sprintf 0020     end_of_initialization 001C                _RCSTAbits 0018  
       ___aldiv@quotient 003D             ??i1_usart_Tx 0070               ??_usart_Rx 0070  
             ??_usart_Tx 0032                _PORTDbits 0008         enviarDato@entero 002D  
              _TRISCbits 0087       __end_ofi1_usart_Tx 0348     __size_of_usart_TxStr 0017  
              _TXSTAbits 0098               _usart_init 01A5              ?_enviarDato 0070  
    start_initialization 0015              __end_of_ISR 02C7                ___latbits 0002  
    __size_of_enviarDato 001B            __pcstackBANK0 0020              sprintf@flag 0027  
            sprintf@prec 0028              ?_usart_init 0041         ___lwdiv@dividend 0072  
               ?___aldiv 0032                 ?___lwdiv 0070                 ?___lwmod 0077  
              __pstrings 031C        __size_of_usart_Rx 0004        __size_of_usart_Tx 000C  
       ___lwdiv@quotient 0074           __size_of_blink 0023                 ?_sprintf 0020  
        ___aldiv@divisor 0032        interrupt_function 0004          ___aldiv@counter 003B  
               _PIE1bits 008C                 _PIR1bits 000C              __stringbase 0321  
    __size_of_usart_init 0057             ??_enviarDato 007C         __size_of___aldiv 009D  
       __size_of___lwdiv 0044         __size_of___lwmod 003A       __end_of__stringtab 0322  
             sprintf@val 0029          ___lwdiv@divisor 0070       __end_of_enviarDato 0305  
        ___lwdiv@counter 0076                 __ptext10 0020                 __ptext11 0240  
               __ptext12 01FC            ??_usart_TxStr 0071         __size_of_sprintf 00E8  
          __size_of_main 0027                 _usart_Rx 0348                 _usart_Tx 0330  
             _INTCONbits 000B                 intlevel1 0000                sprintf@ap 0026  
              sprintf@sp 002B         ___lwmod@dividend 0079             ??_usart_init 0045  
    __end_of_usart_TxStr 031C                stringcode 031C                 sprintf@c 002C  
               sprintf@f 0020          ___lwmod@divisor 0077          ___lwmod@counter 007B  
               stringdir 031C                 stringtab 031C             ___aldiv@sign 003C  
     __end_of_usart_init 01FC  
